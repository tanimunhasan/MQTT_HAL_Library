
sim7600mqtt.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003470  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000288  08003610  08003610  00013610  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003898  08003898  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08003898  08003898  00013898  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080038a0  080038a0  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080038a0  080038a0  000138a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080038a4  080038a4  000138a4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  080038a8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000c8  20000070  08003918  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000138  08003918  00020138  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   00009ff3  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001718  00000000  00000000  0002a093  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000728  00000000  00000000  0002b7b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000006a0  00000000  00000000  0002bed8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001690c  00000000  00000000  0002c578  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000920a  00000000  00000000  00042e84  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00090c43  00000000  00000000  0004c08e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000dccd1  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000203c  00000000  00000000  000dcd24  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000070 	.word	0x20000070
 80001bc:	00000000 	.word	0x00000000
 80001c0:	080035f8 	.word	0x080035f8

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000074 	.word	0x20000074
 80001dc:	080035f8 	.word	0x080035f8

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b96e 	b.w	8000584 <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9d08      	ldr	r5, [sp, #32]
 80002c6:	4604      	mov	r4, r0
 80002c8:	468c      	mov	ip, r1
 80002ca:	2b00      	cmp	r3, #0
 80002cc:	f040 8083 	bne.w	80003d6 <__udivmoddi4+0x116>
 80002d0:	428a      	cmp	r2, r1
 80002d2:	4617      	mov	r7, r2
 80002d4:	d947      	bls.n	8000366 <__udivmoddi4+0xa6>
 80002d6:	fab2 f282 	clz	r2, r2
 80002da:	b142      	cbz	r2, 80002ee <__udivmoddi4+0x2e>
 80002dc:	f1c2 0020 	rsb	r0, r2, #32
 80002e0:	fa24 f000 	lsr.w	r0, r4, r0
 80002e4:	4091      	lsls	r1, r2
 80002e6:	4097      	lsls	r7, r2
 80002e8:	ea40 0c01 	orr.w	ip, r0, r1
 80002ec:	4094      	lsls	r4, r2
 80002ee:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80002f2:	0c23      	lsrs	r3, r4, #16
 80002f4:	fbbc f6f8 	udiv	r6, ip, r8
 80002f8:	fa1f fe87 	uxth.w	lr, r7
 80002fc:	fb08 c116 	mls	r1, r8, r6, ip
 8000300:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000304:	fb06 f10e 	mul.w	r1, r6, lr
 8000308:	4299      	cmp	r1, r3
 800030a:	d909      	bls.n	8000320 <__udivmoddi4+0x60>
 800030c:	18fb      	adds	r3, r7, r3
 800030e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000312:	f080 8119 	bcs.w	8000548 <__udivmoddi4+0x288>
 8000316:	4299      	cmp	r1, r3
 8000318:	f240 8116 	bls.w	8000548 <__udivmoddi4+0x288>
 800031c:	3e02      	subs	r6, #2
 800031e:	443b      	add	r3, r7
 8000320:	1a5b      	subs	r3, r3, r1
 8000322:	b2a4      	uxth	r4, r4
 8000324:	fbb3 f0f8 	udiv	r0, r3, r8
 8000328:	fb08 3310 	mls	r3, r8, r0, r3
 800032c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000330:	fb00 fe0e 	mul.w	lr, r0, lr
 8000334:	45a6      	cmp	lr, r4
 8000336:	d909      	bls.n	800034c <__udivmoddi4+0x8c>
 8000338:	193c      	adds	r4, r7, r4
 800033a:	f100 33ff 	add.w	r3, r0, #4294967295
 800033e:	f080 8105 	bcs.w	800054c <__udivmoddi4+0x28c>
 8000342:	45a6      	cmp	lr, r4
 8000344:	f240 8102 	bls.w	800054c <__udivmoddi4+0x28c>
 8000348:	3802      	subs	r0, #2
 800034a:	443c      	add	r4, r7
 800034c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000350:	eba4 040e 	sub.w	r4, r4, lr
 8000354:	2600      	movs	r6, #0
 8000356:	b11d      	cbz	r5, 8000360 <__udivmoddi4+0xa0>
 8000358:	40d4      	lsrs	r4, r2
 800035a:	2300      	movs	r3, #0
 800035c:	e9c5 4300 	strd	r4, r3, [r5]
 8000360:	4631      	mov	r1, r6
 8000362:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000366:	b902      	cbnz	r2, 800036a <__udivmoddi4+0xaa>
 8000368:	deff      	udf	#255	; 0xff
 800036a:	fab2 f282 	clz	r2, r2
 800036e:	2a00      	cmp	r2, #0
 8000370:	d150      	bne.n	8000414 <__udivmoddi4+0x154>
 8000372:	1bcb      	subs	r3, r1, r7
 8000374:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000378:	fa1f f887 	uxth.w	r8, r7
 800037c:	2601      	movs	r6, #1
 800037e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000382:	0c21      	lsrs	r1, r4, #16
 8000384:	fb0e 331c 	mls	r3, lr, ip, r3
 8000388:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800038c:	fb08 f30c 	mul.w	r3, r8, ip
 8000390:	428b      	cmp	r3, r1
 8000392:	d907      	bls.n	80003a4 <__udivmoddi4+0xe4>
 8000394:	1879      	adds	r1, r7, r1
 8000396:	f10c 30ff 	add.w	r0, ip, #4294967295
 800039a:	d202      	bcs.n	80003a2 <__udivmoddi4+0xe2>
 800039c:	428b      	cmp	r3, r1
 800039e:	f200 80e9 	bhi.w	8000574 <__udivmoddi4+0x2b4>
 80003a2:	4684      	mov	ip, r0
 80003a4:	1ac9      	subs	r1, r1, r3
 80003a6:	b2a3      	uxth	r3, r4
 80003a8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003ac:	fb0e 1110 	mls	r1, lr, r0, r1
 80003b0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80003b4:	fb08 f800 	mul.w	r8, r8, r0
 80003b8:	45a0      	cmp	r8, r4
 80003ba:	d907      	bls.n	80003cc <__udivmoddi4+0x10c>
 80003bc:	193c      	adds	r4, r7, r4
 80003be:	f100 33ff 	add.w	r3, r0, #4294967295
 80003c2:	d202      	bcs.n	80003ca <__udivmoddi4+0x10a>
 80003c4:	45a0      	cmp	r8, r4
 80003c6:	f200 80d9 	bhi.w	800057c <__udivmoddi4+0x2bc>
 80003ca:	4618      	mov	r0, r3
 80003cc:	eba4 0408 	sub.w	r4, r4, r8
 80003d0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003d4:	e7bf      	b.n	8000356 <__udivmoddi4+0x96>
 80003d6:	428b      	cmp	r3, r1
 80003d8:	d909      	bls.n	80003ee <__udivmoddi4+0x12e>
 80003da:	2d00      	cmp	r5, #0
 80003dc:	f000 80b1 	beq.w	8000542 <__udivmoddi4+0x282>
 80003e0:	2600      	movs	r6, #0
 80003e2:	e9c5 0100 	strd	r0, r1, [r5]
 80003e6:	4630      	mov	r0, r6
 80003e8:	4631      	mov	r1, r6
 80003ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ee:	fab3 f683 	clz	r6, r3
 80003f2:	2e00      	cmp	r6, #0
 80003f4:	d14a      	bne.n	800048c <__udivmoddi4+0x1cc>
 80003f6:	428b      	cmp	r3, r1
 80003f8:	d302      	bcc.n	8000400 <__udivmoddi4+0x140>
 80003fa:	4282      	cmp	r2, r0
 80003fc:	f200 80b8 	bhi.w	8000570 <__udivmoddi4+0x2b0>
 8000400:	1a84      	subs	r4, r0, r2
 8000402:	eb61 0103 	sbc.w	r1, r1, r3
 8000406:	2001      	movs	r0, #1
 8000408:	468c      	mov	ip, r1
 800040a:	2d00      	cmp	r5, #0
 800040c:	d0a8      	beq.n	8000360 <__udivmoddi4+0xa0>
 800040e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000412:	e7a5      	b.n	8000360 <__udivmoddi4+0xa0>
 8000414:	f1c2 0320 	rsb	r3, r2, #32
 8000418:	fa20 f603 	lsr.w	r6, r0, r3
 800041c:	4097      	lsls	r7, r2
 800041e:	fa01 f002 	lsl.w	r0, r1, r2
 8000422:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000426:	40d9      	lsrs	r1, r3
 8000428:	4330      	orrs	r0, r6
 800042a:	0c03      	lsrs	r3, r0, #16
 800042c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000430:	fa1f f887 	uxth.w	r8, r7
 8000434:	fb0e 1116 	mls	r1, lr, r6, r1
 8000438:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800043c:	fb06 f108 	mul.w	r1, r6, r8
 8000440:	4299      	cmp	r1, r3
 8000442:	fa04 f402 	lsl.w	r4, r4, r2
 8000446:	d909      	bls.n	800045c <__udivmoddi4+0x19c>
 8000448:	18fb      	adds	r3, r7, r3
 800044a:	f106 3cff 	add.w	ip, r6, #4294967295
 800044e:	f080 808d 	bcs.w	800056c <__udivmoddi4+0x2ac>
 8000452:	4299      	cmp	r1, r3
 8000454:	f240 808a 	bls.w	800056c <__udivmoddi4+0x2ac>
 8000458:	3e02      	subs	r6, #2
 800045a:	443b      	add	r3, r7
 800045c:	1a5b      	subs	r3, r3, r1
 800045e:	b281      	uxth	r1, r0
 8000460:	fbb3 f0fe 	udiv	r0, r3, lr
 8000464:	fb0e 3310 	mls	r3, lr, r0, r3
 8000468:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800046c:	fb00 f308 	mul.w	r3, r0, r8
 8000470:	428b      	cmp	r3, r1
 8000472:	d907      	bls.n	8000484 <__udivmoddi4+0x1c4>
 8000474:	1879      	adds	r1, r7, r1
 8000476:	f100 3cff 	add.w	ip, r0, #4294967295
 800047a:	d273      	bcs.n	8000564 <__udivmoddi4+0x2a4>
 800047c:	428b      	cmp	r3, r1
 800047e:	d971      	bls.n	8000564 <__udivmoddi4+0x2a4>
 8000480:	3802      	subs	r0, #2
 8000482:	4439      	add	r1, r7
 8000484:	1acb      	subs	r3, r1, r3
 8000486:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800048a:	e778      	b.n	800037e <__udivmoddi4+0xbe>
 800048c:	f1c6 0c20 	rsb	ip, r6, #32
 8000490:	fa03 f406 	lsl.w	r4, r3, r6
 8000494:	fa22 f30c 	lsr.w	r3, r2, ip
 8000498:	431c      	orrs	r4, r3
 800049a:	fa20 f70c 	lsr.w	r7, r0, ip
 800049e:	fa01 f306 	lsl.w	r3, r1, r6
 80004a2:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80004a6:	fa21 f10c 	lsr.w	r1, r1, ip
 80004aa:	431f      	orrs	r7, r3
 80004ac:	0c3b      	lsrs	r3, r7, #16
 80004ae:	fbb1 f9fe 	udiv	r9, r1, lr
 80004b2:	fa1f f884 	uxth.w	r8, r4
 80004b6:	fb0e 1119 	mls	r1, lr, r9, r1
 80004ba:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80004be:	fb09 fa08 	mul.w	sl, r9, r8
 80004c2:	458a      	cmp	sl, r1
 80004c4:	fa02 f206 	lsl.w	r2, r2, r6
 80004c8:	fa00 f306 	lsl.w	r3, r0, r6
 80004cc:	d908      	bls.n	80004e0 <__udivmoddi4+0x220>
 80004ce:	1861      	adds	r1, r4, r1
 80004d0:	f109 30ff 	add.w	r0, r9, #4294967295
 80004d4:	d248      	bcs.n	8000568 <__udivmoddi4+0x2a8>
 80004d6:	458a      	cmp	sl, r1
 80004d8:	d946      	bls.n	8000568 <__udivmoddi4+0x2a8>
 80004da:	f1a9 0902 	sub.w	r9, r9, #2
 80004de:	4421      	add	r1, r4
 80004e0:	eba1 010a 	sub.w	r1, r1, sl
 80004e4:	b2bf      	uxth	r7, r7
 80004e6:	fbb1 f0fe 	udiv	r0, r1, lr
 80004ea:	fb0e 1110 	mls	r1, lr, r0, r1
 80004ee:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80004f2:	fb00 f808 	mul.w	r8, r0, r8
 80004f6:	45b8      	cmp	r8, r7
 80004f8:	d907      	bls.n	800050a <__udivmoddi4+0x24a>
 80004fa:	19e7      	adds	r7, r4, r7
 80004fc:	f100 31ff 	add.w	r1, r0, #4294967295
 8000500:	d22e      	bcs.n	8000560 <__udivmoddi4+0x2a0>
 8000502:	45b8      	cmp	r8, r7
 8000504:	d92c      	bls.n	8000560 <__udivmoddi4+0x2a0>
 8000506:	3802      	subs	r0, #2
 8000508:	4427      	add	r7, r4
 800050a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800050e:	eba7 0708 	sub.w	r7, r7, r8
 8000512:	fba0 8902 	umull	r8, r9, r0, r2
 8000516:	454f      	cmp	r7, r9
 8000518:	46c6      	mov	lr, r8
 800051a:	4649      	mov	r1, r9
 800051c:	d31a      	bcc.n	8000554 <__udivmoddi4+0x294>
 800051e:	d017      	beq.n	8000550 <__udivmoddi4+0x290>
 8000520:	b15d      	cbz	r5, 800053a <__udivmoddi4+0x27a>
 8000522:	ebb3 020e 	subs.w	r2, r3, lr
 8000526:	eb67 0701 	sbc.w	r7, r7, r1
 800052a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800052e:	40f2      	lsrs	r2, r6
 8000530:	ea4c 0202 	orr.w	r2, ip, r2
 8000534:	40f7      	lsrs	r7, r6
 8000536:	e9c5 2700 	strd	r2, r7, [r5]
 800053a:	2600      	movs	r6, #0
 800053c:	4631      	mov	r1, r6
 800053e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000542:	462e      	mov	r6, r5
 8000544:	4628      	mov	r0, r5
 8000546:	e70b      	b.n	8000360 <__udivmoddi4+0xa0>
 8000548:	4606      	mov	r6, r0
 800054a:	e6e9      	b.n	8000320 <__udivmoddi4+0x60>
 800054c:	4618      	mov	r0, r3
 800054e:	e6fd      	b.n	800034c <__udivmoddi4+0x8c>
 8000550:	4543      	cmp	r3, r8
 8000552:	d2e5      	bcs.n	8000520 <__udivmoddi4+0x260>
 8000554:	ebb8 0e02 	subs.w	lr, r8, r2
 8000558:	eb69 0104 	sbc.w	r1, r9, r4
 800055c:	3801      	subs	r0, #1
 800055e:	e7df      	b.n	8000520 <__udivmoddi4+0x260>
 8000560:	4608      	mov	r0, r1
 8000562:	e7d2      	b.n	800050a <__udivmoddi4+0x24a>
 8000564:	4660      	mov	r0, ip
 8000566:	e78d      	b.n	8000484 <__udivmoddi4+0x1c4>
 8000568:	4681      	mov	r9, r0
 800056a:	e7b9      	b.n	80004e0 <__udivmoddi4+0x220>
 800056c:	4666      	mov	r6, ip
 800056e:	e775      	b.n	800045c <__udivmoddi4+0x19c>
 8000570:	4630      	mov	r0, r6
 8000572:	e74a      	b.n	800040a <__udivmoddi4+0x14a>
 8000574:	f1ac 0c02 	sub.w	ip, ip, #2
 8000578:	4439      	add	r1, r7
 800057a:	e713      	b.n	80003a4 <__udivmoddi4+0xe4>
 800057c:	3802      	subs	r0, #2
 800057e:	443c      	add	r4, r7
 8000580:	e724      	b.n	80003cc <__udivmoddi4+0x10c>
 8000582:	bf00      	nop

08000584 <__aeabi_idiv0>:
 8000584:	4770      	bx	lr
 8000586:	bf00      	nop

08000588 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000588:	b580      	push	{r7, lr}
 800058a:	b0a8      	sub	sp, #160	; 0xa0
 800058c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800058e:	f000 fdbd 	bl	800110c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000592:	f000 fb61 	bl	8000c58 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000596:	f000 fc3b 	bl	8000e10 <MX_GPIO_Init>
  MX_ADC1_Init();
 800059a:	f000 fbbd 	bl	8000d18 <MX_ADC1_Init>
  MX_USART1_UART_Init();
 800059e:	f000 fc0d 	bl	8000dbc <MX_USART1_UART_Init>
  HAL_ADC_Start(&hadc1);
 80005a2:	48df      	ldr	r0, [pc, #892]	; (8000920 <main+0x398>)
 80005a4:	f000 fe8c 	bl	80012c0 <HAL_ADC_Start>
  /* USER CODE BEGIN 2 */

  char ATcommand [80];
  uint16_t readValue;
  char charData[15];
  char* pub = "{\"id\":13,\"info\":\"1110102\"}";
 80005a8:	4bde      	ldr	r3, [pc, #888]	; (8000924 <main+0x39c>)
 80005aa:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  char* str = "{\"clientKeys1\":\"id\",\"clientKeys2\":\"info\"}";
 80005ae:	4bde      	ldr	r3, [pc, #888]	; (8000928 <main+0x3a0>)
 80005b0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  char* ptopic = "v1/devices/me/attributes";
 80005b4:	4bdd      	ldr	r3, [pc, #884]	; (800092c <main+0x3a4>)
 80005b6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  char* topic = "v1/devices/me/attributes/request/1";
 80005ba:	4bdd      	ldr	r3, [pc, #884]	; (8000930 <main+0x3a8>)
 80005bc:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  char* stopic = "v1/devices/me/attributes/response/+";
 80005c0:	4bdc      	ldr	r3, [pc, #880]	; (8000934 <main+0x3ac>)
 80005c2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  uint8_t buffer[30] = {0};
 80005c6:	2300      	movs	r3, #0
 80005c8:	607b      	str	r3, [r7, #4]
 80005ca:	f107 0308 	add.w	r3, r7, #8
 80005ce:	2200      	movs	r2, #0
 80005d0:	601a      	str	r2, [r3, #0]
 80005d2:	605a      	str	r2, [r3, #4]
 80005d4:	609a      	str	r2, [r3, #8]
 80005d6:	60da      	str	r2, [r3, #12]
 80005d8:	611a      	str	r2, [r3, #16]
 80005da:	615a      	str	r2, [r3, #20]
 80005dc:	831a      	strh	r2, [r3, #24]

  uint8_t q = strlen(ptopic);
 80005de:	f8d7 0094 	ldr.w	r0, [r7, #148]	; 0x94
 80005e2:	f7ff fdfd 	bl	80001e0 <strlen>
 80005e6:	4603      	mov	r3, r0
 80005e8:	f887 308b 	strb.w	r3, [r7, #139]	; 0x8b
  uint8_t n = strlen(topic);
 80005ec:	f8d7 0090 	ldr.w	r0, [r7, #144]	; 0x90
 80005f0:	f7ff fdf6 	bl	80001e0 <strlen>
 80005f4:	4603      	mov	r3, r0
 80005f6:	f887 308a 	strb.w	r3, [r7, #138]	; 0x8a
  uint8_t  p = strlen(stopic);
 80005fa:	f8d7 008c 	ldr.w	r0, [r7, #140]	; 0x8c
 80005fe:	f7ff fdef 	bl	80001e0 <strlen>
 8000602:	4603      	mov	r3, r0
 8000604:	f887 3089 	strb.w	r3, [r7, #137]	; 0x89
  uint8_t  r = 0;
 8000608:	2300      	movs	r3, #0
 800060a:	f887 3088 	strb.w	r3, [r7, #136]	; 0x88
  uint8_t  m = 0;
 800060e:	2300      	movs	r3, #0
 8000610:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
  r = strlen(pub);
 8000614:	f8d7 009c 	ldr.w	r0, [r7, #156]	; 0x9c
 8000618:	f7ff fde2 	bl	80001e0 <strlen>
 800061c:	4603      	mov	r3, r0
 800061e:	f887 3088 	strb.w	r3, [r7, #136]	; 0x88
  m = strlen(str);
 8000622:	f8d7 0098 	ldr.w	r0, [r7, #152]	; 0x98
 8000626:	f7ff fddb 	bl	80001e0 <strlen>
 800062a:	4603      	mov	r3, r0
 800062c:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87



  sprintf(ATcommand, "Modem Started...");
 8000630:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000634:	49c0      	ldr	r1, [pc, #768]	; (8000938 <main+0x3b0>)
 8000636:	4618      	mov	r0, r3
 8000638:	f002 fbb0 	bl	8002d9c <siprintf>
  HAL_UART_Transmit(&huart1, (uint8_t *)ATcommand, strlen(ATcommand), 100);
 800063c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000640:	4618      	mov	r0, r3
 8000642:	f7ff fdcd 	bl	80001e0 <strlen>
 8000646:	4603      	mov	r3, r0
 8000648:	b29a      	uxth	r2, r3
 800064a:	f107 0134 	add.w	r1, r7, #52	; 0x34
 800064e:	2364      	movs	r3, #100	; 0x64
 8000650:	48ba      	ldr	r0, [pc, #744]	; (800093c <main+0x3b4>)
 8000652:	f002 f806 	bl	8002662 <HAL_UART_Transmit>
  HAL_UART_Receive(&huart1, buffer, 30, 100);
 8000656:	1d39      	adds	r1, r7, #4
 8000658:	2364      	movs	r3, #100	; 0x64
 800065a:	221e      	movs	r2, #30
 800065c:	48b7      	ldr	r0, [pc, #732]	; (800093c <main+0x3b4>)
 800065e:	f002 f892 	bl	8002786 <HAL_UART_Receive>
  HAL_Delay(10);
 8000662:	200a      	movs	r0, #10
 8000664:	f000 fdc4 	bl	80011f0 <HAL_Delay>
  sprintf(ATcommand, "AT\r\n"); //AT Commands for Status Control
 8000668:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800066c:	49b4      	ldr	r1, [pc, #720]	; (8000940 <main+0x3b8>)
 800066e:	4618      	mov	r0, r3
 8000670:	f002 fb94 	bl	8002d9c <siprintf>
  //HAL_UART_Transmit(&huart1, (uint8_t *)ATcommand,strlen(ATcommand),1000);
  HAL_UART_Receive(&huart1, buffer, 30, 100);
 8000674:	1d39      	adds	r1, r7, #4
 8000676:	2364      	movs	r3, #100	; 0x64
 8000678:	221e      	movs	r2, #30
 800067a:	48b0      	ldr	r0, [pc, #704]	; (800093c <main+0x3b4>)
 800067c:	f002 f883 	bl	8002786 <HAL_UART_Receive>
  HAL_Delay(10);
 8000680:	200a      	movs	r0, #10
 8000682:	f000 fdb5 	bl	80011f0 <HAL_Delay>
  memset(buffer, 0, sizeof(buffer));
 8000686:	1d3b      	adds	r3, r7, #4
 8000688:	221e      	movs	r2, #30
 800068a:	2100      	movs	r1, #0
 800068c:	4618      	mov	r0, r3
 800068e:	f002 fb7d 	bl	8002d8c <memset>

  sprintf(ATcommand, "AT+CSQ\r\n");
 8000692:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000696:	49ab      	ldr	r1, [pc, #684]	; (8000944 <main+0x3bc>)
 8000698:	4618      	mov	r0, r3
 800069a:	f002 fb7f 	bl	8002d9c <siprintf>
  HAL_UART_Transmit(&huart1, (uint8_t *)ATcommand, strlen(ATcommand), 1000);
 800069e:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80006a2:	4618      	mov	r0, r3
 80006a4:	f7ff fd9c 	bl	80001e0 <strlen>
 80006a8:	4603      	mov	r3, r0
 80006aa:	b29a      	uxth	r2, r3
 80006ac:	f107 0134 	add.w	r1, r7, #52	; 0x34
 80006b0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80006b4:	48a1      	ldr	r0, [pc, #644]	; (800093c <main+0x3b4>)
 80006b6:	f001 ffd4 	bl	8002662 <HAL_UART_Transmit>
  HAL_Delay(10);
 80006ba:	200a      	movs	r0, #10
 80006bc:	f000 fd98 	bl	80011f0 <HAL_Delay>

  sprintf(ATcommand, "AT+CPIN?\r\n");
 80006c0:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80006c4:	49a0      	ldr	r1, [pc, #640]	; (8000948 <main+0x3c0>)
 80006c6:	4618      	mov	r0, r3
 80006c8:	f002 fb68 	bl	8002d9c <siprintf>
  HAL_UART_Transmit(&huart1, (uint8_t *)ATcommand, strlen(ATcommand), 1000);
 80006cc:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80006d0:	4618      	mov	r0, r3
 80006d2:	f7ff fd85 	bl	80001e0 <strlen>
 80006d6:	4603      	mov	r3, r0
 80006d8:	b29a      	uxth	r2, r3
 80006da:	f107 0134 	add.w	r1, r7, #52	; 0x34
 80006de:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80006e2:	4896      	ldr	r0, [pc, #600]	; (800093c <main+0x3b4>)
 80006e4:	f001 ffbd 	bl	8002662 <HAL_UART_Transmit>
  HAL_Delay(10);
 80006e8:	200a      	movs	r0, #10
 80006ea:	f000 fd81 	bl	80011f0 <HAL_Delay>

  sprintf(ATcommand, "AT+COPS?\r\n");
 80006ee:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80006f2:	4996      	ldr	r1, [pc, #600]	; (800094c <main+0x3c4>)
 80006f4:	4618      	mov	r0, r3
 80006f6:	f002 fb51 	bl	8002d9c <siprintf>
  HAL_UART_Transmit(&huart1, (uint8_t *)ATcommand, strlen(ATcommand), 1000);
 80006fa:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80006fe:	4618      	mov	r0, r3
 8000700:	f7ff fd6e 	bl	80001e0 <strlen>
 8000704:	4603      	mov	r3, r0
 8000706:	b29a      	uxth	r2, r3
 8000708:	f107 0134 	add.w	r1, r7, #52	; 0x34
 800070c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000710:	488a      	ldr	r0, [pc, #552]	; (800093c <main+0x3b4>)
 8000712:	f001 ffa6 	bl	8002662 <HAL_UART_Transmit>
  HAL_Delay(10);
 8000716:	200a      	movs	r0, #10
 8000718:	f000 fd6a 	bl	80011f0 <HAL_Delay>

  sprintf(ATcommand, "AT+CREG=1\r\n");
 800071c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000720:	498b      	ldr	r1, [pc, #556]	; (8000950 <main+0x3c8>)
 8000722:	4618      	mov	r0, r3
 8000724:	f002 fb3a 	bl	8002d9c <siprintf>
  HAL_UART_Transmit(&huart1, (uint8_t *)ATcommand, strlen(ATcommand), 1000);
 8000728:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800072c:	4618      	mov	r0, r3
 800072e:	f7ff fd57 	bl	80001e0 <strlen>
 8000732:	4603      	mov	r3, r0
 8000734:	b29a      	uxth	r2, r3
 8000736:	f107 0134 	add.w	r1, r7, #52	; 0x34
 800073a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800073e:	487f      	ldr	r0, [pc, #508]	; (800093c <main+0x3b4>)
 8000740:	f001 ff8f 	bl	8002662 <HAL_UART_Transmit>
  HAL_Delay(10);
 8000744:	200a      	movs	r0, #10
 8000746:	f000 fd53 	bl	80011f0 <HAL_Delay>

  sprintf(ATcommand, "AT+CREG?\r\n");
 800074a:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800074e:	4981      	ldr	r1, [pc, #516]	; (8000954 <main+0x3cc>)
 8000750:	4618      	mov	r0, r3
 8000752:	f002 fb23 	bl	8002d9c <siprintf>
  HAL_UART_Transmit(&huart1, (uint8_t *)ATcommand, strlen(ATcommand), 1000);
 8000756:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800075a:	4618      	mov	r0, r3
 800075c:	f7ff fd40 	bl	80001e0 <strlen>
 8000760:	4603      	mov	r3, r0
 8000762:	b29a      	uxth	r2, r3
 8000764:	f107 0134 	add.w	r1, r7, #52	; 0x34
 8000768:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800076c:	4873      	ldr	r0, [pc, #460]	; (800093c <main+0x3b4>)
 800076e:	f001 ff78 	bl	8002662 <HAL_UART_Transmit>
  HAL_Delay(10);
 8000772:	200a      	movs	r0, #10
 8000774:	f000 fd3c 	bl	80011f0 <HAL_Delay>

  sprintf(ATcommand, "AT+CGMI\r\n");
 8000778:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800077c:	4976      	ldr	r1, [pc, #472]	; (8000958 <main+0x3d0>)
 800077e:	4618      	mov	r0, r3
 8000780:	f002 fb0c 	bl	8002d9c <siprintf>
  HAL_UART_Transmit(&huart1, (uint8_t *)ATcommand, strlen(ATcommand), 1000);
 8000784:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000788:	4618      	mov	r0, r3
 800078a:	f7ff fd29 	bl	80001e0 <strlen>
 800078e:	4603      	mov	r3, r0
 8000790:	b29a      	uxth	r2, r3
 8000792:	f107 0134 	add.w	r1, r7, #52	; 0x34
 8000796:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800079a:	4868      	ldr	r0, [pc, #416]	; (800093c <main+0x3b4>)
 800079c:	f001 ff61 	bl	8002662 <HAL_UART_Transmit>
  HAL_Delay(10);
 80007a0:	200a      	movs	r0, #10
 80007a2:	f000 fd25 	bl	80011f0 <HAL_Delay>

  sprintf(ATcommand, "AT+CNMP=2\r\n");
 80007a6:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80007aa:	496c      	ldr	r1, [pc, #432]	; (800095c <main+0x3d4>)
 80007ac:	4618      	mov	r0, r3
 80007ae:	f002 faf5 	bl	8002d9c <siprintf>
  HAL_UART_Transmit(&huart1, (uint8_t *)ATcommand, strlen(ATcommand), 1000);
 80007b2:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80007b6:	4618      	mov	r0, r3
 80007b8:	f7ff fd12 	bl	80001e0 <strlen>
 80007bc:	4603      	mov	r3, r0
 80007be:	b29a      	uxth	r2, r3
 80007c0:	f107 0134 	add.w	r1, r7, #52	; 0x34
 80007c4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80007c8:	485c      	ldr	r0, [pc, #368]	; (800093c <main+0x3b4>)
 80007ca:	f001 ff4a 	bl	8002662 <HAL_UART_Transmit>
  HAL_Delay(1000);
 80007ce:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80007d2:	f000 fd0d 	bl	80011f0 <HAL_Delay>

  sprintf(ATcommand, "AT+CMQTTDISC=0,120\r\n");
 80007d6:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80007da:	4961      	ldr	r1, [pc, #388]	; (8000960 <main+0x3d8>)
 80007dc:	4618      	mov	r0, r3
 80007de:	f002 fadd 	bl	8002d9c <siprintf>
  HAL_UART_Transmit(&huart1, (uint8_t *)ATcommand, strlen(ATcommand), 1000);
 80007e2:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80007e6:	4618      	mov	r0, r3
 80007e8:	f7ff fcfa 	bl	80001e0 <strlen>
 80007ec:	4603      	mov	r3, r0
 80007ee:	b29a      	uxth	r2, r3
 80007f0:	f107 0134 	add.w	r1, r7, #52	; 0x34
 80007f4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80007f8:	4850      	ldr	r0, [pc, #320]	; (800093c <main+0x3b4>)
 80007fa:	f001 ff32 	bl	8002662 <HAL_UART_Transmit>
  HAL_Delay(1000);
 80007fe:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000802:	f000 fcf5 	bl	80011f0 <HAL_Delay>

  sprintf(ATcommand, "AT+CMQTTREL\r\n");
 8000806:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800080a:	4956      	ldr	r1, [pc, #344]	; (8000964 <main+0x3dc>)
 800080c:	4618      	mov	r0, r3
 800080e:	f002 fac5 	bl	8002d9c <siprintf>
  HAL_UART_Transmit(&huart1, (uint8_t *)ATcommand, strlen(ATcommand), 1000);
 8000812:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000816:	4618      	mov	r0, r3
 8000818:	f7ff fce2 	bl	80001e0 <strlen>
 800081c:	4603      	mov	r3, r0
 800081e:	b29a      	uxth	r2, r3
 8000820:	f107 0134 	add.w	r1, r7, #52	; 0x34
 8000824:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000828:	4844      	ldr	r0, [pc, #272]	; (800093c <main+0x3b4>)
 800082a:	f001 ff1a 	bl	8002662 <HAL_UART_Transmit>
  HAL_Delay(1000);
 800082e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000832:	f000 fcdd 	bl	80011f0 <HAL_Delay>


  sprintf(ATcommand, "AT+CMQTTSTOP\r\n");
 8000836:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800083a:	494b      	ldr	r1, [pc, #300]	; (8000968 <main+0x3e0>)
 800083c:	4618      	mov	r0, r3
 800083e:	f002 faad 	bl	8002d9c <siprintf>
  HAL_UART_Transmit(&huart1, (uint8_t *)ATcommand, strlen(ATcommand), 1000);
 8000842:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000846:	4618      	mov	r0, r3
 8000848:	f7ff fcca 	bl	80001e0 <strlen>
 800084c:	4603      	mov	r3, r0
 800084e:	b29a      	uxth	r2, r3
 8000850:	f107 0134 	add.w	r1, r7, #52	; 0x34
 8000854:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000858:	4838      	ldr	r0, [pc, #224]	; (800093c <main+0x3b4>)
 800085a:	f001 ff02 	bl	8002662 <HAL_UART_Transmit>
  HAL_Delay(5000);
 800085e:	f241 3088 	movw	r0, #5000	; 0x1388
 8000862:	f000 fcc5 	bl	80011f0 <HAL_Delay>

  sprintf(ATcommand, "AT+CMQTTSTART\r\n");
 8000866:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800086a:	4940      	ldr	r1, [pc, #256]	; (800096c <main+0x3e4>)
 800086c:	4618      	mov	r0, r3
 800086e:	f002 fa95 	bl	8002d9c <siprintf>
  HAL_UART_Transmit(&huart1, (uint8_t *)ATcommand, strlen(ATcommand), 1000);
 8000872:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000876:	4618      	mov	r0, r3
 8000878:	f7ff fcb2 	bl	80001e0 <strlen>
 800087c:	4603      	mov	r3, r0
 800087e:	b29a      	uxth	r2, r3
 8000880:	f107 0134 	add.w	r1, r7, #52	; 0x34
 8000884:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000888:	482c      	ldr	r0, [pc, #176]	; (800093c <main+0x3b4>)
 800088a:	f001 feea 	bl	8002662 <HAL_UART_Transmit>
  HAL_Delay(1000);
 800088e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000892:	f000 fcad 	bl	80011f0 <HAL_Delay>

  sprintf(ATcommand, "AT+CMQTTACCQ=0,\"test\"\r\n");
 8000896:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800089a:	4935      	ldr	r1, [pc, #212]	; (8000970 <main+0x3e8>)
 800089c:	4618      	mov	r0, r3
 800089e:	f002 fa7d 	bl	8002d9c <siprintf>
  HAL_UART_Transmit(&huart1, (uint8_t *)ATcommand, strlen(ATcommand), 1000);
 80008a2:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80008a6:	4618      	mov	r0, r3
 80008a8:	f7ff fc9a 	bl	80001e0 <strlen>
 80008ac:	4603      	mov	r3, r0
 80008ae:	b29a      	uxth	r2, r3
 80008b0:	f107 0134 	add.w	r1, r7, #52	; 0x34
 80008b4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80008b8:	4820      	ldr	r0, [pc, #128]	; (800093c <main+0x3b4>)
 80008ba:	f001 fed2 	bl	8002662 <HAL_UART_Transmit>
  HAL_Delay(1000);
 80008be:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80008c2:	f000 fc95 	bl	80011f0 <HAL_Delay>

  sprintf(ATcommand, "AT+CMQTTCONNECT=0,\"tcp://thinkiot.com.bd\",20,1,\"test101\",\"test101\"\r\n ");
 80008c6:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80008ca:	492a      	ldr	r1, [pc, #168]	; (8000974 <main+0x3ec>)
 80008cc:	4618      	mov	r0, r3
 80008ce:	f002 fa65 	bl	8002d9c <siprintf>
  HAL_UART_Transmit(&huart1, (uint8_t *)ATcommand, strlen(ATcommand), 1000);
 80008d2:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80008d6:	4618      	mov	r0, r3
 80008d8:	f7ff fc82 	bl	80001e0 <strlen>
 80008dc:	4603      	mov	r3, r0
 80008de:	b29a      	uxth	r2, r3
 80008e0:	f107 0134 	add.w	r1, r7, #52	; 0x34
 80008e4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80008e8:	4814      	ldr	r0, [pc, #80]	; (800093c <main+0x3b4>)
 80008ea:	f001 feba 	bl	8002662 <HAL_UART_Transmit>
  HAL_Delay(1000);
 80008ee:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80008f2:	f000 fc7d 	bl	80011f0 <HAL_Delay>

  sprintf(ATcommand, "AT+CMQTTSUBTOPIC=0,%d,0\r\n", p);
 80008f6:	f897 2089 	ldrb.w	r2, [r7, #137]	; 0x89
 80008fa:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80008fe:	491e      	ldr	r1, [pc, #120]	; (8000978 <main+0x3f0>)
 8000900:	4618      	mov	r0, r3
 8000902:	f002 fa4b 	bl	8002d9c <siprintf>
  HAL_UART_Transmit(&huart1, (uint8_t *)ATcommand, strlen(ATcommand), 1000);
 8000906:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800090a:	4618      	mov	r0, r3
 800090c:	f7ff fc68 	bl	80001e0 <strlen>
 8000910:	4603      	mov	r3, r0
 8000912:	b29a      	uxth	r2, r3
 8000914:	f107 0134 	add.w	r1, r7, #52	; 0x34
 8000918:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800091c:	e02e      	b.n	800097c <main+0x3f4>
 800091e:	bf00      	nop
 8000920:	20000098 	.word	0x20000098
 8000924:	08003610 	.word	0x08003610
 8000928:	0800362c 	.word	0x0800362c
 800092c:	08003658 	.word	0x08003658
 8000930:	08003674 	.word	0x08003674
 8000934:	08003698 	.word	0x08003698
 8000938:	080036bc 	.word	0x080036bc
 800093c:	200000e0 	.word	0x200000e0
 8000940:	080036d0 	.word	0x080036d0
 8000944:	080036d8 	.word	0x080036d8
 8000948:	080036e4 	.word	0x080036e4
 800094c:	080036f0 	.word	0x080036f0
 8000950:	080036fc 	.word	0x080036fc
 8000954:	08003708 	.word	0x08003708
 8000958:	08003714 	.word	0x08003714
 800095c:	08003720 	.word	0x08003720
 8000960:	0800372c 	.word	0x0800372c
 8000964:	08003744 	.word	0x08003744
 8000968:	08003754 	.word	0x08003754
 800096c:	08003764 	.word	0x08003764
 8000970:	08003774 	.word	0x08003774
 8000974:	0800378c 	.word	0x0800378c
 8000978:	080037d4 	.word	0x080037d4
 800097c:	48b1      	ldr	r0, [pc, #708]	; (8000c44 <main+0x6bc>)
 800097e:	f001 fe70 	bl	8002662 <HAL_UART_Transmit>
  HAL_Delay(1000);
 8000982:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000986:	f000 fc33 	bl	80011f0 <HAL_Delay>
  sprintf(ATcommand, stopic);
 800098a:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800098e:	f8d7 108c 	ldr.w	r1, [r7, #140]	; 0x8c
 8000992:	4618      	mov	r0, r3
 8000994:	f002 fa02 	bl	8002d9c <siprintf>
  HAL_Delay(1000);
 8000998:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800099c:	f000 fc28 	bl	80011f0 <HAL_Delay>

  sprintf(ATcommand, "AT+CMQTTSUB=0\r\n ");
 80009a0:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80009a4:	49a8      	ldr	r1, [pc, #672]	; (8000c48 <main+0x6c0>)
 80009a6:	4618      	mov	r0, r3
 80009a8:	f002 f9f8 	bl	8002d9c <siprintf>
  HAL_UART_Transmit(&huart1, (uint8_t *)ATcommand, strlen(ATcommand), 1000);
 80009ac:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80009b0:	4618      	mov	r0, r3
 80009b2:	f7ff fc15 	bl	80001e0 <strlen>
 80009b6:	4603      	mov	r3, r0
 80009b8:	b29a      	uxth	r2, r3
 80009ba:	f107 0134 	add.w	r1, r7, #52	; 0x34
 80009be:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80009c2:	48a0      	ldr	r0, [pc, #640]	; (8000c44 <main+0x6bc>)
 80009c4:	f001 fe4d 	bl	8002662 <HAL_UART_Transmit>
  HAL_Delay(1000);
 80009c8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80009cc:	f000 fc10 	bl	80011f0 <HAL_Delay>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while(1){
    /* USER CODE END WHILE */

	  sprintf(ATcommand, "AT+CMQTTTOPIC=0,%d\r\n", q); //publish topic
 80009d0:	f897 208b 	ldrb.w	r2, [r7, #139]	; 0x8b
 80009d4:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80009d8:	499c      	ldr	r1, [pc, #624]	; (8000c4c <main+0x6c4>)
 80009da:	4618      	mov	r0, r3
 80009dc:	f002 f9de 	bl	8002d9c <siprintf>
	  HAL_UART_Transmit(&huart1, (uint8_t *)ATcommand, strlen(ATcommand), 1000);
 80009e0:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80009e4:	4618      	mov	r0, r3
 80009e6:	f7ff fbfb 	bl	80001e0 <strlen>
 80009ea:	4603      	mov	r3, r0
 80009ec:	b29a      	uxth	r2, r3
 80009ee:	f107 0134 	add.w	r1, r7, #52	; 0x34
 80009f2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80009f6:	4893      	ldr	r0, [pc, #588]	; (8000c44 <main+0x6bc>)
 80009f8:	f001 fe33 	bl	8002662 <HAL_UART_Transmit>
	  HAL_UART_Receive(&huart1, buffer, 100, 100);
 80009fc:	1d39      	adds	r1, r7, #4
 80009fe:	2364      	movs	r3, #100	; 0x64
 8000a00:	2264      	movs	r2, #100	; 0x64
 8000a02:	4890      	ldr	r0, [pc, #576]	; (8000c44 <main+0x6bc>)
 8000a04:	f001 febf 	bl	8002786 <HAL_UART_Receive>
	  HAL_Delay(1000);
 8000a08:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000a0c:	f000 fbf0 	bl	80011f0 <HAL_Delay>

	  sprintf(ATcommand, ptopic); //SET topic
 8000a10:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000a14:	f8d7 1094 	ldr.w	r1, [r7, #148]	; 0x94
 8000a18:	4618      	mov	r0, r3
 8000a1a:	f002 f9bf 	bl	8002d9c <siprintf>
	  HAL_UART_Transmit(&huart1, (uint8_t *)ATcommand, strlen(ATcommand), 1000);
 8000a1e:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000a22:	4618      	mov	r0, r3
 8000a24:	f7ff fbdc 	bl	80001e0 <strlen>
 8000a28:	4603      	mov	r3, r0
 8000a2a:	b29a      	uxth	r2, r3
 8000a2c:	f107 0134 	add.w	r1, r7, #52	; 0x34
 8000a30:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000a34:	4883      	ldr	r0, [pc, #524]	; (8000c44 <main+0x6bc>)
 8000a36:	f001 fe14 	bl	8002662 <HAL_UART_Transmit>
	  HAL_UART_Receive(&huart1, buffer, 30, 100);
 8000a3a:	1d39      	adds	r1, r7, #4
 8000a3c:	2364      	movs	r3, #100	; 0x64
 8000a3e:	221e      	movs	r2, #30
 8000a40:	4880      	ldr	r0, [pc, #512]	; (8000c44 <main+0x6bc>)
 8000a42:	f001 fea0 	bl	8002786 <HAL_UART_Receive>
	  HAL_Delay(5000);
 8000a46:	f241 3088 	movw	r0, #5000	; 0x1388
 8000a4a:	f000 fbd1 	bl	80011f0 <HAL_Delay>

	  sprintf(ATcommand, "AT+CMQTTPAYLOAD=0,%d\r\n", r); //Set publishing message
 8000a4e:	f897 2088 	ldrb.w	r2, [r7, #136]	; 0x88
 8000a52:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000a56:	497e      	ldr	r1, [pc, #504]	; (8000c50 <main+0x6c8>)
 8000a58:	4618      	mov	r0, r3
 8000a5a:	f002 f99f 	bl	8002d9c <siprintf>
	  HAL_UART_Transmit(&huart1, (uint8_t *)ATcommand, strlen(ATcommand), 1000);
 8000a5e:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000a62:	4618      	mov	r0, r3
 8000a64:	f7ff fbbc 	bl	80001e0 <strlen>
 8000a68:	4603      	mov	r3, r0
 8000a6a:	b29a      	uxth	r2, r3
 8000a6c:	f107 0134 	add.w	r1, r7, #52	; 0x34
 8000a70:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000a74:	4873      	ldr	r0, [pc, #460]	; (8000c44 <main+0x6bc>)
 8000a76:	f001 fdf4 	bl	8002662 <HAL_UART_Transmit>
	  HAL_UART_Receive(&huart1, buffer, 30, 100);
 8000a7a:	1d39      	adds	r1, r7, #4
 8000a7c:	2364      	movs	r3, #100	; 0x64
 8000a7e:	221e      	movs	r2, #30
 8000a80:	4870      	ldr	r0, [pc, #448]	; (8000c44 <main+0x6bc>)
 8000a82:	f001 fe80 	bl	8002786 <HAL_UART_Receive>
	  HAL_Delay(1000);
 8000a86:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000a8a:	f000 fbb1 	bl	80011f0 <HAL_Delay>

	  sprintf(ATcommand, pub); //Set publishing message
 8000a8e:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000a92:	f8d7 109c 	ldr.w	r1, [r7, #156]	; 0x9c
 8000a96:	4618      	mov	r0, r3
 8000a98:	f002 f980 	bl	8002d9c <siprintf>
	  HAL_UART_Transmit(&huart1, (uint8_t *)ATcommand, strlen(ATcommand), 1000);
 8000a9c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000aa0:	4618      	mov	r0, r3
 8000aa2:	f7ff fb9d 	bl	80001e0 <strlen>
 8000aa6:	4603      	mov	r3, r0
 8000aa8:	b29a      	uxth	r2, r3
 8000aaa:	f107 0134 	add.w	r1, r7, #52	; 0x34
 8000aae:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000ab2:	4864      	ldr	r0, [pc, #400]	; (8000c44 <main+0x6bc>)
 8000ab4:	f001 fdd5 	bl	8002662 <HAL_UART_Transmit>
	  HAL_UART_Receive(&huart1, buffer, 30, 100);
 8000ab8:	1d39      	adds	r1, r7, #4
 8000aba:	2364      	movs	r3, #100	; 0x64
 8000abc:	221e      	movs	r2, #30
 8000abe:	4861      	ldr	r0, [pc, #388]	; (8000c44 <main+0x6bc>)
 8000ac0:	f001 fe61 	bl	8002786 <HAL_UART_Receive>
	  HAL_Delay(1000);
 8000ac4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000ac8:	f000 fb92 	bl	80011f0 <HAL_Delay>

	  sprintf(ATcommand, "AT+CMQTTPUB=0,0,60\r\n"); //Send a PUBLISH message to server
 8000acc:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000ad0:	4960      	ldr	r1, [pc, #384]	; (8000c54 <main+0x6cc>)
 8000ad2:	4618      	mov	r0, r3
 8000ad4:	f002 f962 	bl	8002d9c <siprintf>
	  HAL_UART_Transmit(&huart1, (uint8_t *)ATcommand, strlen(ATcommand), 1000);
 8000ad8:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000adc:	4618      	mov	r0, r3
 8000ade:	f7ff fb7f 	bl	80001e0 <strlen>
 8000ae2:	4603      	mov	r3, r0
 8000ae4:	b29a      	uxth	r2, r3
 8000ae6:	f107 0134 	add.w	r1, r7, #52	; 0x34
 8000aea:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000aee:	4855      	ldr	r0, [pc, #340]	; (8000c44 <main+0x6bc>)
 8000af0:	f001 fdb7 	bl	8002662 <HAL_UART_Transmit>
	  HAL_UART_Receive(&huart1, buffer, 30, 100);
 8000af4:	1d39      	adds	r1, r7, #4
 8000af6:	2364      	movs	r3, #100	; 0x64
 8000af8:	221e      	movs	r2, #30
 8000afa:	4852      	ldr	r0, [pc, #328]	; (8000c44 <main+0x6bc>)
 8000afc:	f001 fe43 	bl	8002786 <HAL_UART_Receive>
	  HAL_Delay(1000);
 8000b00:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000b04:	f000 fb74 	bl	80011f0 <HAL_Delay>

	  sprintf(ATcommand, "AT+CMQTTTOPIC=0,%d\r\n", n); //publish topic
 8000b08:	f897 208a 	ldrb.w	r2, [r7, #138]	; 0x8a
 8000b0c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000b10:	494e      	ldr	r1, [pc, #312]	; (8000c4c <main+0x6c4>)
 8000b12:	4618      	mov	r0, r3
 8000b14:	f002 f942 	bl	8002d9c <siprintf>
	  HAL_UART_Transmit(&huart1, (uint8_t *)ATcommand, strlen(ATcommand), 1000);
 8000b18:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000b1c:	4618      	mov	r0, r3
 8000b1e:	f7ff fb5f 	bl	80001e0 <strlen>
 8000b22:	4603      	mov	r3, r0
 8000b24:	b29a      	uxth	r2, r3
 8000b26:	f107 0134 	add.w	r1, r7, #52	; 0x34
 8000b2a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000b2e:	4845      	ldr	r0, [pc, #276]	; (8000c44 <main+0x6bc>)
 8000b30:	f001 fd97 	bl	8002662 <HAL_UART_Transmit>
	  HAL_UART_Receive(&huart1, buffer, 30, 100);
 8000b34:	1d39      	adds	r1, r7, #4
 8000b36:	2364      	movs	r3, #100	; 0x64
 8000b38:	221e      	movs	r2, #30
 8000b3a:	4842      	ldr	r0, [pc, #264]	; (8000c44 <main+0x6bc>)
 8000b3c:	f001 fe23 	bl	8002786 <HAL_UART_Receive>
	  HAL_Delay(1000);
 8000b40:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000b44:	f000 fb54 	bl	80011f0 <HAL_Delay>

	  sprintf(ATcommand, topic); //SET topic
 8000b48:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000b4c:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8000b50:	4618      	mov	r0, r3
 8000b52:	f002 f923 	bl	8002d9c <siprintf>
	  HAL_UART_Transmit(&huart1, (uint8_t *)ATcommand, strlen(ATcommand), 1000);
 8000b56:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000b5a:	4618      	mov	r0, r3
 8000b5c:	f7ff fb40 	bl	80001e0 <strlen>
 8000b60:	4603      	mov	r3, r0
 8000b62:	b29a      	uxth	r2, r3
 8000b64:	f107 0134 	add.w	r1, r7, #52	; 0x34
 8000b68:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000b6c:	4835      	ldr	r0, [pc, #212]	; (8000c44 <main+0x6bc>)
 8000b6e:	f001 fd78 	bl	8002662 <HAL_UART_Transmit>
	  HAL_UART_Receive(&huart1, buffer, 30, 100);
 8000b72:	1d39      	adds	r1, r7, #4
 8000b74:	2364      	movs	r3, #100	; 0x64
 8000b76:	221e      	movs	r2, #30
 8000b78:	4832      	ldr	r0, [pc, #200]	; (8000c44 <main+0x6bc>)
 8000b7a:	f001 fe04 	bl	8002786 <HAL_UART_Receive>
	  HAL_Delay(1000);
 8000b7e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000b82:	f000 fb35 	bl	80011f0 <HAL_Delay>

	  sprintf(ATcommand, "AT+CMQTTPAYLOAD=0,%d\r\n", m); //Set publishing message
 8000b86:	f897 2087 	ldrb.w	r2, [r7, #135]	; 0x87
 8000b8a:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000b8e:	4930      	ldr	r1, [pc, #192]	; (8000c50 <main+0x6c8>)
 8000b90:	4618      	mov	r0, r3
 8000b92:	f002 f903 	bl	8002d9c <siprintf>
	  HAL_UART_Transmit(&huart1, (uint8_t *)ATcommand, strlen(ATcommand), 1000);
 8000b96:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000b9a:	4618      	mov	r0, r3
 8000b9c:	f7ff fb20 	bl	80001e0 <strlen>
 8000ba0:	4603      	mov	r3, r0
 8000ba2:	b29a      	uxth	r2, r3
 8000ba4:	f107 0134 	add.w	r1, r7, #52	; 0x34
 8000ba8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000bac:	4825      	ldr	r0, [pc, #148]	; (8000c44 <main+0x6bc>)
 8000bae:	f001 fd58 	bl	8002662 <HAL_UART_Transmit>
	  HAL_UART_Receive(&huart1, buffer, 30, 100);
 8000bb2:	1d39      	adds	r1, r7, #4
 8000bb4:	2364      	movs	r3, #100	; 0x64
 8000bb6:	221e      	movs	r2, #30
 8000bb8:	4822      	ldr	r0, [pc, #136]	; (8000c44 <main+0x6bc>)
 8000bba:	f001 fde4 	bl	8002786 <HAL_UART_Receive>
	  HAL_Delay(1000);
 8000bbe:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000bc2:	f000 fb15 	bl	80011f0 <HAL_Delay>

	  sprintf(ATcommand, str); //Set publishing message
 8000bc6:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000bca:	f8d7 1098 	ldr.w	r1, [r7, #152]	; 0x98
 8000bce:	4618      	mov	r0, r3
 8000bd0:	f002 f8e4 	bl	8002d9c <siprintf>
	  HAL_UART_Transmit(&huart1, (uint8_t *)ATcommand, strlen(ATcommand), 1000);
 8000bd4:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000bd8:	4618      	mov	r0, r3
 8000bda:	f7ff fb01 	bl	80001e0 <strlen>
 8000bde:	4603      	mov	r3, r0
 8000be0:	b29a      	uxth	r2, r3
 8000be2:	f107 0134 	add.w	r1, r7, #52	; 0x34
 8000be6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000bea:	4816      	ldr	r0, [pc, #88]	; (8000c44 <main+0x6bc>)
 8000bec:	f001 fd39 	bl	8002662 <HAL_UART_Transmit>
	  HAL_UART_Receive(&huart1, buffer, 30, 100);
 8000bf0:	1d39      	adds	r1, r7, #4
 8000bf2:	2364      	movs	r3, #100	; 0x64
 8000bf4:	221e      	movs	r2, #30
 8000bf6:	4813      	ldr	r0, [pc, #76]	; (8000c44 <main+0x6bc>)
 8000bf8:	f001 fdc5 	bl	8002786 <HAL_UART_Receive>
	  HAL_Delay(1000);
 8000bfc:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000c00:	f000 faf6 	bl	80011f0 <HAL_Delay>

	  sprintf(ATcommand, "AT+CMQTTPUB=0,0,60\r\n"); //Send a PUBLISH message to server
 8000c04:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000c08:	4912      	ldr	r1, [pc, #72]	; (8000c54 <main+0x6cc>)
 8000c0a:	4618      	mov	r0, r3
 8000c0c:	f002 f8c6 	bl	8002d9c <siprintf>
	  HAL_UART_Transmit(&huart1, (uint8_t *)ATcommand, strlen(ATcommand), 1000);
 8000c10:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000c14:	4618      	mov	r0, r3
 8000c16:	f7ff fae3 	bl	80001e0 <strlen>
 8000c1a:	4603      	mov	r3, r0
 8000c1c:	b29a      	uxth	r2, r3
 8000c1e:	f107 0134 	add.w	r1, r7, #52	; 0x34
 8000c22:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000c26:	4807      	ldr	r0, [pc, #28]	; (8000c44 <main+0x6bc>)
 8000c28:	f001 fd1b 	bl	8002662 <HAL_UART_Transmit>
	  HAL_UART_Receive(&huart1, buffer, 30, 100);
 8000c2c:	1d39      	adds	r1, r7, #4
 8000c2e:	2364      	movs	r3, #100	; 0x64
 8000c30:	221e      	movs	r2, #30
 8000c32:	4804      	ldr	r0, [pc, #16]	; (8000c44 <main+0x6bc>)
 8000c34:	f001 fda7 	bl	8002786 <HAL_UART_Receive>
	  HAL_Delay(1000);
 8000c38:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000c3c:	f000 fad8 	bl	80011f0 <HAL_Delay>
	  sprintf(ATcommand, "AT+CMQTTTOPIC=0,%d\r\n", q); //publish topic
 8000c40:	e6c6      	b.n	80009d0 <main+0x448>
 8000c42:	bf00      	nop
 8000c44:	200000e0 	.word	0x200000e0
 8000c48:	080037f0 	.word	0x080037f0
 8000c4c:	08003804 	.word	0x08003804
 8000c50:	0800381c 	.word	0x0800381c
 8000c54:	08003834 	.word	0x08003834

08000c58 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000c58:	b580      	push	{r7, lr}
 8000c5a:	b094      	sub	sp, #80	; 0x50
 8000c5c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000c5e:	f107 0320 	add.w	r3, r7, #32
 8000c62:	2230      	movs	r2, #48	; 0x30
 8000c64:	2100      	movs	r1, #0
 8000c66:	4618      	mov	r0, r3
 8000c68:	f002 f890 	bl	8002d8c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000c6c:	f107 030c 	add.w	r3, r7, #12
 8000c70:	2200      	movs	r2, #0
 8000c72:	601a      	str	r2, [r3, #0]
 8000c74:	605a      	str	r2, [r3, #4]
 8000c76:	609a      	str	r2, [r3, #8]
 8000c78:	60da      	str	r2, [r3, #12]
 8000c7a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c7c:	2300      	movs	r3, #0
 8000c7e:	60bb      	str	r3, [r7, #8]
 8000c80:	4b23      	ldr	r3, [pc, #140]	; (8000d10 <SystemClock_Config+0xb8>)
 8000c82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c84:	4a22      	ldr	r2, [pc, #136]	; (8000d10 <SystemClock_Config+0xb8>)
 8000c86:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000c8a:	6413      	str	r3, [r2, #64]	; 0x40
 8000c8c:	4b20      	ldr	r3, [pc, #128]	; (8000d10 <SystemClock_Config+0xb8>)
 8000c8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c90:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c94:	60bb      	str	r3, [r7, #8]
 8000c96:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000c98:	2300      	movs	r3, #0
 8000c9a:	607b      	str	r3, [r7, #4]
 8000c9c:	4b1d      	ldr	r3, [pc, #116]	; (8000d14 <SystemClock_Config+0xbc>)
 8000c9e:	681b      	ldr	r3, [r3, #0]
 8000ca0:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000ca4:	4a1b      	ldr	r2, [pc, #108]	; (8000d14 <SystemClock_Config+0xbc>)
 8000ca6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000caa:	6013      	str	r3, [r2, #0]
 8000cac:	4b19      	ldr	r3, [pc, #100]	; (8000d14 <SystemClock_Config+0xbc>)
 8000cae:	681b      	ldr	r3, [r3, #0]
 8000cb0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000cb4:	607b      	str	r3, [r7, #4]
 8000cb6:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000cb8:	2302      	movs	r3, #2
 8000cba:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000cbc:	2301      	movs	r3, #1
 8000cbe:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000cc0:	2310      	movs	r3, #16
 8000cc2:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000cc4:	2300      	movs	r3, #0
 8000cc6:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000cc8:	f107 0320 	add.w	r3, r7, #32
 8000ccc:	4618      	mov	r0, r3
 8000cce:	f001 f833 	bl	8001d38 <HAL_RCC_OscConfig>
 8000cd2:	4603      	mov	r3, r0
 8000cd4:	2b00      	cmp	r3, #0
 8000cd6:	d001      	beq.n	8000cdc <SystemClock_Config+0x84>
  {
    Error_Handler();
 8000cd8:	f000 f8c2 	bl	8000e60 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000cdc:	230f      	movs	r3, #15
 8000cde:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000ce0:	2300      	movs	r3, #0
 8000ce2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000ce4:	2300      	movs	r3, #0
 8000ce6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000ce8:	2300      	movs	r3, #0
 8000cea:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000cec:	2300      	movs	r3, #0
 8000cee:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000cf0:	f107 030c 	add.w	r3, r7, #12
 8000cf4:	2100      	movs	r1, #0
 8000cf6:	4618      	mov	r0, r3
 8000cf8:	f001 fa96 	bl	8002228 <HAL_RCC_ClockConfig>
 8000cfc:	4603      	mov	r3, r0
 8000cfe:	2b00      	cmp	r3, #0
 8000d00:	d001      	beq.n	8000d06 <SystemClock_Config+0xae>
  {
    Error_Handler();
 8000d02:	f000 f8ad 	bl	8000e60 <Error_Handler>
  }
}
 8000d06:	bf00      	nop
 8000d08:	3750      	adds	r7, #80	; 0x50
 8000d0a:	46bd      	mov	sp, r7
 8000d0c:	bd80      	pop	{r7, pc}
 8000d0e:	bf00      	nop
 8000d10:	40023800 	.word	0x40023800
 8000d14:	40007000 	.word	0x40007000

08000d18 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000d18:	b580      	push	{r7, lr}
 8000d1a:	b084      	sub	sp, #16
 8000d1c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000d1e:	463b      	mov	r3, r7
 8000d20:	2200      	movs	r2, #0
 8000d22:	601a      	str	r2, [r3, #0]
 8000d24:	605a      	str	r2, [r3, #4]
 8000d26:	609a      	str	r2, [r3, #8]
 8000d28:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000d2a:	4b21      	ldr	r3, [pc, #132]	; (8000db0 <MX_ADC1_Init+0x98>)
 8000d2c:	4a21      	ldr	r2, [pc, #132]	; (8000db4 <MX_ADC1_Init+0x9c>)
 8000d2e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8000d30:	4b1f      	ldr	r3, [pc, #124]	; (8000db0 <MX_ADC1_Init+0x98>)
 8000d32:	2200      	movs	r2, #0
 8000d34:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000d36:	4b1e      	ldr	r3, [pc, #120]	; (8000db0 <MX_ADC1_Init+0x98>)
 8000d38:	2200      	movs	r2, #0
 8000d3a:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8000d3c:	4b1c      	ldr	r3, [pc, #112]	; (8000db0 <MX_ADC1_Init+0x98>)
 8000d3e:	2200      	movs	r2, #0
 8000d40:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000d42:	4b1b      	ldr	r3, [pc, #108]	; (8000db0 <MX_ADC1_Init+0x98>)
 8000d44:	2201      	movs	r2, #1
 8000d46:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000d48:	4b19      	ldr	r3, [pc, #100]	; (8000db0 <MX_ADC1_Init+0x98>)
 8000d4a:	2200      	movs	r2, #0
 8000d4c:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000d50:	4b17      	ldr	r3, [pc, #92]	; (8000db0 <MX_ADC1_Init+0x98>)
 8000d52:	2200      	movs	r2, #0
 8000d54:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000d56:	4b16      	ldr	r3, [pc, #88]	; (8000db0 <MX_ADC1_Init+0x98>)
 8000d58:	4a17      	ldr	r2, [pc, #92]	; (8000db8 <MX_ADC1_Init+0xa0>)
 8000d5a:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000d5c:	4b14      	ldr	r3, [pc, #80]	; (8000db0 <MX_ADC1_Init+0x98>)
 8000d5e:	2200      	movs	r2, #0
 8000d60:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000d62:	4b13      	ldr	r3, [pc, #76]	; (8000db0 <MX_ADC1_Init+0x98>)
 8000d64:	2201      	movs	r2, #1
 8000d66:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000d68:	4b11      	ldr	r3, [pc, #68]	; (8000db0 <MX_ADC1_Init+0x98>)
 8000d6a:	2200      	movs	r2, #0
 8000d6c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000d70:	4b0f      	ldr	r3, [pc, #60]	; (8000db0 <MX_ADC1_Init+0x98>)
 8000d72:	2201      	movs	r2, #1
 8000d74:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000d76:	480e      	ldr	r0, [pc, #56]	; (8000db0 <MX_ADC1_Init+0x98>)
 8000d78:	f000 fa5e 	bl	8001238 <HAL_ADC_Init>
 8000d7c:	4603      	mov	r3, r0
 8000d7e:	2b00      	cmp	r3, #0
 8000d80:	d001      	beq.n	8000d86 <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 8000d82:	f000 f86d 	bl	8000e60 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8000d86:	2309      	movs	r3, #9
 8000d88:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000d8a:	2301      	movs	r3, #1
 8000d8c:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000d8e:	2300      	movs	r3, #0
 8000d90:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000d92:	463b      	mov	r3, r7
 8000d94:	4619      	mov	r1, r3
 8000d96:	4806      	ldr	r0, [pc, #24]	; (8000db0 <MX_ADC1_Init+0x98>)
 8000d98:	f000 fb46 	bl	8001428 <HAL_ADC_ConfigChannel>
 8000d9c:	4603      	mov	r3, r0
 8000d9e:	2b00      	cmp	r3, #0
 8000da0:	d001      	beq.n	8000da6 <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 8000da2:	f000 f85d 	bl	8000e60 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000da6:	bf00      	nop
 8000da8:	3710      	adds	r7, #16
 8000daa:	46bd      	mov	sp, r7
 8000dac:	bd80      	pop	{r7, pc}
 8000dae:	bf00      	nop
 8000db0:	20000098 	.word	0x20000098
 8000db4:	40012000 	.word	0x40012000
 8000db8:	0f000001 	.word	0x0f000001

08000dbc <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000dbc:	b580      	push	{r7, lr}
 8000dbe:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000dc0:	4b11      	ldr	r3, [pc, #68]	; (8000e08 <MX_USART1_UART_Init+0x4c>)
 8000dc2:	4a12      	ldr	r2, [pc, #72]	; (8000e0c <MX_USART1_UART_Init+0x50>)
 8000dc4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000dc6:	4b10      	ldr	r3, [pc, #64]	; (8000e08 <MX_USART1_UART_Init+0x4c>)
 8000dc8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000dcc:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000dce:	4b0e      	ldr	r3, [pc, #56]	; (8000e08 <MX_USART1_UART_Init+0x4c>)
 8000dd0:	2200      	movs	r2, #0
 8000dd2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000dd4:	4b0c      	ldr	r3, [pc, #48]	; (8000e08 <MX_USART1_UART_Init+0x4c>)
 8000dd6:	2200      	movs	r2, #0
 8000dd8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000dda:	4b0b      	ldr	r3, [pc, #44]	; (8000e08 <MX_USART1_UART_Init+0x4c>)
 8000ddc:	2200      	movs	r2, #0
 8000dde:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000de0:	4b09      	ldr	r3, [pc, #36]	; (8000e08 <MX_USART1_UART_Init+0x4c>)
 8000de2:	220c      	movs	r2, #12
 8000de4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000de6:	4b08      	ldr	r3, [pc, #32]	; (8000e08 <MX_USART1_UART_Init+0x4c>)
 8000de8:	2200      	movs	r2, #0
 8000dea:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000dec:	4b06      	ldr	r3, [pc, #24]	; (8000e08 <MX_USART1_UART_Init+0x4c>)
 8000dee:	2200      	movs	r2, #0
 8000df0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000df2:	4805      	ldr	r0, [pc, #20]	; (8000e08 <MX_USART1_UART_Init+0x4c>)
 8000df4:	f001 fbe8 	bl	80025c8 <HAL_UART_Init>
 8000df8:	4603      	mov	r3, r0
 8000dfa:	2b00      	cmp	r3, #0
 8000dfc:	d001      	beq.n	8000e02 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000dfe:	f000 f82f 	bl	8000e60 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000e02:	bf00      	nop
 8000e04:	bd80      	pop	{r7, pc}
 8000e06:	bf00      	nop
 8000e08:	200000e0 	.word	0x200000e0
 8000e0c:	40011000 	.word	0x40011000

08000e10 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000e10:	b480      	push	{r7}
 8000e12:	b083      	sub	sp, #12
 8000e14:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e16:	2300      	movs	r3, #0
 8000e18:	607b      	str	r3, [r7, #4]
 8000e1a:	4b10      	ldr	r3, [pc, #64]	; (8000e5c <MX_GPIO_Init+0x4c>)
 8000e1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e1e:	4a0f      	ldr	r2, [pc, #60]	; (8000e5c <MX_GPIO_Init+0x4c>)
 8000e20:	f043 0302 	orr.w	r3, r3, #2
 8000e24:	6313      	str	r3, [r2, #48]	; 0x30
 8000e26:	4b0d      	ldr	r3, [pc, #52]	; (8000e5c <MX_GPIO_Init+0x4c>)
 8000e28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e2a:	f003 0302 	and.w	r3, r3, #2
 8000e2e:	607b      	str	r3, [r7, #4]
 8000e30:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e32:	2300      	movs	r3, #0
 8000e34:	603b      	str	r3, [r7, #0]
 8000e36:	4b09      	ldr	r3, [pc, #36]	; (8000e5c <MX_GPIO_Init+0x4c>)
 8000e38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e3a:	4a08      	ldr	r2, [pc, #32]	; (8000e5c <MX_GPIO_Init+0x4c>)
 8000e3c:	f043 0301 	orr.w	r3, r3, #1
 8000e40:	6313      	str	r3, [r2, #48]	; 0x30
 8000e42:	4b06      	ldr	r3, [pc, #24]	; (8000e5c <MX_GPIO_Init+0x4c>)
 8000e44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e46:	f003 0301 	and.w	r3, r3, #1
 8000e4a:	603b      	str	r3, [r7, #0]
 8000e4c:	683b      	ldr	r3, [r7, #0]

}
 8000e4e:	bf00      	nop
 8000e50:	370c      	adds	r7, #12
 8000e52:	46bd      	mov	sp, r7
 8000e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e58:	4770      	bx	lr
 8000e5a:	bf00      	nop
 8000e5c:	40023800 	.word	0x40023800

08000e60 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000e60:	b480      	push	{r7}
 8000e62:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000e64:	b672      	cpsid	i
}
 8000e66:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000e68:	e7fe      	b.n	8000e68 <Error_Handler+0x8>
	...

08000e6c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000e6c:	b480      	push	{r7}
 8000e6e:	b083      	sub	sp, #12
 8000e70:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e72:	2300      	movs	r3, #0
 8000e74:	607b      	str	r3, [r7, #4]
 8000e76:	4b10      	ldr	r3, [pc, #64]	; (8000eb8 <HAL_MspInit+0x4c>)
 8000e78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e7a:	4a0f      	ldr	r2, [pc, #60]	; (8000eb8 <HAL_MspInit+0x4c>)
 8000e7c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000e80:	6453      	str	r3, [r2, #68]	; 0x44
 8000e82:	4b0d      	ldr	r3, [pc, #52]	; (8000eb8 <HAL_MspInit+0x4c>)
 8000e84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e86:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000e8a:	607b      	str	r3, [r7, #4]
 8000e8c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e8e:	2300      	movs	r3, #0
 8000e90:	603b      	str	r3, [r7, #0]
 8000e92:	4b09      	ldr	r3, [pc, #36]	; (8000eb8 <HAL_MspInit+0x4c>)
 8000e94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e96:	4a08      	ldr	r2, [pc, #32]	; (8000eb8 <HAL_MspInit+0x4c>)
 8000e98:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000e9c:	6413      	str	r3, [r2, #64]	; 0x40
 8000e9e:	4b06      	ldr	r3, [pc, #24]	; (8000eb8 <HAL_MspInit+0x4c>)
 8000ea0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ea2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ea6:	603b      	str	r3, [r7, #0]
 8000ea8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000eaa:	bf00      	nop
 8000eac:	370c      	adds	r7, #12
 8000eae:	46bd      	mov	sp, r7
 8000eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eb4:	4770      	bx	lr
 8000eb6:	bf00      	nop
 8000eb8:	40023800 	.word	0x40023800

08000ebc <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000ebc:	b580      	push	{r7, lr}
 8000ebe:	b08a      	sub	sp, #40	; 0x28
 8000ec0:	af00      	add	r7, sp, #0
 8000ec2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ec4:	f107 0314 	add.w	r3, r7, #20
 8000ec8:	2200      	movs	r2, #0
 8000eca:	601a      	str	r2, [r3, #0]
 8000ecc:	605a      	str	r2, [r3, #4]
 8000ece:	609a      	str	r2, [r3, #8]
 8000ed0:	60da      	str	r2, [r3, #12]
 8000ed2:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	681b      	ldr	r3, [r3, #0]
 8000ed8:	4a17      	ldr	r2, [pc, #92]	; (8000f38 <HAL_ADC_MspInit+0x7c>)
 8000eda:	4293      	cmp	r3, r2
 8000edc:	d127      	bne.n	8000f2e <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000ede:	2300      	movs	r3, #0
 8000ee0:	613b      	str	r3, [r7, #16]
 8000ee2:	4b16      	ldr	r3, [pc, #88]	; (8000f3c <HAL_ADC_MspInit+0x80>)
 8000ee4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ee6:	4a15      	ldr	r2, [pc, #84]	; (8000f3c <HAL_ADC_MspInit+0x80>)
 8000ee8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000eec:	6453      	str	r3, [r2, #68]	; 0x44
 8000eee:	4b13      	ldr	r3, [pc, #76]	; (8000f3c <HAL_ADC_MspInit+0x80>)
 8000ef0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ef2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000ef6:	613b      	str	r3, [r7, #16]
 8000ef8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000efa:	2300      	movs	r3, #0
 8000efc:	60fb      	str	r3, [r7, #12]
 8000efe:	4b0f      	ldr	r3, [pc, #60]	; (8000f3c <HAL_ADC_MspInit+0x80>)
 8000f00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f02:	4a0e      	ldr	r2, [pc, #56]	; (8000f3c <HAL_ADC_MspInit+0x80>)
 8000f04:	f043 0302 	orr.w	r3, r3, #2
 8000f08:	6313      	str	r3, [r2, #48]	; 0x30
 8000f0a:	4b0c      	ldr	r3, [pc, #48]	; (8000f3c <HAL_ADC_MspInit+0x80>)
 8000f0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f0e:	f003 0302 	and.w	r3, r3, #2
 8000f12:	60fb      	str	r3, [r7, #12]
 8000f14:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000f16:	2302      	movs	r3, #2
 8000f18:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000f1a:	2303      	movs	r3, #3
 8000f1c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f1e:	2300      	movs	r3, #0
 8000f20:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f22:	f107 0314 	add.w	r3, r7, #20
 8000f26:	4619      	mov	r1, r3
 8000f28:	4805      	ldr	r0, [pc, #20]	; (8000f40 <HAL_ADC_MspInit+0x84>)
 8000f2a:	f000 fd81 	bl	8001a30 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000f2e:	bf00      	nop
 8000f30:	3728      	adds	r7, #40	; 0x28
 8000f32:	46bd      	mov	sp, r7
 8000f34:	bd80      	pop	{r7, pc}
 8000f36:	bf00      	nop
 8000f38:	40012000 	.word	0x40012000
 8000f3c:	40023800 	.word	0x40023800
 8000f40:	40020400 	.word	0x40020400

08000f44 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000f44:	b580      	push	{r7, lr}
 8000f46:	b08a      	sub	sp, #40	; 0x28
 8000f48:	af00      	add	r7, sp, #0
 8000f4a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f4c:	f107 0314 	add.w	r3, r7, #20
 8000f50:	2200      	movs	r2, #0
 8000f52:	601a      	str	r2, [r3, #0]
 8000f54:	605a      	str	r2, [r3, #4]
 8000f56:	609a      	str	r2, [r3, #8]
 8000f58:	60da      	str	r2, [r3, #12]
 8000f5a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	681b      	ldr	r3, [r3, #0]
 8000f60:	4a19      	ldr	r2, [pc, #100]	; (8000fc8 <HAL_UART_MspInit+0x84>)
 8000f62:	4293      	cmp	r3, r2
 8000f64:	d12c      	bne.n	8000fc0 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000f66:	2300      	movs	r3, #0
 8000f68:	613b      	str	r3, [r7, #16]
 8000f6a:	4b18      	ldr	r3, [pc, #96]	; (8000fcc <HAL_UART_MspInit+0x88>)
 8000f6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f6e:	4a17      	ldr	r2, [pc, #92]	; (8000fcc <HAL_UART_MspInit+0x88>)
 8000f70:	f043 0310 	orr.w	r3, r3, #16
 8000f74:	6453      	str	r3, [r2, #68]	; 0x44
 8000f76:	4b15      	ldr	r3, [pc, #84]	; (8000fcc <HAL_UART_MspInit+0x88>)
 8000f78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f7a:	f003 0310 	and.w	r3, r3, #16
 8000f7e:	613b      	str	r3, [r7, #16]
 8000f80:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f82:	2300      	movs	r3, #0
 8000f84:	60fb      	str	r3, [r7, #12]
 8000f86:	4b11      	ldr	r3, [pc, #68]	; (8000fcc <HAL_UART_MspInit+0x88>)
 8000f88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f8a:	4a10      	ldr	r2, [pc, #64]	; (8000fcc <HAL_UART_MspInit+0x88>)
 8000f8c:	f043 0301 	orr.w	r3, r3, #1
 8000f90:	6313      	str	r3, [r2, #48]	; 0x30
 8000f92:	4b0e      	ldr	r3, [pc, #56]	; (8000fcc <HAL_UART_MspInit+0x88>)
 8000f94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f96:	f003 0301 	and.w	r3, r3, #1
 8000f9a:	60fb      	str	r3, [r7, #12]
 8000f9c:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000f9e:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8000fa2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fa4:	2302      	movs	r3, #2
 8000fa6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fa8:	2300      	movs	r3, #0
 8000faa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000fac:	2303      	movs	r3, #3
 8000fae:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000fb0:	2307      	movs	r3, #7
 8000fb2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fb4:	f107 0314 	add.w	r3, r7, #20
 8000fb8:	4619      	mov	r1, r3
 8000fba:	4805      	ldr	r0, [pc, #20]	; (8000fd0 <HAL_UART_MspInit+0x8c>)
 8000fbc:	f000 fd38 	bl	8001a30 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000fc0:	bf00      	nop
 8000fc2:	3728      	adds	r7, #40	; 0x28
 8000fc4:	46bd      	mov	sp, r7
 8000fc6:	bd80      	pop	{r7, pc}
 8000fc8:	40011000 	.word	0x40011000
 8000fcc:	40023800 	.word	0x40023800
 8000fd0:	40020000 	.word	0x40020000

08000fd4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000fd4:	b480      	push	{r7}
 8000fd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000fd8:	e7fe      	b.n	8000fd8 <NMI_Handler+0x4>

08000fda <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000fda:	b480      	push	{r7}
 8000fdc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000fde:	e7fe      	b.n	8000fde <HardFault_Handler+0x4>

08000fe0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000fe0:	b480      	push	{r7}
 8000fe2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000fe4:	e7fe      	b.n	8000fe4 <MemManage_Handler+0x4>

08000fe6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000fe6:	b480      	push	{r7}
 8000fe8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000fea:	e7fe      	b.n	8000fea <BusFault_Handler+0x4>

08000fec <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000fec:	b480      	push	{r7}
 8000fee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ff0:	e7fe      	b.n	8000ff0 <UsageFault_Handler+0x4>

08000ff2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000ff2:	b480      	push	{r7}
 8000ff4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000ff6:	bf00      	nop
 8000ff8:	46bd      	mov	sp, r7
 8000ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ffe:	4770      	bx	lr

08001000 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001000:	b480      	push	{r7}
 8001002:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001004:	bf00      	nop
 8001006:	46bd      	mov	sp, r7
 8001008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800100c:	4770      	bx	lr

0800100e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800100e:	b480      	push	{r7}
 8001010:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001012:	bf00      	nop
 8001014:	46bd      	mov	sp, r7
 8001016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800101a:	4770      	bx	lr

0800101c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800101c:	b580      	push	{r7, lr}
 800101e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001020:	f000 f8c6 	bl	80011b0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001024:	bf00      	nop
 8001026:	bd80      	pop	{r7, pc}

08001028 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001028:	b580      	push	{r7, lr}
 800102a:	b086      	sub	sp, #24
 800102c:	af00      	add	r7, sp, #0
 800102e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001030:	4a14      	ldr	r2, [pc, #80]	; (8001084 <_sbrk+0x5c>)
 8001032:	4b15      	ldr	r3, [pc, #84]	; (8001088 <_sbrk+0x60>)
 8001034:	1ad3      	subs	r3, r2, r3
 8001036:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001038:	697b      	ldr	r3, [r7, #20]
 800103a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800103c:	4b13      	ldr	r3, [pc, #76]	; (800108c <_sbrk+0x64>)
 800103e:	681b      	ldr	r3, [r3, #0]
 8001040:	2b00      	cmp	r3, #0
 8001042:	d102      	bne.n	800104a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001044:	4b11      	ldr	r3, [pc, #68]	; (800108c <_sbrk+0x64>)
 8001046:	4a12      	ldr	r2, [pc, #72]	; (8001090 <_sbrk+0x68>)
 8001048:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800104a:	4b10      	ldr	r3, [pc, #64]	; (800108c <_sbrk+0x64>)
 800104c:	681a      	ldr	r2, [r3, #0]
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	4413      	add	r3, r2
 8001052:	693a      	ldr	r2, [r7, #16]
 8001054:	429a      	cmp	r2, r3
 8001056:	d207      	bcs.n	8001068 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001058:	f001 fe6e 	bl	8002d38 <__errno>
 800105c:	4603      	mov	r3, r0
 800105e:	220c      	movs	r2, #12
 8001060:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001062:	f04f 33ff 	mov.w	r3, #4294967295
 8001066:	e009      	b.n	800107c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001068:	4b08      	ldr	r3, [pc, #32]	; (800108c <_sbrk+0x64>)
 800106a:	681b      	ldr	r3, [r3, #0]
 800106c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800106e:	4b07      	ldr	r3, [pc, #28]	; (800108c <_sbrk+0x64>)
 8001070:	681a      	ldr	r2, [r3, #0]
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	4413      	add	r3, r2
 8001076:	4a05      	ldr	r2, [pc, #20]	; (800108c <_sbrk+0x64>)
 8001078:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800107a:	68fb      	ldr	r3, [r7, #12]
}
 800107c:	4618      	mov	r0, r3
 800107e:	3718      	adds	r7, #24
 8001080:	46bd      	mov	sp, r7
 8001082:	bd80      	pop	{r7, pc}
 8001084:	20010000 	.word	0x20010000
 8001088:	00000400 	.word	0x00000400
 800108c:	2000008c 	.word	0x2000008c
 8001090:	20000138 	.word	0x20000138

08001094 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001094:	b480      	push	{r7}
 8001096:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001098:	4b06      	ldr	r3, [pc, #24]	; (80010b4 <SystemInit+0x20>)
 800109a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800109e:	4a05      	ldr	r2, [pc, #20]	; (80010b4 <SystemInit+0x20>)
 80010a0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80010a4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80010a8:	bf00      	nop
 80010aa:	46bd      	mov	sp, r7
 80010ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b0:	4770      	bx	lr
 80010b2:	bf00      	nop
 80010b4:	e000ed00 	.word	0xe000ed00

080010b8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80010b8:	f8df d034 	ldr.w	sp, [pc, #52]	; 80010f0 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80010bc:	480d      	ldr	r0, [pc, #52]	; (80010f4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80010be:	490e      	ldr	r1, [pc, #56]	; (80010f8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80010c0:	4a0e      	ldr	r2, [pc, #56]	; (80010fc <LoopFillZerobss+0x1e>)
  movs r3, #0
 80010c2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80010c4:	e002      	b.n	80010cc <LoopCopyDataInit>

080010c6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80010c6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80010c8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80010ca:	3304      	adds	r3, #4

080010cc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80010cc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80010ce:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80010d0:	d3f9      	bcc.n	80010c6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80010d2:	4a0b      	ldr	r2, [pc, #44]	; (8001100 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80010d4:	4c0b      	ldr	r4, [pc, #44]	; (8001104 <LoopFillZerobss+0x26>)
  movs r3, #0
 80010d6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80010d8:	e001      	b.n	80010de <LoopFillZerobss>

080010da <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80010da:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80010dc:	3204      	adds	r2, #4

080010de <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80010de:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80010e0:	d3fb      	bcc.n	80010da <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80010e2:	f7ff ffd7 	bl	8001094 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80010e6:	f001 fe2d 	bl	8002d44 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80010ea:	f7ff fa4d 	bl	8000588 <main>
  bx  lr    
 80010ee:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80010f0:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 80010f4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80010f8:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 80010fc:	080038a8 	.word	0x080038a8
  ldr r2, =_sbss
 8001100:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8001104:	20000138 	.word	0x20000138

08001108 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001108:	e7fe      	b.n	8001108 <ADC_IRQHandler>
	...

0800110c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800110c:	b580      	push	{r7, lr}
 800110e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001110:	4b0e      	ldr	r3, [pc, #56]	; (800114c <HAL_Init+0x40>)
 8001112:	681b      	ldr	r3, [r3, #0]
 8001114:	4a0d      	ldr	r2, [pc, #52]	; (800114c <HAL_Init+0x40>)
 8001116:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800111a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800111c:	4b0b      	ldr	r3, [pc, #44]	; (800114c <HAL_Init+0x40>)
 800111e:	681b      	ldr	r3, [r3, #0]
 8001120:	4a0a      	ldr	r2, [pc, #40]	; (800114c <HAL_Init+0x40>)
 8001122:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001126:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001128:	4b08      	ldr	r3, [pc, #32]	; (800114c <HAL_Init+0x40>)
 800112a:	681b      	ldr	r3, [r3, #0]
 800112c:	4a07      	ldr	r2, [pc, #28]	; (800114c <HAL_Init+0x40>)
 800112e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001132:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001134:	2003      	movs	r0, #3
 8001136:	f000 fc47 	bl	80019c8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800113a:	200f      	movs	r0, #15
 800113c:	f000 f808 	bl	8001150 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001140:	f7ff fe94 	bl	8000e6c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001144:	2300      	movs	r3, #0
}
 8001146:	4618      	mov	r0, r3
 8001148:	bd80      	pop	{r7, pc}
 800114a:	bf00      	nop
 800114c:	40023c00 	.word	0x40023c00

08001150 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001150:	b580      	push	{r7, lr}
 8001152:	b082      	sub	sp, #8
 8001154:	af00      	add	r7, sp, #0
 8001156:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001158:	4b12      	ldr	r3, [pc, #72]	; (80011a4 <HAL_InitTick+0x54>)
 800115a:	681a      	ldr	r2, [r3, #0]
 800115c:	4b12      	ldr	r3, [pc, #72]	; (80011a8 <HAL_InitTick+0x58>)
 800115e:	781b      	ldrb	r3, [r3, #0]
 8001160:	4619      	mov	r1, r3
 8001162:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001166:	fbb3 f3f1 	udiv	r3, r3, r1
 800116a:	fbb2 f3f3 	udiv	r3, r2, r3
 800116e:	4618      	mov	r0, r3
 8001170:	f000 fc51 	bl	8001a16 <HAL_SYSTICK_Config>
 8001174:	4603      	mov	r3, r0
 8001176:	2b00      	cmp	r3, #0
 8001178:	d001      	beq.n	800117e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800117a:	2301      	movs	r3, #1
 800117c:	e00e      	b.n	800119c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	2b0f      	cmp	r3, #15
 8001182:	d80a      	bhi.n	800119a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001184:	2200      	movs	r2, #0
 8001186:	6879      	ldr	r1, [r7, #4]
 8001188:	f04f 30ff 	mov.w	r0, #4294967295
 800118c:	f000 fc27 	bl	80019de <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001190:	4a06      	ldr	r2, [pc, #24]	; (80011ac <HAL_InitTick+0x5c>)
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001196:	2300      	movs	r3, #0
 8001198:	e000      	b.n	800119c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800119a:	2301      	movs	r3, #1
}
 800119c:	4618      	mov	r0, r3
 800119e:	3708      	adds	r7, #8
 80011a0:	46bd      	mov	sp, r7
 80011a2:	bd80      	pop	{r7, pc}
 80011a4:	20000000 	.word	0x20000000
 80011a8:	20000008 	.word	0x20000008
 80011ac:	20000004 	.word	0x20000004

080011b0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80011b0:	b480      	push	{r7}
 80011b2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80011b4:	4b06      	ldr	r3, [pc, #24]	; (80011d0 <HAL_IncTick+0x20>)
 80011b6:	781b      	ldrb	r3, [r3, #0]
 80011b8:	461a      	mov	r2, r3
 80011ba:	4b06      	ldr	r3, [pc, #24]	; (80011d4 <HAL_IncTick+0x24>)
 80011bc:	681b      	ldr	r3, [r3, #0]
 80011be:	4413      	add	r3, r2
 80011c0:	4a04      	ldr	r2, [pc, #16]	; (80011d4 <HAL_IncTick+0x24>)
 80011c2:	6013      	str	r3, [r2, #0]
}
 80011c4:	bf00      	nop
 80011c6:	46bd      	mov	sp, r7
 80011c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011cc:	4770      	bx	lr
 80011ce:	bf00      	nop
 80011d0:	20000008 	.word	0x20000008
 80011d4:	20000124 	.word	0x20000124

080011d8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80011d8:	b480      	push	{r7}
 80011da:	af00      	add	r7, sp, #0
  return uwTick;
 80011dc:	4b03      	ldr	r3, [pc, #12]	; (80011ec <HAL_GetTick+0x14>)
 80011de:	681b      	ldr	r3, [r3, #0]
}
 80011e0:	4618      	mov	r0, r3
 80011e2:	46bd      	mov	sp, r7
 80011e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e8:	4770      	bx	lr
 80011ea:	bf00      	nop
 80011ec:	20000124 	.word	0x20000124

080011f0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80011f0:	b580      	push	{r7, lr}
 80011f2:	b084      	sub	sp, #16
 80011f4:	af00      	add	r7, sp, #0
 80011f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80011f8:	f7ff ffee 	bl	80011d8 <HAL_GetTick>
 80011fc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001202:	68fb      	ldr	r3, [r7, #12]
 8001204:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001208:	d005      	beq.n	8001216 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800120a:	4b0a      	ldr	r3, [pc, #40]	; (8001234 <HAL_Delay+0x44>)
 800120c:	781b      	ldrb	r3, [r3, #0]
 800120e:	461a      	mov	r2, r3
 8001210:	68fb      	ldr	r3, [r7, #12]
 8001212:	4413      	add	r3, r2
 8001214:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001216:	bf00      	nop
 8001218:	f7ff ffde 	bl	80011d8 <HAL_GetTick>
 800121c:	4602      	mov	r2, r0
 800121e:	68bb      	ldr	r3, [r7, #8]
 8001220:	1ad3      	subs	r3, r2, r3
 8001222:	68fa      	ldr	r2, [r7, #12]
 8001224:	429a      	cmp	r2, r3
 8001226:	d8f7      	bhi.n	8001218 <HAL_Delay+0x28>
  {
  }
}
 8001228:	bf00      	nop
 800122a:	bf00      	nop
 800122c:	3710      	adds	r7, #16
 800122e:	46bd      	mov	sp, r7
 8001230:	bd80      	pop	{r7, pc}
 8001232:	bf00      	nop
 8001234:	20000008 	.word	0x20000008

08001238 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001238:	b580      	push	{r7, lr}
 800123a:	b084      	sub	sp, #16
 800123c:	af00      	add	r7, sp, #0
 800123e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001240:	2300      	movs	r3, #0
 8001242:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	2b00      	cmp	r3, #0
 8001248:	d101      	bne.n	800124e <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800124a:	2301      	movs	r3, #1
 800124c:	e033      	b.n	80012b6 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001252:	2b00      	cmp	r3, #0
 8001254:	d109      	bne.n	800126a <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001256:	6878      	ldr	r0, [r7, #4]
 8001258:	f7ff fe30 	bl	8000ebc <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	2200      	movs	r2, #0
 8001260:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	2200      	movs	r2, #0
 8001266:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800126e:	f003 0310 	and.w	r3, r3, #16
 8001272:	2b00      	cmp	r3, #0
 8001274:	d118      	bne.n	80012a8 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800127a:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800127e:	f023 0302 	bic.w	r3, r3, #2
 8001282:	f043 0202 	orr.w	r2, r3, #2
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 800128a:	6878      	ldr	r0, [r7, #4]
 800128c:	f000 f9ee 	bl	800166c <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	2200      	movs	r2, #0
 8001294:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800129a:	f023 0303 	bic.w	r3, r3, #3
 800129e:	f043 0201 	orr.w	r2, r3, #1
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	641a      	str	r2, [r3, #64]	; 0x40
 80012a6:	e001      	b.n	80012ac <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80012a8:	2301      	movs	r3, #1
 80012aa:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	2200      	movs	r2, #0
 80012b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80012b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80012b6:	4618      	mov	r0, r3
 80012b8:	3710      	adds	r7, #16
 80012ba:	46bd      	mov	sp, r7
 80012bc:	bd80      	pop	{r7, pc}
	...

080012c0 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 80012c0:	b480      	push	{r7}
 80012c2:	b085      	sub	sp, #20
 80012c4:	af00      	add	r7, sp, #0
 80012c6:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 80012c8:	2300      	movs	r3, #0
 80012ca:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80012d2:	2b01      	cmp	r3, #1
 80012d4:	d101      	bne.n	80012da <HAL_ADC_Start+0x1a>
 80012d6:	2302      	movs	r3, #2
 80012d8:	e097      	b.n	800140a <HAL_ADC_Start+0x14a>
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	2201      	movs	r2, #1
 80012de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	681b      	ldr	r3, [r3, #0]
 80012e6:	689b      	ldr	r3, [r3, #8]
 80012e8:	f003 0301 	and.w	r3, r3, #1
 80012ec:	2b01      	cmp	r3, #1
 80012ee:	d018      	beq.n	8001322 <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	681b      	ldr	r3, [r3, #0]
 80012f4:	689a      	ldr	r2, [r3, #8]
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	681b      	ldr	r3, [r3, #0]
 80012fa:	f042 0201 	orr.w	r2, r2, #1
 80012fe:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001300:	4b45      	ldr	r3, [pc, #276]	; (8001418 <HAL_ADC_Start+0x158>)
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	4a45      	ldr	r2, [pc, #276]	; (800141c <HAL_ADC_Start+0x15c>)
 8001306:	fba2 2303 	umull	r2, r3, r2, r3
 800130a:	0c9a      	lsrs	r2, r3, #18
 800130c:	4613      	mov	r3, r2
 800130e:	005b      	lsls	r3, r3, #1
 8001310:	4413      	add	r3, r2
 8001312:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8001314:	e002      	b.n	800131c <HAL_ADC_Start+0x5c>
    {
      counter--;
 8001316:	68bb      	ldr	r3, [r7, #8]
 8001318:	3b01      	subs	r3, #1
 800131a:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 800131c:	68bb      	ldr	r3, [r7, #8]
 800131e:	2b00      	cmp	r3, #0
 8001320:	d1f9      	bne.n	8001316 <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	689b      	ldr	r3, [r3, #8]
 8001328:	f003 0301 	and.w	r3, r3, #1
 800132c:	2b01      	cmp	r3, #1
 800132e:	d15f      	bne.n	80013f0 <HAL_ADC_Start+0x130>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001334:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001338:	f023 0301 	bic.w	r3, r3, #1
 800133c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	681b      	ldr	r3, [r3, #0]
 8001348:	685b      	ldr	r3, [r3, #4]
 800134a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800134e:	2b00      	cmp	r3, #0
 8001350:	d007      	beq.n	8001362 <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001356:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800135a:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001366:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800136a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800136e:	d106      	bne.n	800137e <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001374:	f023 0206 	bic.w	r2, r3, #6
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	645a      	str	r2, [r3, #68]	; 0x44
 800137c:	e002      	b.n	8001384 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	2200      	movs	r2, #0
 8001382:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	2200      	movs	r2, #0
 8001388:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800138c:	4b24      	ldr	r3, [pc, #144]	; (8001420 <HAL_ADC_Start+0x160>)
 800138e:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8001398:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 800139a:	68fb      	ldr	r3, [r7, #12]
 800139c:	685b      	ldr	r3, [r3, #4]
 800139e:	f003 031f 	and.w	r3, r3, #31
 80013a2:	2b00      	cmp	r3, #0
 80013a4:	d10f      	bne.n	80013c6 <HAL_ADC_Start+0x106>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	689b      	ldr	r3, [r3, #8]
 80013ac:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80013b0:	2b00      	cmp	r3, #0
 80013b2:	d129      	bne.n	8001408 <HAL_ADC_Start+0x148>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	689a      	ldr	r2, [r3, #8]
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	681b      	ldr	r3, [r3, #0]
 80013be:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80013c2:	609a      	str	r2, [r3, #8]
 80013c4:	e020      	b.n	8001408 <HAL_ADC_Start+0x148>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	4a16      	ldr	r2, [pc, #88]	; (8001424 <HAL_ADC_Start+0x164>)
 80013cc:	4293      	cmp	r3, r2
 80013ce:	d11b      	bne.n	8001408 <HAL_ADC_Start+0x148>
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	689b      	ldr	r3, [r3, #8]
 80013d6:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80013da:	2b00      	cmp	r3, #0
 80013dc:	d114      	bne.n	8001408 <HAL_ADC_Start+0x148>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	689a      	ldr	r2, [r3, #8]
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80013ec:	609a      	str	r2, [r3, #8]
 80013ee:	e00b      	b.n	8001408 <HAL_ADC_Start+0x148>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013f4:	f043 0210 	orr.w	r2, r3, #16
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001400:	f043 0201 	orr.w	r2, r3, #1
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8001408:	2300      	movs	r3, #0
}
 800140a:	4618      	mov	r0, r3
 800140c:	3714      	adds	r7, #20
 800140e:	46bd      	mov	sp, r7
 8001410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001414:	4770      	bx	lr
 8001416:	bf00      	nop
 8001418:	20000000 	.word	0x20000000
 800141c:	431bde83 	.word	0x431bde83
 8001420:	40012300 	.word	0x40012300
 8001424:	40012000 	.word	0x40012000

08001428 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001428:	b480      	push	{r7}
 800142a:	b085      	sub	sp, #20
 800142c:	af00      	add	r7, sp, #0
 800142e:	6078      	str	r0, [r7, #4]
 8001430:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8001432:	2300      	movs	r3, #0
 8001434:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800143c:	2b01      	cmp	r3, #1
 800143e:	d101      	bne.n	8001444 <HAL_ADC_ConfigChannel+0x1c>
 8001440:	2302      	movs	r3, #2
 8001442:	e105      	b.n	8001650 <HAL_ADC_ConfigChannel+0x228>
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	2201      	movs	r2, #1
 8001448:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 800144c:	683b      	ldr	r3, [r7, #0]
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	2b09      	cmp	r3, #9
 8001452:	d925      	bls.n	80014a0 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	68d9      	ldr	r1, [r3, #12]
 800145a:	683b      	ldr	r3, [r7, #0]
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	b29b      	uxth	r3, r3
 8001460:	461a      	mov	r2, r3
 8001462:	4613      	mov	r3, r2
 8001464:	005b      	lsls	r3, r3, #1
 8001466:	4413      	add	r3, r2
 8001468:	3b1e      	subs	r3, #30
 800146a:	2207      	movs	r2, #7
 800146c:	fa02 f303 	lsl.w	r3, r2, r3
 8001470:	43da      	mvns	r2, r3
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	400a      	ands	r2, r1
 8001478:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	68d9      	ldr	r1, [r3, #12]
 8001480:	683b      	ldr	r3, [r7, #0]
 8001482:	689a      	ldr	r2, [r3, #8]
 8001484:	683b      	ldr	r3, [r7, #0]
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	b29b      	uxth	r3, r3
 800148a:	4618      	mov	r0, r3
 800148c:	4603      	mov	r3, r0
 800148e:	005b      	lsls	r3, r3, #1
 8001490:	4403      	add	r3, r0
 8001492:	3b1e      	subs	r3, #30
 8001494:	409a      	lsls	r2, r3
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	430a      	orrs	r2, r1
 800149c:	60da      	str	r2, [r3, #12]
 800149e:	e022      	b.n	80014e6 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	6919      	ldr	r1, [r3, #16]
 80014a6:	683b      	ldr	r3, [r7, #0]
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	b29b      	uxth	r3, r3
 80014ac:	461a      	mov	r2, r3
 80014ae:	4613      	mov	r3, r2
 80014b0:	005b      	lsls	r3, r3, #1
 80014b2:	4413      	add	r3, r2
 80014b4:	2207      	movs	r2, #7
 80014b6:	fa02 f303 	lsl.w	r3, r2, r3
 80014ba:	43da      	mvns	r2, r3
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	400a      	ands	r2, r1
 80014c2:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	6919      	ldr	r1, [r3, #16]
 80014ca:	683b      	ldr	r3, [r7, #0]
 80014cc:	689a      	ldr	r2, [r3, #8]
 80014ce:	683b      	ldr	r3, [r7, #0]
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	b29b      	uxth	r3, r3
 80014d4:	4618      	mov	r0, r3
 80014d6:	4603      	mov	r3, r0
 80014d8:	005b      	lsls	r3, r3, #1
 80014da:	4403      	add	r3, r0
 80014dc:	409a      	lsls	r2, r3
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	430a      	orrs	r2, r1
 80014e4:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80014e6:	683b      	ldr	r3, [r7, #0]
 80014e8:	685b      	ldr	r3, [r3, #4]
 80014ea:	2b06      	cmp	r3, #6
 80014ec:	d824      	bhi.n	8001538 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80014f4:	683b      	ldr	r3, [r7, #0]
 80014f6:	685a      	ldr	r2, [r3, #4]
 80014f8:	4613      	mov	r3, r2
 80014fa:	009b      	lsls	r3, r3, #2
 80014fc:	4413      	add	r3, r2
 80014fe:	3b05      	subs	r3, #5
 8001500:	221f      	movs	r2, #31
 8001502:	fa02 f303 	lsl.w	r3, r2, r3
 8001506:	43da      	mvns	r2, r3
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	400a      	ands	r2, r1
 800150e:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001516:	683b      	ldr	r3, [r7, #0]
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	b29b      	uxth	r3, r3
 800151c:	4618      	mov	r0, r3
 800151e:	683b      	ldr	r3, [r7, #0]
 8001520:	685a      	ldr	r2, [r3, #4]
 8001522:	4613      	mov	r3, r2
 8001524:	009b      	lsls	r3, r3, #2
 8001526:	4413      	add	r3, r2
 8001528:	3b05      	subs	r3, #5
 800152a:	fa00 f203 	lsl.w	r2, r0, r3
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	430a      	orrs	r2, r1
 8001534:	635a      	str	r2, [r3, #52]	; 0x34
 8001536:	e04c      	b.n	80015d2 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001538:	683b      	ldr	r3, [r7, #0]
 800153a:	685b      	ldr	r3, [r3, #4]
 800153c:	2b0c      	cmp	r3, #12
 800153e:	d824      	bhi.n	800158a <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001546:	683b      	ldr	r3, [r7, #0]
 8001548:	685a      	ldr	r2, [r3, #4]
 800154a:	4613      	mov	r3, r2
 800154c:	009b      	lsls	r3, r3, #2
 800154e:	4413      	add	r3, r2
 8001550:	3b23      	subs	r3, #35	; 0x23
 8001552:	221f      	movs	r2, #31
 8001554:	fa02 f303 	lsl.w	r3, r2, r3
 8001558:	43da      	mvns	r2, r3
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	400a      	ands	r2, r1
 8001560:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001568:	683b      	ldr	r3, [r7, #0]
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	b29b      	uxth	r3, r3
 800156e:	4618      	mov	r0, r3
 8001570:	683b      	ldr	r3, [r7, #0]
 8001572:	685a      	ldr	r2, [r3, #4]
 8001574:	4613      	mov	r3, r2
 8001576:	009b      	lsls	r3, r3, #2
 8001578:	4413      	add	r3, r2
 800157a:	3b23      	subs	r3, #35	; 0x23
 800157c:	fa00 f203 	lsl.w	r2, r0, r3
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	430a      	orrs	r2, r1
 8001586:	631a      	str	r2, [r3, #48]	; 0x30
 8001588:	e023      	b.n	80015d2 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001590:	683b      	ldr	r3, [r7, #0]
 8001592:	685a      	ldr	r2, [r3, #4]
 8001594:	4613      	mov	r3, r2
 8001596:	009b      	lsls	r3, r3, #2
 8001598:	4413      	add	r3, r2
 800159a:	3b41      	subs	r3, #65	; 0x41
 800159c:	221f      	movs	r2, #31
 800159e:	fa02 f303 	lsl.w	r3, r2, r3
 80015a2:	43da      	mvns	r2, r3
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	400a      	ands	r2, r1
 80015aa:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80015b2:	683b      	ldr	r3, [r7, #0]
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	b29b      	uxth	r3, r3
 80015b8:	4618      	mov	r0, r3
 80015ba:	683b      	ldr	r3, [r7, #0]
 80015bc:	685a      	ldr	r2, [r3, #4]
 80015be:	4613      	mov	r3, r2
 80015c0:	009b      	lsls	r3, r3, #2
 80015c2:	4413      	add	r3, r2
 80015c4:	3b41      	subs	r3, #65	; 0x41
 80015c6:	fa00 f203 	lsl.w	r2, r0, r3
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	430a      	orrs	r2, r1
 80015d0:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80015d2:	4b22      	ldr	r3, [pc, #136]	; (800165c <HAL_ADC_ConfigChannel+0x234>)
 80015d4:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	4a21      	ldr	r2, [pc, #132]	; (8001660 <HAL_ADC_ConfigChannel+0x238>)
 80015dc:	4293      	cmp	r3, r2
 80015de:	d109      	bne.n	80015f4 <HAL_ADC_ConfigChannel+0x1cc>
 80015e0:	683b      	ldr	r3, [r7, #0]
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	2b12      	cmp	r3, #18
 80015e6:	d105      	bne.n	80015f4 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80015e8:	68fb      	ldr	r3, [r7, #12]
 80015ea:	685b      	ldr	r3, [r3, #4]
 80015ec:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80015f0:	68fb      	ldr	r3, [r7, #12]
 80015f2:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	4a19      	ldr	r2, [pc, #100]	; (8001660 <HAL_ADC_ConfigChannel+0x238>)
 80015fa:	4293      	cmp	r3, r2
 80015fc:	d123      	bne.n	8001646 <HAL_ADC_ConfigChannel+0x21e>
 80015fe:	683b      	ldr	r3, [r7, #0]
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	2b10      	cmp	r3, #16
 8001604:	d003      	beq.n	800160e <HAL_ADC_ConfigChannel+0x1e6>
 8001606:	683b      	ldr	r3, [r7, #0]
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	2b11      	cmp	r3, #17
 800160c:	d11b      	bne.n	8001646 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 800160e:	68fb      	ldr	r3, [r7, #12]
 8001610:	685b      	ldr	r3, [r3, #4]
 8001612:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8001616:	68fb      	ldr	r3, [r7, #12]
 8001618:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800161a:	683b      	ldr	r3, [r7, #0]
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	2b10      	cmp	r3, #16
 8001620:	d111      	bne.n	8001646 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001622:	4b10      	ldr	r3, [pc, #64]	; (8001664 <HAL_ADC_ConfigChannel+0x23c>)
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	4a10      	ldr	r2, [pc, #64]	; (8001668 <HAL_ADC_ConfigChannel+0x240>)
 8001628:	fba2 2303 	umull	r2, r3, r2, r3
 800162c:	0c9a      	lsrs	r2, r3, #18
 800162e:	4613      	mov	r3, r2
 8001630:	009b      	lsls	r3, r3, #2
 8001632:	4413      	add	r3, r2
 8001634:	005b      	lsls	r3, r3, #1
 8001636:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001638:	e002      	b.n	8001640 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 800163a:	68bb      	ldr	r3, [r7, #8]
 800163c:	3b01      	subs	r3, #1
 800163e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001640:	68bb      	ldr	r3, [r7, #8]
 8001642:	2b00      	cmp	r3, #0
 8001644:	d1f9      	bne.n	800163a <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	2200      	movs	r2, #0
 800164a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 800164e:	2300      	movs	r3, #0
}
 8001650:	4618      	mov	r0, r3
 8001652:	3714      	adds	r7, #20
 8001654:	46bd      	mov	sp, r7
 8001656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800165a:	4770      	bx	lr
 800165c:	40012300 	.word	0x40012300
 8001660:	40012000 	.word	0x40012000
 8001664:	20000000 	.word	0x20000000
 8001668:	431bde83 	.word	0x431bde83

0800166c <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 800166c:	b480      	push	{r7}
 800166e:	b085      	sub	sp, #20
 8001670:	af00      	add	r7, sp, #0
 8001672:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001674:	4b79      	ldr	r3, [pc, #484]	; (800185c <ADC_Init+0x1f0>)
 8001676:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8001678:	68fb      	ldr	r3, [r7, #12]
 800167a:	685b      	ldr	r3, [r3, #4]
 800167c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001680:	68fb      	ldr	r3, [r7, #12]
 8001682:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8001684:	68fb      	ldr	r3, [r7, #12]
 8001686:	685a      	ldr	r2, [r3, #4]
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	685b      	ldr	r3, [r3, #4]
 800168c:	431a      	orrs	r2, r3
 800168e:	68fb      	ldr	r3, [r7, #12]
 8001690:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	685a      	ldr	r2, [r3, #4]
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80016a0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	6859      	ldr	r1, [r3, #4]
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	691b      	ldr	r3, [r3, #16]
 80016ac:	021a      	lsls	r2, r3, #8
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	430a      	orrs	r2, r1
 80016b4:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	685a      	ldr	r2, [r3, #4]
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80016c4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	6859      	ldr	r1, [r3, #4]
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	689a      	ldr	r2, [r3, #8]
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	430a      	orrs	r2, r1
 80016d6:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	689a      	ldr	r2, [r3, #8]
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80016e6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	6899      	ldr	r1, [r3, #8]
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	68da      	ldr	r2, [r3, #12]
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	430a      	orrs	r2, r1
 80016f8:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016fe:	4a58      	ldr	r2, [pc, #352]	; (8001860 <ADC_Init+0x1f4>)
 8001700:	4293      	cmp	r3, r2
 8001702:	d022      	beq.n	800174a <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	689a      	ldr	r2, [r3, #8]
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001712:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	6899      	ldr	r1, [r3, #8]
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	430a      	orrs	r2, r1
 8001724:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	689a      	ldr	r2, [r3, #8]
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001734:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	6899      	ldr	r1, [r3, #8]
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	430a      	orrs	r2, r1
 8001746:	609a      	str	r2, [r3, #8]
 8001748:	e00f      	b.n	800176a <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	689a      	ldr	r2, [r3, #8]
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001758:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	689a      	ldr	r2, [r3, #8]
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001768:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	689a      	ldr	r2, [r3, #8]
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	f022 0202 	bic.w	r2, r2, #2
 8001778:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	6899      	ldr	r1, [r3, #8]
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	7e1b      	ldrb	r3, [r3, #24]
 8001784:	005a      	lsls	r2, r3, #1
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	430a      	orrs	r2, r1
 800178c:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001794:	2b00      	cmp	r3, #0
 8001796:	d01b      	beq.n	80017d0 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	685a      	ldr	r2, [r3, #4]
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80017a6:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	685a      	ldr	r2, [r3, #4]
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80017b6:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	6859      	ldr	r1, [r3, #4]
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017c2:	3b01      	subs	r3, #1
 80017c4:	035a      	lsls	r2, r3, #13
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	430a      	orrs	r2, r1
 80017cc:	605a      	str	r2, [r3, #4]
 80017ce:	e007      	b.n	80017e0 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	685a      	ldr	r2, [r3, #4]
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80017de:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80017ee:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	69db      	ldr	r3, [r3, #28]
 80017fa:	3b01      	subs	r3, #1
 80017fc:	051a      	lsls	r2, r3, #20
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	430a      	orrs	r2, r1
 8001804:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	689a      	ldr	r2, [r3, #8]
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001814:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	6899      	ldr	r1, [r3, #8]
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001822:	025a      	lsls	r2, r3, #9
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	430a      	orrs	r2, r1
 800182a:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	689a      	ldr	r2, [r3, #8]
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800183a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	6899      	ldr	r1, [r3, #8]
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	695b      	ldr	r3, [r3, #20]
 8001846:	029a      	lsls	r2, r3, #10
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	430a      	orrs	r2, r1
 800184e:	609a      	str	r2, [r3, #8]
}
 8001850:	bf00      	nop
 8001852:	3714      	adds	r7, #20
 8001854:	46bd      	mov	sp, r7
 8001856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800185a:	4770      	bx	lr
 800185c:	40012300 	.word	0x40012300
 8001860:	0f000001 	.word	0x0f000001

08001864 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001864:	b480      	push	{r7}
 8001866:	b085      	sub	sp, #20
 8001868:	af00      	add	r7, sp, #0
 800186a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	f003 0307 	and.w	r3, r3, #7
 8001872:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001874:	4b0c      	ldr	r3, [pc, #48]	; (80018a8 <__NVIC_SetPriorityGrouping+0x44>)
 8001876:	68db      	ldr	r3, [r3, #12]
 8001878:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800187a:	68ba      	ldr	r2, [r7, #8]
 800187c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001880:	4013      	ands	r3, r2
 8001882:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001884:	68fb      	ldr	r3, [r7, #12]
 8001886:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001888:	68bb      	ldr	r3, [r7, #8]
 800188a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800188c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001890:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001894:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001896:	4a04      	ldr	r2, [pc, #16]	; (80018a8 <__NVIC_SetPriorityGrouping+0x44>)
 8001898:	68bb      	ldr	r3, [r7, #8]
 800189a:	60d3      	str	r3, [r2, #12]
}
 800189c:	bf00      	nop
 800189e:	3714      	adds	r7, #20
 80018a0:	46bd      	mov	sp, r7
 80018a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a6:	4770      	bx	lr
 80018a8:	e000ed00 	.word	0xe000ed00

080018ac <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80018ac:	b480      	push	{r7}
 80018ae:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80018b0:	4b04      	ldr	r3, [pc, #16]	; (80018c4 <__NVIC_GetPriorityGrouping+0x18>)
 80018b2:	68db      	ldr	r3, [r3, #12]
 80018b4:	0a1b      	lsrs	r3, r3, #8
 80018b6:	f003 0307 	and.w	r3, r3, #7
}
 80018ba:	4618      	mov	r0, r3
 80018bc:	46bd      	mov	sp, r7
 80018be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c2:	4770      	bx	lr
 80018c4:	e000ed00 	.word	0xe000ed00

080018c8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80018c8:	b480      	push	{r7}
 80018ca:	b083      	sub	sp, #12
 80018cc:	af00      	add	r7, sp, #0
 80018ce:	4603      	mov	r3, r0
 80018d0:	6039      	str	r1, [r7, #0]
 80018d2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80018d4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018d8:	2b00      	cmp	r3, #0
 80018da:	db0a      	blt.n	80018f2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80018dc:	683b      	ldr	r3, [r7, #0]
 80018de:	b2da      	uxtb	r2, r3
 80018e0:	490c      	ldr	r1, [pc, #48]	; (8001914 <__NVIC_SetPriority+0x4c>)
 80018e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018e6:	0112      	lsls	r2, r2, #4
 80018e8:	b2d2      	uxtb	r2, r2
 80018ea:	440b      	add	r3, r1
 80018ec:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80018f0:	e00a      	b.n	8001908 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80018f2:	683b      	ldr	r3, [r7, #0]
 80018f4:	b2da      	uxtb	r2, r3
 80018f6:	4908      	ldr	r1, [pc, #32]	; (8001918 <__NVIC_SetPriority+0x50>)
 80018f8:	79fb      	ldrb	r3, [r7, #7]
 80018fa:	f003 030f 	and.w	r3, r3, #15
 80018fe:	3b04      	subs	r3, #4
 8001900:	0112      	lsls	r2, r2, #4
 8001902:	b2d2      	uxtb	r2, r2
 8001904:	440b      	add	r3, r1
 8001906:	761a      	strb	r2, [r3, #24]
}
 8001908:	bf00      	nop
 800190a:	370c      	adds	r7, #12
 800190c:	46bd      	mov	sp, r7
 800190e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001912:	4770      	bx	lr
 8001914:	e000e100 	.word	0xe000e100
 8001918:	e000ed00 	.word	0xe000ed00

0800191c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800191c:	b480      	push	{r7}
 800191e:	b089      	sub	sp, #36	; 0x24
 8001920:	af00      	add	r7, sp, #0
 8001922:	60f8      	str	r0, [r7, #12]
 8001924:	60b9      	str	r1, [r7, #8]
 8001926:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001928:	68fb      	ldr	r3, [r7, #12]
 800192a:	f003 0307 	and.w	r3, r3, #7
 800192e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001930:	69fb      	ldr	r3, [r7, #28]
 8001932:	f1c3 0307 	rsb	r3, r3, #7
 8001936:	2b04      	cmp	r3, #4
 8001938:	bf28      	it	cs
 800193a:	2304      	movcs	r3, #4
 800193c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800193e:	69fb      	ldr	r3, [r7, #28]
 8001940:	3304      	adds	r3, #4
 8001942:	2b06      	cmp	r3, #6
 8001944:	d902      	bls.n	800194c <NVIC_EncodePriority+0x30>
 8001946:	69fb      	ldr	r3, [r7, #28]
 8001948:	3b03      	subs	r3, #3
 800194a:	e000      	b.n	800194e <NVIC_EncodePriority+0x32>
 800194c:	2300      	movs	r3, #0
 800194e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001950:	f04f 32ff 	mov.w	r2, #4294967295
 8001954:	69bb      	ldr	r3, [r7, #24]
 8001956:	fa02 f303 	lsl.w	r3, r2, r3
 800195a:	43da      	mvns	r2, r3
 800195c:	68bb      	ldr	r3, [r7, #8]
 800195e:	401a      	ands	r2, r3
 8001960:	697b      	ldr	r3, [r7, #20]
 8001962:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001964:	f04f 31ff 	mov.w	r1, #4294967295
 8001968:	697b      	ldr	r3, [r7, #20]
 800196a:	fa01 f303 	lsl.w	r3, r1, r3
 800196e:	43d9      	mvns	r1, r3
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001974:	4313      	orrs	r3, r2
         );
}
 8001976:	4618      	mov	r0, r3
 8001978:	3724      	adds	r7, #36	; 0x24
 800197a:	46bd      	mov	sp, r7
 800197c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001980:	4770      	bx	lr
	...

08001984 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001984:	b580      	push	{r7, lr}
 8001986:	b082      	sub	sp, #8
 8001988:	af00      	add	r7, sp, #0
 800198a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	3b01      	subs	r3, #1
 8001990:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001994:	d301      	bcc.n	800199a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001996:	2301      	movs	r3, #1
 8001998:	e00f      	b.n	80019ba <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800199a:	4a0a      	ldr	r2, [pc, #40]	; (80019c4 <SysTick_Config+0x40>)
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	3b01      	subs	r3, #1
 80019a0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80019a2:	210f      	movs	r1, #15
 80019a4:	f04f 30ff 	mov.w	r0, #4294967295
 80019a8:	f7ff ff8e 	bl	80018c8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80019ac:	4b05      	ldr	r3, [pc, #20]	; (80019c4 <SysTick_Config+0x40>)
 80019ae:	2200      	movs	r2, #0
 80019b0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80019b2:	4b04      	ldr	r3, [pc, #16]	; (80019c4 <SysTick_Config+0x40>)
 80019b4:	2207      	movs	r2, #7
 80019b6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80019b8:	2300      	movs	r3, #0
}
 80019ba:	4618      	mov	r0, r3
 80019bc:	3708      	adds	r7, #8
 80019be:	46bd      	mov	sp, r7
 80019c0:	bd80      	pop	{r7, pc}
 80019c2:	bf00      	nop
 80019c4:	e000e010 	.word	0xe000e010

080019c8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80019c8:	b580      	push	{r7, lr}
 80019ca:	b082      	sub	sp, #8
 80019cc:	af00      	add	r7, sp, #0
 80019ce:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80019d0:	6878      	ldr	r0, [r7, #4]
 80019d2:	f7ff ff47 	bl	8001864 <__NVIC_SetPriorityGrouping>
}
 80019d6:	bf00      	nop
 80019d8:	3708      	adds	r7, #8
 80019da:	46bd      	mov	sp, r7
 80019dc:	bd80      	pop	{r7, pc}

080019de <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80019de:	b580      	push	{r7, lr}
 80019e0:	b086      	sub	sp, #24
 80019e2:	af00      	add	r7, sp, #0
 80019e4:	4603      	mov	r3, r0
 80019e6:	60b9      	str	r1, [r7, #8]
 80019e8:	607a      	str	r2, [r7, #4]
 80019ea:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80019ec:	2300      	movs	r3, #0
 80019ee:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80019f0:	f7ff ff5c 	bl	80018ac <__NVIC_GetPriorityGrouping>
 80019f4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80019f6:	687a      	ldr	r2, [r7, #4]
 80019f8:	68b9      	ldr	r1, [r7, #8]
 80019fa:	6978      	ldr	r0, [r7, #20]
 80019fc:	f7ff ff8e 	bl	800191c <NVIC_EncodePriority>
 8001a00:	4602      	mov	r2, r0
 8001a02:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001a06:	4611      	mov	r1, r2
 8001a08:	4618      	mov	r0, r3
 8001a0a:	f7ff ff5d 	bl	80018c8 <__NVIC_SetPriority>
}
 8001a0e:	bf00      	nop
 8001a10:	3718      	adds	r7, #24
 8001a12:	46bd      	mov	sp, r7
 8001a14:	bd80      	pop	{r7, pc}

08001a16 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001a16:	b580      	push	{r7, lr}
 8001a18:	b082      	sub	sp, #8
 8001a1a:	af00      	add	r7, sp, #0
 8001a1c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001a1e:	6878      	ldr	r0, [r7, #4]
 8001a20:	f7ff ffb0 	bl	8001984 <SysTick_Config>
 8001a24:	4603      	mov	r3, r0
}
 8001a26:	4618      	mov	r0, r3
 8001a28:	3708      	adds	r7, #8
 8001a2a:	46bd      	mov	sp, r7
 8001a2c:	bd80      	pop	{r7, pc}
	...

08001a30 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001a30:	b480      	push	{r7}
 8001a32:	b089      	sub	sp, #36	; 0x24
 8001a34:	af00      	add	r7, sp, #0
 8001a36:	6078      	str	r0, [r7, #4]
 8001a38:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001a3a:	2300      	movs	r3, #0
 8001a3c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001a3e:	2300      	movs	r3, #0
 8001a40:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001a42:	2300      	movs	r3, #0
 8001a44:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001a46:	2300      	movs	r3, #0
 8001a48:	61fb      	str	r3, [r7, #28]
 8001a4a:	e159      	b.n	8001d00 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001a4c:	2201      	movs	r2, #1
 8001a4e:	69fb      	ldr	r3, [r7, #28]
 8001a50:	fa02 f303 	lsl.w	r3, r2, r3
 8001a54:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001a56:	683b      	ldr	r3, [r7, #0]
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	697a      	ldr	r2, [r7, #20]
 8001a5c:	4013      	ands	r3, r2
 8001a5e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001a60:	693a      	ldr	r2, [r7, #16]
 8001a62:	697b      	ldr	r3, [r7, #20]
 8001a64:	429a      	cmp	r2, r3
 8001a66:	f040 8148 	bne.w	8001cfa <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001a6a:	683b      	ldr	r3, [r7, #0]
 8001a6c:	685b      	ldr	r3, [r3, #4]
 8001a6e:	f003 0303 	and.w	r3, r3, #3
 8001a72:	2b01      	cmp	r3, #1
 8001a74:	d005      	beq.n	8001a82 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001a76:	683b      	ldr	r3, [r7, #0]
 8001a78:	685b      	ldr	r3, [r3, #4]
 8001a7a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001a7e:	2b02      	cmp	r3, #2
 8001a80:	d130      	bne.n	8001ae4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	689b      	ldr	r3, [r3, #8]
 8001a86:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001a88:	69fb      	ldr	r3, [r7, #28]
 8001a8a:	005b      	lsls	r3, r3, #1
 8001a8c:	2203      	movs	r2, #3
 8001a8e:	fa02 f303 	lsl.w	r3, r2, r3
 8001a92:	43db      	mvns	r3, r3
 8001a94:	69ba      	ldr	r2, [r7, #24]
 8001a96:	4013      	ands	r3, r2
 8001a98:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001a9a:	683b      	ldr	r3, [r7, #0]
 8001a9c:	68da      	ldr	r2, [r3, #12]
 8001a9e:	69fb      	ldr	r3, [r7, #28]
 8001aa0:	005b      	lsls	r3, r3, #1
 8001aa2:	fa02 f303 	lsl.w	r3, r2, r3
 8001aa6:	69ba      	ldr	r2, [r7, #24]
 8001aa8:	4313      	orrs	r3, r2
 8001aaa:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	69ba      	ldr	r2, [r7, #24]
 8001ab0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	685b      	ldr	r3, [r3, #4]
 8001ab6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001ab8:	2201      	movs	r2, #1
 8001aba:	69fb      	ldr	r3, [r7, #28]
 8001abc:	fa02 f303 	lsl.w	r3, r2, r3
 8001ac0:	43db      	mvns	r3, r3
 8001ac2:	69ba      	ldr	r2, [r7, #24]
 8001ac4:	4013      	ands	r3, r2
 8001ac6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001ac8:	683b      	ldr	r3, [r7, #0]
 8001aca:	685b      	ldr	r3, [r3, #4]
 8001acc:	091b      	lsrs	r3, r3, #4
 8001ace:	f003 0201 	and.w	r2, r3, #1
 8001ad2:	69fb      	ldr	r3, [r7, #28]
 8001ad4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ad8:	69ba      	ldr	r2, [r7, #24]
 8001ada:	4313      	orrs	r3, r2
 8001adc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	69ba      	ldr	r2, [r7, #24]
 8001ae2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001ae4:	683b      	ldr	r3, [r7, #0]
 8001ae6:	685b      	ldr	r3, [r3, #4]
 8001ae8:	f003 0303 	and.w	r3, r3, #3
 8001aec:	2b03      	cmp	r3, #3
 8001aee:	d017      	beq.n	8001b20 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	68db      	ldr	r3, [r3, #12]
 8001af4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001af6:	69fb      	ldr	r3, [r7, #28]
 8001af8:	005b      	lsls	r3, r3, #1
 8001afa:	2203      	movs	r2, #3
 8001afc:	fa02 f303 	lsl.w	r3, r2, r3
 8001b00:	43db      	mvns	r3, r3
 8001b02:	69ba      	ldr	r2, [r7, #24]
 8001b04:	4013      	ands	r3, r2
 8001b06:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001b08:	683b      	ldr	r3, [r7, #0]
 8001b0a:	689a      	ldr	r2, [r3, #8]
 8001b0c:	69fb      	ldr	r3, [r7, #28]
 8001b0e:	005b      	lsls	r3, r3, #1
 8001b10:	fa02 f303 	lsl.w	r3, r2, r3
 8001b14:	69ba      	ldr	r2, [r7, #24]
 8001b16:	4313      	orrs	r3, r2
 8001b18:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	69ba      	ldr	r2, [r7, #24]
 8001b1e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001b20:	683b      	ldr	r3, [r7, #0]
 8001b22:	685b      	ldr	r3, [r3, #4]
 8001b24:	f003 0303 	and.w	r3, r3, #3
 8001b28:	2b02      	cmp	r3, #2
 8001b2a:	d123      	bne.n	8001b74 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001b2c:	69fb      	ldr	r3, [r7, #28]
 8001b2e:	08da      	lsrs	r2, r3, #3
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	3208      	adds	r2, #8
 8001b34:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001b38:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001b3a:	69fb      	ldr	r3, [r7, #28]
 8001b3c:	f003 0307 	and.w	r3, r3, #7
 8001b40:	009b      	lsls	r3, r3, #2
 8001b42:	220f      	movs	r2, #15
 8001b44:	fa02 f303 	lsl.w	r3, r2, r3
 8001b48:	43db      	mvns	r3, r3
 8001b4a:	69ba      	ldr	r2, [r7, #24]
 8001b4c:	4013      	ands	r3, r2
 8001b4e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001b50:	683b      	ldr	r3, [r7, #0]
 8001b52:	691a      	ldr	r2, [r3, #16]
 8001b54:	69fb      	ldr	r3, [r7, #28]
 8001b56:	f003 0307 	and.w	r3, r3, #7
 8001b5a:	009b      	lsls	r3, r3, #2
 8001b5c:	fa02 f303 	lsl.w	r3, r2, r3
 8001b60:	69ba      	ldr	r2, [r7, #24]
 8001b62:	4313      	orrs	r3, r2
 8001b64:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001b66:	69fb      	ldr	r3, [r7, #28]
 8001b68:	08da      	lsrs	r2, r3, #3
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	3208      	adds	r2, #8
 8001b6e:	69b9      	ldr	r1, [r7, #24]
 8001b70:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001b7a:	69fb      	ldr	r3, [r7, #28]
 8001b7c:	005b      	lsls	r3, r3, #1
 8001b7e:	2203      	movs	r2, #3
 8001b80:	fa02 f303 	lsl.w	r3, r2, r3
 8001b84:	43db      	mvns	r3, r3
 8001b86:	69ba      	ldr	r2, [r7, #24]
 8001b88:	4013      	ands	r3, r2
 8001b8a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001b8c:	683b      	ldr	r3, [r7, #0]
 8001b8e:	685b      	ldr	r3, [r3, #4]
 8001b90:	f003 0203 	and.w	r2, r3, #3
 8001b94:	69fb      	ldr	r3, [r7, #28]
 8001b96:	005b      	lsls	r3, r3, #1
 8001b98:	fa02 f303 	lsl.w	r3, r2, r3
 8001b9c:	69ba      	ldr	r2, [r7, #24]
 8001b9e:	4313      	orrs	r3, r2
 8001ba0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	69ba      	ldr	r2, [r7, #24]
 8001ba6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001ba8:	683b      	ldr	r3, [r7, #0]
 8001baa:	685b      	ldr	r3, [r3, #4]
 8001bac:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001bb0:	2b00      	cmp	r3, #0
 8001bb2:	f000 80a2 	beq.w	8001cfa <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001bb6:	2300      	movs	r3, #0
 8001bb8:	60fb      	str	r3, [r7, #12]
 8001bba:	4b57      	ldr	r3, [pc, #348]	; (8001d18 <HAL_GPIO_Init+0x2e8>)
 8001bbc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bbe:	4a56      	ldr	r2, [pc, #344]	; (8001d18 <HAL_GPIO_Init+0x2e8>)
 8001bc0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001bc4:	6453      	str	r3, [r2, #68]	; 0x44
 8001bc6:	4b54      	ldr	r3, [pc, #336]	; (8001d18 <HAL_GPIO_Init+0x2e8>)
 8001bc8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bca:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001bce:	60fb      	str	r3, [r7, #12]
 8001bd0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001bd2:	4a52      	ldr	r2, [pc, #328]	; (8001d1c <HAL_GPIO_Init+0x2ec>)
 8001bd4:	69fb      	ldr	r3, [r7, #28]
 8001bd6:	089b      	lsrs	r3, r3, #2
 8001bd8:	3302      	adds	r3, #2
 8001bda:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001bde:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001be0:	69fb      	ldr	r3, [r7, #28]
 8001be2:	f003 0303 	and.w	r3, r3, #3
 8001be6:	009b      	lsls	r3, r3, #2
 8001be8:	220f      	movs	r2, #15
 8001bea:	fa02 f303 	lsl.w	r3, r2, r3
 8001bee:	43db      	mvns	r3, r3
 8001bf0:	69ba      	ldr	r2, [r7, #24]
 8001bf2:	4013      	ands	r3, r2
 8001bf4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	4a49      	ldr	r2, [pc, #292]	; (8001d20 <HAL_GPIO_Init+0x2f0>)
 8001bfa:	4293      	cmp	r3, r2
 8001bfc:	d019      	beq.n	8001c32 <HAL_GPIO_Init+0x202>
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	4a48      	ldr	r2, [pc, #288]	; (8001d24 <HAL_GPIO_Init+0x2f4>)
 8001c02:	4293      	cmp	r3, r2
 8001c04:	d013      	beq.n	8001c2e <HAL_GPIO_Init+0x1fe>
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	4a47      	ldr	r2, [pc, #284]	; (8001d28 <HAL_GPIO_Init+0x2f8>)
 8001c0a:	4293      	cmp	r3, r2
 8001c0c:	d00d      	beq.n	8001c2a <HAL_GPIO_Init+0x1fa>
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	4a46      	ldr	r2, [pc, #280]	; (8001d2c <HAL_GPIO_Init+0x2fc>)
 8001c12:	4293      	cmp	r3, r2
 8001c14:	d007      	beq.n	8001c26 <HAL_GPIO_Init+0x1f6>
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	4a45      	ldr	r2, [pc, #276]	; (8001d30 <HAL_GPIO_Init+0x300>)
 8001c1a:	4293      	cmp	r3, r2
 8001c1c:	d101      	bne.n	8001c22 <HAL_GPIO_Init+0x1f2>
 8001c1e:	2304      	movs	r3, #4
 8001c20:	e008      	b.n	8001c34 <HAL_GPIO_Init+0x204>
 8001c22:	2307      	movs	r3, #7
 8001c24:	e006      	b.n	8001c34 <HAL_GPIO_Init+0x204>
 8001c26:	2303      	movs	r3, #3
 8001c28:	e004      	b.n	8001c34 <HAL_GPIO_Init+0x204>
 8001c2a:	2302      	movs	r3, #2
 8001c2c:	e002      	b.n	8001c34 <HAL_GPIO_Init+0x204>
 8001c2e:	2301      	movs	r3, #1
 8001c30:	e000      	b.n	8001c34 <HAL_GPIO_Init+0x204>
 8001c32:	2300      	movs	r3, #0
 8001c34:	69fa      	ldr	r2, [r7, #28]
 8001c36:	f002 0203 	and.w	r2, r2, #3
 8001c3a:	0092      	lsls	r2, r2, #2
 8001c3c:	4093      	lsls	r3, r2
 8001c3e:	69ba      	ldr	r2, [r7, #24]
 8001c40:	4313      	orrs	r3, r2
 8001c42:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001c44:	4935      	ldr	r1, [pc, #212]	; (8001d1c <HAL_GPIO_Init+0x2ec>)
 8001c46:	69fb      	ldr	r3, [r7, #28]
 8001c48:	089b      	lsrs	r3, r3, #2
 8001c4a:	3302      	adds	r3, #2
 8001c4c:	69ba      	ldr	r2, [r7, #24]
 8001c4e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001c52:	4b38      	ldr	r3, [pc, #224]	; (8001d34 <HAL_GPIO_Init+0x304>)
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c58:	693b      	ldr	r3, [r7, #16]
 8001c5a:	43db      	mvns	r3, r3
 8001c5c:	69ba      	ldr	r2, [r7, #24]
 8001c5e:	4013      	ands	r3, r2
 8001c60:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001c62:	683b      	ldr	r3, [r7, #0]
 8001c64:	685b      	ldr	r3, [r3, #4]
 8001c66:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	d003      	beq.n	8001c76 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001c6e:	69ba      	ldr	r2, [r7, #24]
 8001c70:	693b      	ldr	r3, [r7, #16]
 8001c72:	4313      	orrs	r3, r2
 8001c74:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001c76:	4a2f      	ldr	r2, [pc, #188]	; (8001d34 <HAL_GPIO_Init+0x304>)
 8001c78:	69bb      	ldr	r3, [r7, #24]
 8001c7a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001c7c:	4b2d      	ldr	r3, [pc, #180]	; (8001d34 <HAL_GPIO_Init+0x304>)
 8001c7e:	685b      	ldr	r3, [r3, #4]
 8001c80:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c82:	693b      	ldr	r3, [r7, #16]
 8001c84:	43db      	mvns	r3, r3
 8001c86:	69ba      	ldr	r2, [r7, #24]
 8001c88:	4013      	ands	r3, r2
 8001c8a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001c8c:	683b      	ldr	r3, [r7, #0]
 8001c8e:	685b      	ldr	r3, [r3, #4]
 8001c90:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c94:	2b00      	cmp	r3, #0
 8001c96:	d003      	beq.n	8001ca0 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001c98:	69ba      	ldr	r2, [r7, #24]
 8001c9a:	693b      	ldr	r3, [r7, #16]
 8001c9c:	4313      	orrs	r3, r2
 8001c9e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001ca0:	4a24      	ldr	r2, [pc, #144]	; (8001d34 <HAL_GPIO_Init+0x304>)
 8001ca2:	69bb      	ldr	r3, [r7, #24]
 8001ca4:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001ca6:	4b23      	ldr	r3, [pc, #140]	; (8001d34 <HAL_GPIO_Init+0x304>)
 8001ca8:	689b      	ldr	r3, [r3, #8]
 8001caa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001cac:	693b      	ldr	r3, [r7, #16]
 8001cae:	43db      	mvns	r3, r3
 8001cb0:	69ba      	ldr	r2, [r7, #24]
 8001cb2:	4013      	ands	r3, r2
 8001cb4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001cb6:	683b      	ldr	r3, [r7, #0]
 8001cb8:	685b      	ldr	r3, [r3, #4]
 8001cba:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	d003      	beq.n	8001cca <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001cc2:	69ba      	ldr	r2, [r7, #24]
 8001cc4:	693b      	ldr	r3, [r7, #16]
 8001cc6:	4313      	orrs	r3, r2
 8001cc8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001cca:	4a1a      	ldr	r2, [pc, #104]	; (8001d34 <HAL_GPIO_Init+0x304>)
 8001ccc:	69bb      	ldr	r3, [r7, #24]
 8001cce:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001cd0:	4b18      	ldr	r3, [pc, #96]	; (8001d34 <HAL_GPIO_Init+0x304>)
 8001cd2:	68db      	ldr	r3, [r3, #12]
 8001cd4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001cd6:	693b      	ldr	r3, [r7, #16]
 8001cd8:	43db      	mvns	r3, r3
 8001cda:	69ba      	ldr	r2, [r7, #24]
 8001cdc:	4013      	ands	r3, r2
 8001cde:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001ce0:	683b      	ldr	r3, [r7, #0]
 8001ce2:	685b      	ldr	r3, [r3, #4]
 8001ce4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001ce8:	2b00      	cmp	r3, #0
 8001cea:	d003      	beq.n	8001cf4 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001cec:	69ba      	ldr	r2, [r7, #24]
 8001cee:	693b      	ldr	r3, [r7, #16]
 8001cf0:	4313      	orrs	r3, r2
 8001cf2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001cf4:	4a0f      	ldr	r2, [pc, #60]	; (8001d34 <HAL_GPIO_Init+0x304>)
 8001cf6:	69bb      	ldr	r3, [r7, #24]
 8001cf8:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001cfa:	69fb      	ldr	r3, [r7, #28]
 8001cfc:	3301      	adds	r3, #1
 8001cfe:	61fb      	str	r3, [r7, #28]
 8001d00:	69fb      	ldr	r3, [r7, #28]
 8001d02:	2b0f      	cmp	r3, #15
 8001d04:	f67f aea2 	bls.w	8001a4c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001d08:	bf00      	nop
 8001d0a:	bf00      	nop
 8001d0c:	3724      	adds	r7, #36	; 0x24
 8001d0e:	46bd      	mov	sp, r7
 8001d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d14:	4770      	bx	lr
 8001d16:	bf00      	nop
 8001d18:	40023800 	.word	0x40023800
 8001d1c:	40013800 	.word	0x40013800
 8001d20:	40020000 	.word	0x40020000
 8001d24:	40020400 	.word	0x40020400
 8001d28:	40020800 	.word	0x40020800
 8001d2c:	40020c00 	.word	0x40020c00
 8001d30:	40021000 	.word	0x40021000
 8001d34:	40013c00 	.word	0x40013c00

08001d38 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001d38:	b580      	push	{r7, lr}
 8001d3a:	b086      	sub	sp, #24
 8001d3c:	af00      	add	r7, sp, #0
 8001d3e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	d101      	bne.n	8001d4a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001d46:	2301      	movs	r3, #1
 8001d48:	e264      	b.n	8002214 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	f003 0301 	and.w	r3, r3, #1
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	d075      	beq.n	8001e42 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001d56:	4ba3      	ldr	r3, [pc, #652]	; (8001fe4 <HAL_RCC_OscConfig+0x2ac>)
 8001d58:	689b      	ldr	r3, [r3, #8]
 8001d5a:	f003 030c 	and.w	r3, r3, #12
 8001d5e:	2b04      	cmp	r3, #4
 8001d60:	d00c      	beq.n	8001d7c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001d62:	4ba0      	ldr	r3, [pc, #640]	; (8001fe4 <HAL_RCC_OscConfig+0x2ac>)
 8001d64:	689b      	ldr	r3, [r3, #8]
 8001d66:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001d6a:	2b08      	cmp	r3, #8
 8001d6c:	d112      	bne.n	8001d94 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001d6e:	4b9d      	ldr	r3, [pc, #628]	; (8001fe4 <HAL_RCC_OscConfig+0x2ac>)
 8001d70:	685b      	ldr	r3, [r3, #4]
 8001d72:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001d76:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001d7a:	d10b      	bne.n	8001d94 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001d7c:	4b99      	ldr	r3, [pc, #612]	; (8001fe4 <HAL_RCC_OscConfig+0x2ac>)
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d84:	2b00      	cmp	r3, #0
 8001d86:	d05b      	beq.n	8001e40 <HAL_RCC_OscConfig+0x108>
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	685b      	ldr	r3, [r3, #4]
 8001d8c:	2b00      	cmp	r3, #0
 8001d8e:	d157      	bne.n	8001e40 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001d90:	2301      	movs	r3, #1
 8001d92:	e23f      	b.n	8002214 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	685b      	ldr	r3, [r3, #4]
 8001d98:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001d9c:	d106      	bne.n	8001dac <HAL_RCC_OscConfig+0x74>
 8001d9e:	4b91      	ldr	r3, [pc, #580]	; (8001fe4 <HAL_RCC_OscConfig+0x2ac>)
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	4a90      	ldr	r2, [pc, #576]	; (8001fe4 <HAL_RCC_OscConfig+0x2ac>)
 8001da4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001da8:	6013      	str	r3, [r2, #0]
 8001daa:	e01d      	b.n	8001de8 <HAL_RCC_OscConfig+0xb0>
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	685b      	ldr	r3, [r3, #4]
 8001db0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001db4:	d10c      	bne.n	8001dd0 <HAL_RCC_OscConfig+0x98>
 8001db6:	4b8b      	ldr	r3, [pc, #556]	; (8001fe4 <HAL_RCC_OscConfig+0x2ac>)
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	4a8a      	ldr	r2, [pc, #552]	; (8001fe4 <HAL_RCC_OscConfig+0x2ac>)
 8001dbc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001dc0:	6013      	str	r3, [r2, #0]
 8001dc2:	4b88      	ldr	r3, [pc, #544]	; (8001fe4 <HAL_RCC_OscConfig+0x2ac>)
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	4a87      	ldr	r2, [pc, #540]	; (8001fe4 <HAL_RCC_OscConfig+0x2ac>)
 8001dc8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001dcc:	6013      	str	r3, [r2, #0]
 8001dce:	e00b      	b.n	8001de8 <HAL_RCC_OscConfig+0xb0>
 8001dd0:	4b84      	ldr	r3, [pc, #528]	; (8001fe4 <HAL_RCC_OscConfig+0x2ac>)
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	4a83      	ldr	r2, [pc, #524]	; (8001fe4 <HAL_RCC_OscConfig+0x2ac>)
 8001dd6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001dda:	6013      	str	r3, [r2, #0]
 8001ddc:	4b81      	ldr	r3, [pc, #516]	; (8001fe4 <HAL_RCC_OscConfig+0x2ac>)
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	4a80      	ldr	r2, [pc, #512]	; (8001fe4 <HAL_RCC_OscConfig+0x2ac>)
 8001de2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001de6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	685b      	ldr	r3, [r3, #4]
 8001dec:	2b00      	cmp	r3, #0
 8001dee:	d013      	beq.n	8001e18 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001df0:	f7ff f9f2 	bl	80011d8 <HAL_GetTick>
 8001df4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001df6:	e008      	b.n	8001e0a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001df8:	f7ff f9ee 	bl	80011d8 <HAL_GetTick>
 8001dfc:	4602      	mov	r2, r0
 8001dfe:	693b      	ldr	r3, [r7, #16]
 8001e00:	1ad3      	subs	r3, r2, r3
 8001e02:	2b64      	cmp	r3, #100	; 0x64
 8001e04:	d901      	bls.n	8001e0a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001e06:	2303      	movs	r3, #3
 8001e08:	e204      	b.n	8002214 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001e0a:	4b76      	ldr	r3, [pc, #472]	; (8001fe4 <HAL_RCC_OscConfig+0x2ac>)
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	d0f0      	beq.n	8001df8 <HAL_RCC_OscConfig+0xc0>
 8001e16:	e014      	b.n	8001e42 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e18:	f7ff f9de 	bl	80011d8 <HAL_GetTick>
 8001e1c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001e1e:	e008      	b.n	8001e32 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001e20:	f7ff f9da 	bl	80011d8 <HAL_GetTick>
 8001e24:	4602      	mov	r2, r0
 8001e26:	693b      	ldr	r3, [r7, #16]
 8001e28:	1ad3      	subs	r3, r2, r3
 8001e2a:	2b64      	cmp	r3, #100	; 0x64
 8001e2c:	d901      	bls.n	8001e32 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001e2e:	2303      	movs	r3, #3
 8001e30:	e1f0      	b.n	8002214 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001e32:	4b6c      	ldr	r3, [pc, #432]	; (8001fe4 <HAL_RCC_OscConfig+0x2ac>)
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	d1f0      	bne.n	8001e20 <HAL_RCC_OscConfig+0xe8>
 8001e3e:	e000      	b.n	8001e42 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001e40:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	f003 0302 	and.w	r3, r3, #2
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	d063      	beq.n	8001f16 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001e4e:	4b65      	ldr	r3, [pc, #404]	; (8001fe4 <HAL_RCC_OscConfig+0x2ac>)
 8001e50:	689b      	ldr	r3, [r3, #8]
 8001e52:	f003 030c 	and.w	r3, r3, #12
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	d00b      	beq.n	8001e72 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001e5a:	4b62      	ldr	r3, [pc, #392]	; (8001fe4 <HAL_RCC_OscConfig+0x2ac>)
 8001e5c:	689b      	ldr	r3, [r3, #8]
 8001e5e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001e62:	2b08      	cmp	r3, #8
 8001e64:	d11c      	bne.n	8001ea0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001e66:	4b5f      	ldr	r3, [pc, #380]	; (8001fe4 <HAL_RCC_OscConfig+0x2ac>)
 8001e68:	685b      	ldr	r3, [r3, #4]
 8001e6a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	d116      	bne.n	8001ea0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001e72:	4b5c      	ldr	r3, [pc, #368]	; (8001fe4 <HAL_RCC_OscConfig+0x2ac>)
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	f003 0302 	and.w	r3, r3, #2
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	d005      	beq.n	8001e8a <HAL_RCC_OscConfig+0x152>
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	68db      	ldr	r3, [r3, #12]
 8001e82:	2b01      	cmp	r3, #1
 8001e84:	d001      	beq.n	8001e8a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001e86:	2301      	movs	r3, #1
 8001e88:	e1c4      	b.n	8002214 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001e8a:	4b56      	ldr	r3, [pc, #344]	; (8001fe4 <HAL_RCC_OscConfig+0x2ac>)
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	691b      	ldr	r3, [r3, #16]
 8001e96:	00db      	lsls	r3, r3, #3
 8001e98:	4952      	ldr	r1, [pc, #328]	; (8001fe4 <HAL_RCC_OscConfig+0x2ac>)
 8001e9a:	4313      	orrs	r3, r2
 8001e9c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001e9e:	e03a      	b.n	8001f16 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	68db      	ldr	r3, [r3, #12]
 8001ea4:	2b00      	cmp	r3, #0
 8001ea6:	d020      	beq.n	8001eea <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001ea8:	4b4f      	ldr	r3, [pc, #316]	; (8001fe8 <HAL_RCC_OscConfig+0x2b0>)
 8001eaa:	2201      	movs	r2, #1
 8001eac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001eae:	f7ff f993 	bl	80011d8 <HAL_GetTick>
 8001eb2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001eb4:	e008      	b.n	8001ec8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001eb6:	f7ff f98f 	bl	80011d8 <HAL_GetTick>
 8001eba:	4602      	mov	r2, r0
 8001ebc:	693b      	ldr	r3, [r7, #16]
 8001ebe:	1ad3      	subs	r3, r2, r3
 8001ec0:	2b02      	cmp	r3, #2
 8001ec2:	d901      	bls.n	8001ec8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001ec4:	2303      	movs	r3, #3
 8001ec6:	e1a5      	b.n	8002214 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001ec8:	4b46      	ldr	r3, [pc, #280]	; (8001fe4 <HAL_RCC_OscConfig+0x2ac>)
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	f003 0302 	and.w	r3, r3, #2
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	d0f0      	beq.n	8001eb6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001ed4:	4b43      	ldr	r3, [pc, #268]	; (8001fe4 <HAL_RCC_OscConfig+0x2ac>)
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	691b      	ldr	r3, [r3, #16]
 8001ee0:	00db      	lsls	r3, r3, #3
 8001ee2:	4940      	ldr	r1, [pc, #256]	; (8001fe4 <HAL_RCC_OscConfig+0x2ac>)
 8001ee4:	4313      	orrs	r3, r2
 8001ee6:	600b      	str	r3, [r1, #0]
 8001ee8:	e015      	b.n	8001f16 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001eea:	4b3f      	ldr	r3, [pc, #252]	; (8001fe8 <HAL_RCC_OscConfig+0x2b0>)
 8001eec:	2200      	movs	r2, #0
 8001eee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ef0:	f7ff f972 	bl	80011d8 <HAL_GetTick>
 8001ef4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001ef6:	e008      	b.n	8001f0a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001ef8:	f7ff f96e 	bl	80011d8 <HAL_GetTick>
 8001efc:	4602      	mov	r2, r0
 8001efe:	693b      	ldr	r3, [r7, #16]
 8001f00:	1ad3      	subs	r3, r2, r3
 8001f02:	2b02      	cmp	r3, #2
 8001f04:	d901      	bls.n	8001f0a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001f06:	2303      	movs	r3, #3
 8001f08:	e184      	b.n	8002214 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001f0a:	4b36      	ldr	r3, [pc, #216]	; (8001fe4 <HAL_RCC_OscConfig+0x2ac>)
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	f003 0302 	and.w	r3, r3, #2
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	d1f0      	bne.n	8001ef8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	f003 0308 	and.w	r3, r3, #8
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	d030      	beq.n	8001f84 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	695b      	ldr	r3, [r3, #20]
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	d016      	beq.n	8001f58 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001f2a:	4b30      	ldr	r3, [pc, #192]	; (8001fec <HAL_RCC_OscConfig+0x2b4>)
 8001f2c:	2201      	movs	r2, #1
 8001f2e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f30:	f7ff f952 	bl	80011d8 <HAL_GetTick>
 8001f34:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001f36:	e008      	b.n	8001f4a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001f38:	f7ff f94e 	bl	80011d8 <HAL_GetTick>
 8001f3c:	4602      	mov	r2, r0
 8001f3e:	693b      	ldr	r3, [r7, #16]
 8001f40:	1ad3      	subs	r3, r2, r3
 8001f42:	2b02      	cmp	r3, #2
 8001f44:	d901      	bls.n	8001f4a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001f46:	2303      	movs	r3, #3
 8001f48:	e164      	b.n	8002214 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001f4a:	4b26      	ldr	r3, [pc, #152]	; (8001fe4 <HAL_RCC_OscConfig+0x2ac>)
 8001f4c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001f4e:	f003 0302 	and.w	r3, r3, #2
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	d0f0      	beq.n	8001f38 <HAL_RCC_OscConfig+0x200>
 8001f56:	e015      	b.n	8001f84 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001f58:	4b24      	ldr	r3, [pc, #144]	; (8001fec <HAL_RCC_OscConfig+0x2b4>)
 8001f5a:	2200      	movs	r2, #0
 8001f5c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001f5e:	f7ff f93b 	bl	80011d8 <HAL_GetTick>
 8001f62:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001f64:	e008      	b.n	8001f78 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001f66:	f7ff f937 	bl	80011d8 <HAL_GetTick>
 8001f6a:	4602      	mov	r2, r0
 8001f6c:	693b      	ldr	r3, [r7, #16]
 8001f6e:	1ad3      	subs	r3, r2, r3
 8001f70:	2b02      	cmp	r3, #2
 8001f72:	d901      	bls.n	8001f78 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8001f74:	2303      	movs	r3, #3
 8001f76:	e14d      	b.n	8002214 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001f78:	4b1a      	ldr	r3, [pc, #104]	; (8001fe4 <HAL_RCC_OscConfig+0x2ac>)
 8001f7a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001f7c:	f003 0302 	and.w	r3, r3, #2
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	d1f0      	bne.n	8001f66 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	f003 0304 	and.w	r3, r3, #4
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	f000 80a0 	beq.w	80020d2 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001f92:	2300      	movs	r3, #0
 8001f94:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001f96:	4b13      	ldr	r3, [pc, #76]	; (8001fe4 <HAL_RCC_OscConfig+0x2ac>)
 8001f98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f9a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	d10f      	bne.n	8001fc2 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001fa2:	2300      	movs	r3, #0
 8001fa4:	60bb      	str	r3, [r7, #8]
 8001fa6:	4b0f      	ldr	r3, [pc, #60]	; (8001fe4 <HAL_RCC_OscConfig+0x2ac>)
 8001fa8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001faa:	4a0e      	ldr	r2, [pc, #56]	; (8001fe4 <HAL_RCC_OscConfig+0x2ac>)
 8001fac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001fb0:	6413      	str	r3, [r2, #64]	; 0x40
 8001fb2:	4b0c      	ldr	r3, [pc, #48]	; (8001fe4 <HAL_RCC_OscConfig+0x2ac>)
 8001fb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fb6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001fba:	60bb      	str	r3, [r7, #8]
 8001fbc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001fbe:	2301      	movs	r3, #1
 8001fc0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001fc2:	4b0b      	ldr	r3, [pc, #44]	; (8001ff0 <HAL_RCC_OscConfig+0x2b8>)
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	d121      	bne.n	8002012 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001fce:	4b08      	ldr	r3, [pc, #32]	; (8001ff0 <HAL_RCC_OscConfig+0x2b8>)
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	4a07      	ldr	r2, [pc, #28]	; (8001ff0 <HAL_RCC_OscConfig+0x2b8>)
 8001fd4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001fd8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001fda:	f7ff f8fd 	bl	80011d8 <HAL_GetTick>
 8001fde:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001fe0:	e011      	b.n	8002006 <HAL_RCC_OscConfig+0x2ce>
 8001fe2:	bf00      	nop
 8001fe4:	40023800 	.word	0x40023800
 8001fe8:	42470000 	.word	0x42470000
 8001fec:	42470e80 	.word	0x42470e80
 8001ff0:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001ff4:	f7ff f8f0 	bl	80011d8 <HAL_GetTick>
 8001ff8:	4602      	mov	r2, r0
 8001ffa:	693b      	ldr	r3, [r7, #16]
 8001ffc:	1ad3      	subs	r3, r2, r3
 8001ffe:	2b02      	cmp	r3, #2
 8002000:	d901      	bls.n	8002006 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8002002:	2303      	movs	r3, #3
 8002004:	e106      	b.n	8002214 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002006:	4b85      	ldr	r3, [pc, #532]	; (800221c <HAL_RCC_OscConfig+0x4e4>)
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800200e:	2b00      	cmp	r3, #0
 8002010:	d0f0      	beq.n	8001ff4 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	689b      	ldr	r3, [r3, #8]
 8002016:	2b01      	cmp	r3, #1
 8002018:	d106      	bne.n	8002028 <HAL_RCC_OscConfig+0x2f0>
 800201a:	4b81      	ldr	r3, [pc, #516]	; (8002220 <HAL_RCC_OscConfig+0x4e8>)
 800201c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800201e:	4a80      	ldr	r2, [pc, #512]	; (8002220 <HAL_RCC_OscConfig+0x4e8>)
 8002020:	f043 0301 	orr.w	r3, r3, #1
 8002024:	6713      	str	r3, [r2, #112]	; 0x70
 8002026:	e01c      	b.n	8002062 <HAL_RCC_OscConfig+0x32a>
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	689b      	ldr	r3, [r3, #8]
 800202c:	2b05      	cmp	r3, #5
 800202e:	d10c      	bne.n	800204a <HAL_RCC_OscConfig+0x312>
 8002030:	4b7b      	ldr	r3, [pc, #492]	; (8002220 <HAL_RCC_OscConfig+0x4e8>)
 8002032:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002034:	4a7a      	ldr	r2, [pc, #488]	; (8002220 <HAL_RCC_OscConfig+0x4e8>)
 8002036:	f043 0304 	orr.w	r3, r3, #4
 800203a:	6713      	str	r3, [r2, #112]	; 0x70
 800203c:	4b78      	ldr	r3, [pc, #480]	; (8002220 <HAL_RCC_OscConfig+0x4e8>)
 800203e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002040:	4a77      	ldr	r2, [pc, #476]	; (8002220 <HAL_RCC_OscConfig+0x4e8>)
 8002042:	f043 0301 	orr.w	r3, r3, #1
 8002046:	6713      	str	r3, [r2, #112]	; 0x70
 8002048:	e00b      	b.n	8002062 <HAL_RCC_OscConfig+0x32a>
 800204a:	4b75      	ldr	r3, [pc, #468]	; (8002220 <HAL_RCC_OscConfig+0x4e8>)
 800204c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800204e:	4a74      	ldr	r2, [pc, #464]	; (8002220 <HAL_RCC_OscConfig+0x4e8>)
 8002050:	f023 0301 	bic.w	r3, r3, #1
 8002054:	6713      	str	r3, [r2, #112]	; 0x70
 8002056:	4b72      	ldr	r3, [pc, #456]	; (8002220 <HAL_RCC_OscConfig+0x4e8>)
 8002058:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800205a:	4a71      	ldr	r2, [pc, #452]	; (8002220 <HAL_RCC_OscConfig+0x4e8>)
 800205c:	f023 0304 	bic.w	r3, r3, #4
 8002060:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	689b      	ldr	r3, [r3, #8]
 8002066:	2b00      	cmp	r3, #0
 8002068:	d015      	beq.n	8002096 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800206a:	f7ff f8b5 	bl	80011d8 <HAL_GetTick>
 800206e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002070:	e00a      	b.n	8002088 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002072:	f7ff f8b1 	bl	80011d8 <HAL_GetTick>
 8002076:	4602      	mov	r2, r0
 8002078:	693b      	ldr	r3, [r7, #16]
 800207a:	1ad3      	subs	r3, r2, r3
 800207c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002080:	4293      	cmp	r3, r2
 8002082:	d901      	bls.n	8002088 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8002084:	2303      	movs	r3, #3
 8002086:	e0c5      	b.n	8002214 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002088:	4b65      	ldr	r3, [pc, #404]	; (8002220 <HAL_RCC_OscConfig+0x4e8>)
 800208a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800208c:	f003 0302 	and.w	r3, r3, #2
 8002090:	2b00      	cmp	r3, #0
 8002092:	d0ee      	beq.n	8002072 <HAL_RCC_OscConfig+0x33a>
 8002094:	e014      	b.n	80020c0 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002096:	f7ff f89f 	bl	80011d8 <HAL_GetTick>
 800209a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800209c:	e00a      	b.n	80020b4 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800209e:	f7ff f89b 	bl	80011d8 <HAL_GetTick>
 80020a2:	4602      	mov	r2, r0
 80020a4:	693b      	ldr	r3, [r7, #16]
 80020a6:	1ad3      	subs	r3, r2, r3
 80020a8:	f241 3288 	movw	r2, #5000	; 0x1388
 80020ac:	4293      	cmp	r3, r2
 80020ae:	d901      	bls.n	80020b4 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80020b0:	2303      	movs	r3, #3
 80020b2:	e0af      	b.n	8002214 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80020b4:	4b5a      	ldr	r3, [pc, #360]	; (8002220 <HAL_RCC_OscConfig+0x4e8>)
 80020b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80020b8:	f003 0302 	and.w	r3, r3, #2
 80020bc:	2b00      	cmp	r3, #0
 80020be:	d1ee      	bne.n	800209e <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80020c0:	7dfb      	ldrb	r3, [r7, #23]
 80020c2:	2b01      	cmp	r3, #1
 80020c4:	d105      	bne.n	80020d2 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80020c6:	4b56      	ldr	r3, [pc, #344]	; (8002220 <HAL_RCC_OscConfig+0x4e8>)
 80020c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020ca:	4a55      	ldr	r2, [pc, #340]	; (8002220 <HAL_RCC_OscConfig+0x4e8>)
 80020cc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80020d0:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	699b      	ldr	r3, [r3, #24]
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	f000 809b 	beq.w	8002212 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80020dc:	4b50      	ldr	r3, [pc, #320]	; (8002220 <HAL_RCC_OscConfig+0x4e8>)
 80020de:	689b      	ldr	r3, [r3, #8]
 80020e0:	f003 030c 	and.w	r3, r3, #12
 80020e4:	2b08      	cmp	r3, #8
 80020e6:	d05c      	beq.n	80021a2 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	699b      	ldr	r3, [r3, #24]
 80020ec:	2b02      	cmp	r3, #2
 80020ee:	d141      	bne.n	8002174 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80020f0:	4b4c      	ldr	r3, [pc, #304]	; (8002224 <HAL_RCC_OscConfig+0x4ec>)
 80020f2:	2200      	movs	r2, #0
 80020f4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020f6:	f7ff f86f 	bl	80011d8 <HAL_GetTick>
 80020fa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80020fc:	e008      	b.n	8002110 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80020fe:	f7ff f86b 	bl	80011d8 <HAL_GetTick>
 8002102:	4602      	mov	r2, r0
 8002104:	693b      	ldr	r3, [r7, #16]
 8002106:	1ad3      	subs	r3, r2, r3
 8002108:	2b02      	cmp	r3, #2
 800210a:	d901      	bls.n	8002110 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 800210c:	2303      	movs	r3, #3
 800210e:	e081      	b.n	8002214 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002110:	4b43      	ldr	r3, [pc, #268]	; (8002220 <HAL_RCC_OscConfig+0x4e8>)
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002118:	2b00      	cmp	r3, #0
 800211a:	d1f0      	bne.n	80020fe <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	69da      	ldr	r2, [r3, #28]
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	6a1b      	ldr	r3, [r3, #32]
 8002124:	431a      	orrs	r2, r3
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800212a:	019b      	lsls	r3, r3, #6
 800212c:	431a      	orrs	r2, r3
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002132:	085b      	lsrs	r3, r3, #1
 8002134:	3b01      	subs	r3, #1
 8002136:	041b      	lsls	r3, r3, #16
 8002138:	431a      	orrs	r2, r3
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800213e:	061b      	lsls	r3, r3, #24
 8002140:	4937      	ldr	r1, [pc, #220]	; (8002220 <HAL_RCC_OscConfig+0x4e8>)
 8002142:	4313      	orrs	r3, r2
 8002144:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002146:	4b37      	ldr	r3, [pc, #220]	; (8002224 <HAL_RCC_OscConfig+0x4ec>)
 8002148:	2201      	movs	r2, #1
 800214a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800214c:	f7ff f844 	bl	80011d8 <HAL_GetTick>
 8002150:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002152:	e008      	b.n	8002166 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002154:	f7ff f840 	bl	80011d8 <HAL_GetTick>
 8002158:	4602      	mov	r2, r0
 800215a:	693b      	ldr	r3, [r7, #16]
 800215c:	1ad3      	subs	r3, r2, r3
 800215e:	2b02      	cmp	r3, #2
 8002160:	d901      	bls.n	8002166 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8002162:	2303      	movs	r3, #3
 8002164:	e056      	b.n	8002214 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002166:	4b2e      	ldr	r3, [pc, #184]	; (8002220 <HAL_RCC_OscConfig+0x4e8>)
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800216e:	2b00      	cmp	r3, #0
 8002170:	d0f0      	beq.n	8002154 <HAL_RCC_OscConfig+0x41c>
 8002172:	e04e      	b.n	8002212 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002174:	4b2b      	ldr	r3, [pc, #172]	; (8002224 <HAL_RCC_OscConfig+0x4ec>)
 8002176:	2200      	movs	r2, #0
 8002178:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800217a:	f7ff f82d 	bl	80011d8 <HAL_GetTick>
 800217e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002180:	e008      	b.n	8002194 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002182:	f7ff f829 	bl	80011d8 <HAL_GetTick>
 8002186:	4602      	mov	r2, r0
 8002188:	693b      	ldr	r3, [r7, #16]
 800218a:	1ad3      	subs	r3, r2, r3
 800218c:	2b02      	cmp	r3, #2
 800218e:	d901      	bls.n	8002194 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8002190:	2303      	movs	r3, #3
 8002192:	e03f      	b.n	8002214 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002194:	4b22      	ldr	r3, [pc, #136]	; (8002220 <HAL_RCC_OscConfig+0x4e8>)
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800219c:	2b00      	cmp	r3, #0
 800219e:	d1f0      	bne.n	8002182 <HAL_RCC_OscConfig+0x44a>
 80021a0:	e037      	b.n	8002212 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	699b      	ldr	r3, [r3, #24]
 80021a6:	2b01      	cmp	r3, #1
 80021a8:	d101      	bne.n	80021ae <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 80021aa:	2301      	movs	r3, #1
 80021ac:	e032      	b.n	8002214 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80021ae:	4b1c      	ldr	r3, [pc, #112]	; (8002220 <HAL_RCC_OscConfig+0x4e8>)
 80021b0:	685b      	ldr	r3, [r3, #4]
 80021b2:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	699b      	ldr	r3, [r3, #24]
 80021b8:	2b01      	cmp	r3, #1
 80021ba:	d028      	beq.n	800220e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80021bc:	68fb      	ldr	r3, [r7, #12]
 80021be:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80021c6:	429a      	cmp	r2, r3
 80021c8:	d121      	bne.n	800220e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80021ca:	68fb      	ldr	r3, [r7, #12]
 80021cc:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80021d4:	429a      	cmp	r2, r3
 80021d6:	d11a      	bne.n	800220e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80021d8:	68fa      	ldr	r2, [r7, #12]
 80021da:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80021de:	4013      	ands	r3, r2
 80021e0:	687a      	ldr	r2, [r7, #4]
 80021e2:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80021e4:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80021e6:	4293      	cmp	r3, r2
 80021e8:	d111      	bne.n	800220e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80021ea:	68fb      	ldr	r3, [r7, #12]
 80021ec:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021f4:	085b      	lsrs	r3, r3, #1
 80021f6:	3b01      	subs	r3, #1
 80021f8:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80021fa:	429a      	cmp	r2, r3
 80021fc:	d107      	bne.n	800220e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80021fe:	68fb      	ldr	r3, [r7, #12]
 8002200:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002208:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800220a:	429a      	cmp	r2, r3
 800220c:	d001      	beq.n	8002212 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 800220e:	2301      	movs	r3, #1
 8002210:	e000      	b.n	8002214 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8002212:	2300      	movs	r3, #0
}
 8002214:	4618      	mov	r0, r3
 8002216:	3718      	adds	r7, #24
 8002218:	46bd      	mov	sp, r7
 800221a:	bd80      	pop	{r7, pc}
 800221c:	40007000 	.word	0x40007000
 8002220:	40023800 	.word	0x40023800
 8002224:	42470060 	.word	0x42470060

08002228 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002228:	b580      	push	{r7, lr}
 800222a:	b084      	sub	sp, #16
 800222c:	af00      	add	r7, sp, #0
 800222e:	6078      	str	r0, [r7, #4]
 8002230:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	2b00      	cmp	r3, #0
 8002236:	d101      	bne.n	800223c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002238:	2301      	movs	r3, #1
 800223a:	e0cc      	b.n	80023d6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800223c:	4b68      	ldr	r3, [pc, #416]	; (80023e0 <HAL_RCC_ClockConfig+0x1b8>)
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	f003 0307 	and.w	r3, r3, #7
 8002244:	683a      	ldr	r2, [r7, #0]
 8002246:	429a      	cmp	r2, r3
 8002248:	d90c      	bls.n	8002264 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800224a:	4b65      	ldr	r3, [pc, #404]	; (80023e0 <HAL_RCC_ClockConfig+0x1b8>)
 800224c:	683a      	ldr	r2, [r7, #0]
 800224e:	b2d2      	uxtb	r2, r2
 8002250:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002252:	4b63      	ldr	r3, [pc, #396]	; (80023e0 <HAL_RCC_ClockConfig+0x1b8>)
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	f003 0307 	and.w	r3, r3, #7
 800225a:	683a      	ldr	r2, [r7, #0]
 800225c:	429a      	cmp	r2, r3
 800225e:	d001      	beq.n	8002264 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002260:	2301      	movs	r3, #1
 8002262:	e0b8      	b.n	80023d6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	f003 0302 	and.w	r3, r3, #2
 800226c:	2b00      	cmp	r3, #0
 800226e:	d020      	beq.n	80022b2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	f003 0304 	and.w	r3, r3, #4
 8002278:	2b00      	cmp	r3, #0
 800227a:	d005      	beq.n	8002288 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800227c:	4b59      	ldr	r3, [pc, #356]	; (80023e4 <HAL_RCC_ClockConfig+0x1bc>)
 800227e:	689b      	ldr	r3, [r3, #8]
 8002280:	4a58      	ldr	r2, [pc, #352]	; (80023e4 <HAL_RCC_ClockConfig+0x1bc>)
 8002282:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002286:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	f003 0308 	and.w	r3, r3, #8
 8002290:	2b00      	cmp	r3, #0
 8002292:	d005      	beq.n	80022a0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002294:	4b53      	ldr	r3, [pc, #332]	; (80023e4 <HAL_RCC_ClockConfig+0x1bc>)
 8002296:	689b      	ldr	r3, [r3, #8]
 8002298:	4a52      	ldr	r2, [pc, #328]	; (80023e4 <HAL_RCC_ClockConfig+0x1bc>)
 800229a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800229e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80022a0:	4b50      	ldr	r3, [pc, #320]	; (80023e4 <HAL_RCC_ClockConfig+0x1bc>)
 80022a2:	689b      	ldr	r3, [r3, #8]
 80022a4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	689b      	ldr	r3, [r3, #8]
 80022ac:	494d      	ldr	r1, [pc, #308]	; (80023e4 <HAL_RCC_ClockConfig+0x1bc>)
 80022ae:	4313      	orrs	r3, r2
 80022b0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	f003 0301 	and.w	r3, r3, #1
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d044      	beq.n	8002348 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	685b      	ldr	r3, [r3, #4]
 80022c2:	2b01      	cmp	r3, #1
 80022c4:	d107      	bne.n	80022d6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80022c6:	4b47      	ldr	r3, [pc, #284]	; (80023e4 <HAL_RCC_ClockConfig+0x1bc>)
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	d119      	bne.n	8002306 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80022d2:	2301      	movs	r3, #1
 80022d4:	e07f      	b.n	80023d6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	685b      	ldr	r3, [r3, #4]
 80022da:	2b02      	cmp	r3, #2
 80022dc:	d003      	beq.n	80022e6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80022e2:	2b03      	cmp	r3, #3
 80022e4:	d107      	bne.n	80022f6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80022e6:	4b3f      	ldr	r3, [pc, #252]	; (80023e4 <HAL_RCC_ClockConfig+0x1bc>)
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d109      	bne.n	8002306 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80022f2:	2301      	movs	r3, #1
 80022f4:	e06f      	b.n	80023d6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80022f6:	4b3b      	ldr	r3, [pc, #236]	; (80023e4 <HAL_RCC_ClockConfig+0x1bc>)
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	f003 0302 	and.w	r3, r3, #2
 80022fe:	2b00      	cmp	r3, #0
 8002300:	d101      	bne.n	8002306 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002302:	2301      	movs	r3, #1
 8002304:	e067      	b.n	80023d6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002306:	4b37      	ldr	r3, [pc, #220]	; (80023e4 <HAL_RCC_ClockConfig+0x1bc>)
 8002308:	689b      	ldr	r3, [r3, #8]
 800230a:	f023 0203 	bic.w	r2, r3, #3
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	685b      	ldr	r3, [r3, #4]
 8002312:	4934      	ldr	r1, [pc, #208]	; (80023e4 <HAL_RCC_ClockConfig+0x1bc>)
 8002314:	4313      	orrs	r3, r2
 8002316:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002318:	f7fe ff5e 	bl	80011d8 <HAL_GetTick>
 800231c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800231e:	e00a      	b.n	8002336 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002320:	f7fe ff5a 	bl	80011d8 <HAL_GetTick>
 8002324:	4602      	mov	r2, r0
 8002326:	68fb      	ldr	r3, [r7, #12]
 8002328:	1ad3      	subs	r3, r2, r3
 800232a:	f241 3288 	movw	r2, #5000	; 0x1388
 800232e:	4293      	cmp	r3, r2
 8002330:	d901      	bls.n	8002336 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002332:	2303      	movs	r3, #3
 8002334:	e04f      	b.n	80023d6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002336:	4b2b      	ldr	r3, [pc, #172]	; (80023e4 <HAL_RCC_ClockConfig+0x1bc>)
 8002338:	689b      	ldr	r3, [r3, #8]
 800233a:	f003 020c 	and.w	r2, r3, #12
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	685b      	ldr	r3, [r3, #4]
 8002342:	009b      	lsls	r3, r3, #2
 8002344:	429a      	cmp	r2, r3
 8002346:	d1eb      	bne.n	8002320 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002348:	4b25      	ldr	r3, [pc, #148]	; (80023e0 <HAL_RCC_ClockConfig+0x1b8>)
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	f003 0307 	and.w	r3, r3, #7
 8002350:	683a      	ldr	r2, [r7, #0]
 8002352:	429a      	cmp	r2, r3
 8002354:	d20c      	bcs.n	8002370 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002356:	4b22      	ldr	r3, [pc, #136]	; (80023e0 <HAL_RCC_ClockConfig+0x1b8>)
 8002358:	683a      	ldr	r2, [r7, #0]
 800235a:	b2d2      	uxtb	r2, r2
 800235c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800235e:	4b20      	ldr	r3, [pc, #128]	; (80023e0 <HAL_RCC_ClockConfig+0x1b8>)
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	f003 0307 	and.w	r3, r3, #7
 8002366:	683a      	ldr	r2, [r7, #0]
 8002368:	429a      	cmp	r2, r3
 800236a:	d001      	beq.n	8002370 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800236c:	2301      	movs	r3, #1
 800236e:	e032      	b.n	80023d6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	f003 0304 	and.w	r3, r3, #4
 8002378:	2b00      	cmp	r3, #0
 800237a:	d008      	beq.n	800238e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800237c:	4b19      	ldr	r3, [pc, #100]	; (80023e4 <HAL_RCC_ClockConfig+0x1bc>)
 800237e:	689b      	ldr	r3, [r3, #8]
 8002380:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	68db      	ldr	r3, [r3, #12]
 8002388:	4916      	ldr	r1, [pc, #88]	; (80023e4 <HAL_RCC_ClockConfig+0x1bc>)
 800238a:	4313      	orrs	r3, r2
 800238c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	f003 0308 	and.w	r3, r3, #8
 8002396:	2b00      	cmp	r3, #0
 8002398:	d009      	beq.n	80023ae <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800239a:	4b12      	ldr	r3, [pc, #72]	; (80023e4 <HAL_RCC_ClockConfig+0x1bc>)
 800239c:	689b      	ldr	r3, [r3, #8]
 800239e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	691b      	ldr	r3, [r3, #16]
 80023a6:	00db      	lsls	r3, r3, #3
 80023a8:	490e      	ldr	r1, [pc, #56]	; (80023e4 <HAL_RCC_ClockConfig+0x1bc>)
 80023aa:	4313      	orrs	r3, r2
 80023ac:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80023ae:	f000 f821 	bl	80023f4 <HAL_RCC_GetSysClockFreq>
 80023b2:	4602      	mov	r2, r0
 80023b4:	4b0b      	ldr	r3, [pc, #44]	; (80023e4 <HAL_RCC_ClockConfig+0x1bc>)
 80023b6:	689b      	ldr	r3, [r3, #8]
 80023b8:	091b      	lsrs	r3, r3, #4
 80023ba:	f003 030f 	and.w	r3, r3, #15
 80023be:	490a      	ldr	r1, [pc, #40]	; (80023e8 <HAL_RCC_ClockConfig+0x1c0>)
 80023c0:	5ccb      	ldrb	r3, [r1, r3]
 80023c2:	fa22 f303 	lsr.w	r3, r2, r3
 80023c6:	4a09      	ldr	r2, [pc, #36]	; (80023ec <HAL_RCC_ClockConfig+0x1c4>)
 80023c8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80023ca:	4b09      	ldr	r3, [pc, #36]	; (80023f0 <HAL_RCC_ClockConfig+0x1c8>)
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	4618      	mov	r0, r3
 80023d0:	f7fe febe 	bl	8001150 <HAL_InitTick>

  return HAL_OK;
 80023d4:	2300      	movs	r3, #0
}
 80023d6:	4618      	mov	r0, r3
 80023d8:	3710      	adds	r7, #16
 80023da:	46bd      	mov	sp, r7
 80023dc:	bd80      	pop	{r7, pc}
 80023de:	bf00      	nop
 80023e0:	40023c00 	.word	0x40023c00
 80023e4:	40023800 	.word	0x40023800
 80023e8:	0800384c 	.word	0x0800384c
 80023ec:	20000000 	.word	0x20000000
 80023f0:	20000004 	.word	0x20000004

080023f4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80023f4:	b5b0      	push	{r4, r5, r7, lr}
 80023f6:	b084      	sub	sp, #16
 80023f8:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80023fa:	2100      	movs	r1, #0
 80023fc:	6079      	str	r1, [r7, #4]
 80023fe:	2100      	movs	r1, #0
 8002400:	60f9      	str	r1, [r7, #12]
 8002402:	2100      	movs	r1, #0
 8002404:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8002406:	2100      	movs	r1, #0
 8002408:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800240a:	4952      	ldr	r1, [pc, #328]	; (8002554 <HAL_RCC_GetSysClockFreq+0x160>)
 800240c:	6889      	ldr	r1, [r1, #8]
 800240e:	f001 010c 	and.w	r1, r1, #12
 8002412:	2908      	cmp	r1, #8
 8002414:	d00d      	beq.n	8002432 <HAL_RCC_GetSysClockFreq+0x3e>
 8002416:	2908      	cmp	r1, #8
 8002418:	f200 8094 	bhi.w	8002544 <HAL_RCC_GetSysClockFreq+0x150>
 800241c:	2900      	cmp	r1, #0
 800241e:	d002      	beq.n	8002426 <HAL_RCC_GetSysClockFreq+0x32>
 8002420:	2904      	cmp	r1, #4
 8002422:	d003      	beq.n	800242c <HAL_RCC_GetSysClockFreq+0x38>
 8002424:	e08e      	b.n	8002544 <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002426:	4b4c      	ldr	r3, [pc, #304]	; (8002558 <HAL_RCC_GetSysClockFreq+0x164>)
 8002428:	60bb      	str	r3, [r7, #8]
       break;
 800242a:	e08e      	b.n	800254a <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800242c:	4b4b      	ldr	r3, [pc, #300]	; (800255c <HAL_RCC_GetSysClockFreq+0x168>)
 800242e:	60bb      	str	r3, [r7, #8]
      break;
 8002430:	e08b      	b.n	800254a <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002432:	4948      	ldr	r1, [pc, #288]	; (8002554 <HAL_RCC_GetSysClockFreq+0x160>)
 8002434:	6849      	ldr	r1, [r1, #4]
 8002436:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 800243a:	6079      	str	r1, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800243c:	4945      	ldr	r1, [pc, #276]	; (8002554 <HAL_RCC_GetSysClockFreq+0x160>)
 800243e:	6849      	ldr	r1, [r1, #4]
 8002440:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 8002444:	2900      	cmp	r1, #0
 8002446:	d024      	beq.n	8002492 <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002448:	4942      	ldr	r1, [pc, #264]	; (8002554 <HAL_RCC_GetSysClockFreq+0x160>)
 800244a:	6849      	ldr	r1, [r1, #4]
 800244c:	0989      	lsrs	r1, r1, #6
 800244e:	4608      	mov	r0, r1
 8002450:	f04f 0100 	mov.w	r1, #0
 8002454:	f240 14ff 	movw	r4, #511	; 0x1ff
 8002458:	f04f 0500 	mov.w	r5, #0
 800245c:	ea00 0204 	and.w	r2, r0, r4
 8002460:	ea01 0305 	and.w	r3, r1, r5
 8002464:	493d      	ldr	r1, [pc, #244]	; (800255c <HAL_RCC_GetSysClockFreq+0x168>)
 8002466:	fb01 f003 	mul.w	r0, r1, r3
 800246a:	2100      	movs	r1, #0
 800246c:	fb01 f102 	mul.w	r1, r1, r2
 8002470:	1844      	adds	r4, r0, r1
 8002472:	493a      	ldr	r1, [pc, #232]	; (800255c <HAL_RCC_GetSysClockFreq+0x168>)
 8002474:	fba2 0101 	umull	r0, r1, r2, r1
 8002478:	1863      	adds	r3, r4, r1
 800247a:	4619      	mov	r1, r3
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	461a      	mov	r2, r3
 8002480:	f04f 0300 	mov.w	r3, #0
 8002484:	f7fd ff04 	bl	8000290 <__aeabi_uldivmod>
 8002488:	4602      	mov	r2, r0
 800248a:	460b      	mov	r3, r1
 800248c:	4613      	mov	r3, r2
 800248e:	60fb      	str	r3, [r7, #12]
 8002490:	e04a      	b.n	8002528 <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002492:	4b30      	ldr	r3, [pc, #192]	; (8002554 <HAL_RCC_GetSysClockFreq+0x160>)
 8002494:	685b      	ldr	r3, [r3, #4]
 8002496:	099b      	lsrs	r3, r3, #6
 8002498:	461a      	mov	r2, r3
 800249a:	f04f 0300 	mov.w	r3, #0
 800249e:	f240 10ff 	movw	r0, #511	; 0x1ff
 80024a2:	f04f 0100 	mov.w	r1, #0
 80024a6:	ea02 0400 	and.w	r4, r2, r0
 80024aa:	ea03 0501 	and.w	r5, r3, r1
 80024ae:	4620      	mov	r0, r4
 80024b0:	4629      	mov	r1, r5
 80024b2:	f04f 0200 	mov.w	r2, #0
 80024b6:	f04f 0300 	mov.w	r3, #0
 80024ba:	014b      	lsls	r3, r1, #5
 80024bc:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80024c0:	0142      	lsls	r2, r0, #5
 80024c2:	4610      	mov	r0, r2
 80024c4:	4619      	mov	r1, r3
 80024c6:	1b00      	subs	r0, r0, r4
 80024c8:	eb61 0105 	sbc.w	r1, r1, r5
 80024cc:	f04f 0200 	mov.w	r2, #0
 80024d0:	f04f 0300 	mov.w	r3, #0
 80024d4:	018b      	lsls	r3, r1, #6
 80024d6:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80024da:	0182      	lsls	r2, r0, #6
 80024dc:	1a12      	subs	r2, r2, r0
 80024de:	eb63 0301 	sbc.w	r3, r3, r1
 80024e2:	f04f 0000 	mov.w	r0, #0
 80024e6:	f04f 0100 	mov.w	r1, #0
 80024ea:	00d9      	lsls	r1, r3, #3
 80024ec:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80024f0:	00d0      	lsls	r0, r2, #3
 80024f2:	4602      	mov	r2, r0
 80024f4:	460b      	mov	r3, r1
 80024f6:	1912      	adds	r2, r2, r4
 80024f8:	eb45 0303 	adc.w	r3, r5, r3
 80024fc:	f04f 0000 	mov.w	r0, #0
 8002500:	f04f 0100 	mov.w	r1, #0
 8002504:	0299      	lsls	r1, r3, #10
 8002506:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 800250a:	0290      	lsls	r0, r2, #10
 800250c:	4602      	mov	r2, r0
 800250e:	460b      	mov	r3, r1
 8002510:	4610      	mov	r0, r2
 8002512:	4619      	mov	r1, r3
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	461a      	mov	r2, r3
 8002518:	f04f 0300 	mov.w	r3, #0
 800251c:	f7fd feb8 	bl	8000290 <__aeabi_uldivmod>
 8002520:	4602      	mov	r2, r0
 8002522:	460b      	mov	r3, r1
 8002524:	4613      	mov	r3, r2
 8002526:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002528:	4b0a      	ldr	r3, [pc, #40]	; (8002554 <HAL_RCC_GetSysClockFreq+0x160>)
 800252a:	685b      	ldr	r3, [r3, #4]
 800252c:	0c1b      	lsrs	r3, r3, #16
 800252e:	f003 0303 	and.w	r3, r3, #3
 8002532:	3301      	adds	r3, #1
 8002534:	005b      	lsls	r3, r3, #1
 8002536:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8002538:	68fa      	ldr	r2, [r7, #12]
 800253a:	683b      	ldr	r3, [r7, #0]
 800253c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002540:	60bb      	str	r3, [r7, #8]
      break;
 8002542:	e002      	b.n	800254a <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002544:	4b04      	ldr	r3, [pc, #16]	; (8002558 <HAL_RCC_GetSysClockFreq+0x164>)
 8002546:	60bb      	str	r3, [r7, #8]
      break;
 8002548:	bf00      	nop
    }
  }
  return sysclockfreq;
 800254a:	68bb      	ldr	r3, [r7, #8]
}
 800254c:	4618      	mov	r0, r3
 800254e:	3710      	adds	r7, #16
 8002550:	46bd      	mov	sp, r7
 8002552:	bdb0      	pop	{r4, r5, r7, pc}
 8002554:	40023800 	.word	0x40023800
 8002558:	00f42400 	.word	0x00f42400
 800255c:	017d7840 	.word	0x017d7840

08002560 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002560:	b480      	push	{r7}
 8002562:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002564:	4b03      	ldr	r3, [pc, #12]	; (8002574 <HAL_RCC_GetHCLKFreq+0x14>)
 8002566:	681b      	ldr	r3, [r3, #0]
}
 8002568:	4618      	mov	r0, r3
 800256a:	46bd      	mov	sp, r7
 800256c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002570:	4770      	bx	lr
 8002572:	bf00      	nop
 8002574:	20000000 	.word	0x20000000

08002578 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002578:	b580      	push	{r7, lr}
 800257a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800257c:	f7ff fff0 	bl	8002560 <HAL_RCC_GetHCLKFreq>
 8002580:	4602      	mov	r2, r0
 8002582:	4b05      	ldr	r3, [pc, #20]	; (8002598 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002584:	689b      	ldr	r3, [r3, #8]
 8002586:	0a9b      	lsrs	r3, r3, #10
 8002588:	f003 0307 	and.w	r3, r3, #7
 800258c:	4903      	ldr	r1, [pc, #12]	; (800259c <HAL_RCC_GetPCLK1Freq+0x24>)
 800258e:	5ccb      	ldrb	r3, [r1, r3]
 8002590:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002594:	4618      	mov	r0, r3
 8002596:	bd80      	pop	{r7, pc}
 8002598:	40023800 	.word	0x40023800
 800259c:	0800385c 	.word	0x0800385c

080025a0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80025a0:	b580      	push	{r7, lr}
 80025a2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80025a4:	f7ff ffdc 	bl	8002560 <HAL_RCC_GetHCLKFreq>
 80025a8:	4602      	mov	r2, r0
 80025aa:	4b05      	ldr	r3, [pc, #20]	; (80025c0 <HAL_RCC_GetPCLK2Freq+0x20>)
 80025ac:	689b      	ldr	r3, [r3, #8]
 80025ae:	0b5b      	lsrs	r3, r3, #13
 80025b0:	f003 0307 	and.w	r3, r3, #7
 80025b4:	4903      	ldr	r1, [pc, #12]	; (80025c4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80025b6:	5ccb      	ldrb	r3, [r1, r3]
 80025b8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80025bc:	4618      	mov	r0, r3
 80025be:	bd80      	pop	{r7, pc}
 80025c0:	40023800 	.word	0x40023800
 80025c4:	0800385c 	.word	0x0800385c

080025c8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80025c8:	b580      	push	{r7, lr}
 80025ca:	b082      	sub	sp, #8
 80025cc:	af00      	add	r7, sp, #0
 80025ce:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d101      	bne.n	80025da <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80025d6:	2301      	movs	r3, #1
 80025d8:	e03f      	b.n	800265a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80025e0:	b2db      	uxtb	r3, r3
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d106      	bne.n	80025f4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	2200      	movs	r2, #0
 80025ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80025ee:	6878      	ldr	r0, [r7, #4]
 80025f0:	f7fe fca8 	bl	8000f44 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	2224      	movs	r2, #36	; 0x24
 80025f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	68da      	ldr	r2, [r3, #12]
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800260a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800260c:	6878      	ldr	r0, [r7, #4]
 800260e:	f000 f9cb 	bl	80029a8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	691a      	ldr	r2, [r3, #16]
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002620:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	695a      	ldr	r2, [r3, #20]
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002630:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	68da      	ldr	r2, [r3, #12]
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002640:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	2200      	movs	r2, #0
 8002646:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	2220      	movs	r2, #32
 800264c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	2220      	movs	r2, #32
 8002654:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002658:	2300      	movs	r3, #0
}
 800265a:	4618      	mov	r0, r3
 800265c:	3708      	adds	r7, #8
 800265e:	46bd      	mov	sp, r7
 8002660:	bd80      	pop	{r7, pc}

08002662 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002662:	b580      	push	{r7, lr}
 8002664:	b08a      	sub	sp, #40	; 0x28
 8002666:	af02      	add	r7, sp, #8
 8002668:	60f8      	str	r0, [r7, #12]
 800266a:	60b9      	str	r1, [r7, #8]
 800266c:	603b      	str	r3, [r7, #0]
 800266e:	4613      	mov	r3, r2
 8002670:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002672:	2300      	movs	r3, #0
 8002674:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002676:	68fb      	ldr	r3, [r7, #12]
 8002678:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800267c:	b2db      	uxtb	r3, r3
 800267e:	2b20      	cmp	r3, #32
 8002680:	d17c      	bne.n	800277c <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002682:	68bb      	ldr	r3, [r7, #8]
 8002684:	2b00      	cmp	r3, #0
 8002686:	d002      	beq.n	800268e <HAL_UART_Transmit+0x2c>
 8002688:	88fb      	ldrh	r3, [r7, #6]
 800268a:	2b00      	cmp	r3, #0
 800268c:	d101      	bne.n	8002692 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800268e:	2301      	movs	r3, #1
 8002690:	e075      	b.n	800277e <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002692:	68fb      	ldr	r3, [r7, #12]
 8002694:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002698:	2b01      	cmp	r3, #1
 800269a:	d101      	bne.n	80026a0 <HAL_UART_Transmit+0x3e>
 800269c:	2302      	movs	r3, #2
 800269e:	e06e      	b.n	800277e <HAL_UART_Transmit+0x11c>
 80026a0:	68fb      	ldr	r3, [r7, #12]
 80026a2:	2201      	movs	r2, #1
 80026a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80026a8:	68fb      	ldr	r3, [r7, #12]
 80026aa:	2200      	movs	r2, #0
 80026ac:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80026ae:	68fb      	ldr	r3, [r7, #12]
 80026b0:	2221      	movs	r2, #33	; 0x21
 80026b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80026b6:	f7fe fd8f 	bl	80011d8 <HAL_GetTick>
 80026ba:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	88fa      	ldrh	r2, [r7, #6]
 80026c0:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80026c2:	68fb      	ldr	r3, [r7, #12]
 80026c4:	88fa      	ldrh	r2, [r7, #6]
 80026c6:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80026c8:	68fb      	ldr	r3, [r7, #12]
 80026ca:	689b      	ldr	r3, [r3, #8]
 80026cc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80026d0:	d108      	bne.n	80026e4 <HAL_UART_Transmit+0x82>
 80026d2:	68fb      	ldr	r3, [r7, #12]
 80026d4:	691b      	ldr	r3, [r3, #16]
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d104      	bne.n	80026e4 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80026da:	2300      	movs	r3, #0
 80026dc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80026de:	68bb      	ldr	r3, [r7, #8]
 80026e0:	61bb      	str	r3, [r7, #24]
 80026e2:	e003      	b.n	80026ec <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80026e4:	68bb      	ldr	r3, [r7, #8]
 80026e6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80026e8:	2300      	movs	r3, #0
 80026ea:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	2200      	movs	r2, #0
 80026f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80026f4:	e02a      	b.n	800274c <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80026f6:	683b      	ldr	r3, [r7, #0]
 80026f8:	9300      	str	r3, [sp, #0]
 80026fa:	697b      	ldr	r3, [r7, #20]
 80026fc:	2200      	movs	r2, #0
 80026fe:	2180      	movs	r1, #128	; 0x80
 8002700:	68f8      	ldr	r0, [r7, #12]
 8002702:	f000 f8e2 	bl	80028ca <UART_WaitOnFlagUntilTimeout>
 8002706:	4603      	mov	r3, r0
 8002708:	2b00      	cmp	r3, #0
 800270a:	d001      	beq.n	8002710 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 800270c:	2303      	movs	r3, #3
 800270e:	e036      	b.n	800277e <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8002710:	69fb      	ldr	r3, [r7, #28]
 8002712:	2b00      	cmp	r3, #0
 8002714:	d10b      	bne.n	800272e <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002716:	69bb      	ldr	r3, [r7, #24]
 8002718:	881b      	ldrh	r3, [r3, #0]
 800271a:	461a      	mov	r2, r3
 800271c:	68fb      	ldr	r3, [r7, #12]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002724:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002726:	69bb      	ldr	r3, [r7, #24]
 8002728:	3302      	adds	r3, #2
 800272a:	61bb      	str	r3, [r7, #24]
 800272c:	e007      	b.n	800273e <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800272e:	69fb      	ldr	r3, [r7, #28]
 8002730:	781a      	ldrb	r2, [r3, #0]
 8002732:	68fb      	ldr	r3, [r7, #12]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002738:	69fb      	ldr	r3, [r7, #28]
 800273a:	3301      	adds	r3, #1
 800273c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800273e:	68fb      	ldr	r3, [r7, #12]
 8002740:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002742:	b29b      	uxth	r3, r3
 8002744:	3b01      	subs	r3, #1
 8002746:	b29a      	uxth	r2, r3
 8002748:	68fb      	ldr	r3, [r7, #12]
 800274a:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800274c:	68fb      	ldr	r3, [r7, #12]
 800274e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002750:	b29b      	uxth	r3, r3
 8002752:	2b00      	cmp	r3, #0
 8002754:	d1cf      	bne.n	80026f6 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002756:	683b      	ldr	r3, [r7, #0]
 8002758:	9300      	str	r3, [sp, #0]
 800275a:	697b      	ldr	r3, [r7, #20]
 800275c:	2200      	movs	r2, #0
 800275e:	2140      	movs	r1, #64	; 0x40
 8002760:	68f8      	ldr	r0, [r7, #12]
 8002762:	f000 f8b2 	bl	80028ca <UART_WaitOnFlagUntilTimeout>
 8002766:	4603      	mov	r3, r0
 8002768:	2b00      	cmp	r3, #0
 800276a:	d001      	beq.n	8002770 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 800276c:	2303      	movs	r3, #3
 800276e:	e006      	b.n	800277e <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002770:	68fb      	ldr	r3, [r7, #12]
 8002772:	2220      	movs	r2, #32
 8002774:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8002778:	2300      	movs	r3, #0
 800277a:	e000      	b.n	800277e <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 800277c:	2302      	movs	r3, #2
  }
}
 800277e:	4618      	mov	r0, r3
 8002780:	3720      	adds	r7, #32
 8002782:	46bd      	mov	sp, r7
 8002784:	bd80      	pop	{r7, pc}

08002786 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002786:	b580      	push	{r7, lr}
 8002788:	b08a      	sub	sp, #40	; 0x28
 800278a:	af02      	add	r7, sp, #8
 800278c:	60f8      	str	r0, [r7, #12]
 800278e:	60b9      	str	r1, [r7, #8]
 8002790:	603b      	str	r3, [r7, #0]
 8002792:	4613      	mov	r3, r2
 8002794:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002796:	2300      	movs	r3, #0
 8002798:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800279a:	68fb      	ldr	r3, [r7, #12]
 800279c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80027a0:	b2db      	uxtb	r3, r3
 80027a2:	2b20      	cmp	r3, #32
 80027a4:	f040 808c 	bne.w	80028c0 <HAL_UART_Receive+0x13a>
  {
    if ((pData == NULL) || (Size == 0U))
 80027a8:	68bb      	ldr	r3, [r7, #8]
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	d002      	beq.n	80027b4 <HAL_UART_Receive+0x2e>
 80027ae:	88fb      	ldrh	r3, [r7, #6]
 80027b0:	2b00      	cmp	r3, #0
 80027b2:	d101      	bne.n	80027b8 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 80027b4:	2301      	movs	r3, #1
 80027b6:	e084      	b.n	80028c2 <HAL_UART_Receive+0x13c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80027b8:	68fb      	ldr	r3, [r7, #12]
 80027ba:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80027be:	2b01      	cmp	r3, #1
 80027c0:	d101      	bne.n	80027c6 <HAL_UART_Receive+0x40>
 80027c2:	2302      	movs	r3, #2
 80027c4:	e07d      	b.n	80028c2 <HAL_UART_Receive+0x13c>
 80027c6:	68fb      	ldr	r3, [r7, #12]
 80027c8:	2201      	movs	r2, #1
 80027ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80027ce:	68fb      	ldr	r3, [r7, #12]
 80027d0:	2200      	movs	r2, #0
 80027d2:	641a      	str	r2, [r3, #64]	; 0x40
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	2222      	movs	r2, #34	; 0x22
 80027d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	2200      	movs	r2, #0
 80027e0:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80027e2:	f7fe fcf9 	bl	80011d8 <HAL_GetTick>
 80027e6:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	88fa      	ldrh	r2, [r7, #6]
 80027ec:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 80027ee:	68fb      	ldr	r3, [r7, #12]
 80027f0:	88fa      	ldrh	r2, [r7, #6]
 80027f2:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	689b      	ldr	r3, [r3, #8]
 80027f8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80027fc:	d108      	bne.n	8002810 <HAL_UART_Receive+0x8a>
 80027fe:	68fb      	ldr	r3, [r7, #12]
 8002800:	691b      	ldr	r3, [r3, #16]
 8002802:	2b00      	cmp	r3, #0
 8002804:	d104      	bne.n	8002810 <HAL_UART_Receive+0x8a>
    {
      pdata8bits  = NULL;
 8002806:	2300      	movs	r3, #0
 8002808:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800280a:	68bb      	ldr	r3, [r7, #8]
 800280c:	61bb      	str	r3, [r7, #24]
 800280e:	e003      	b.n	8002818 <HAL_UART_Receive+0x92>
    }
    else
    {
      pdata8bits  = pData;
 8002810:	68bb      	ldr	r3, [r7, #8]
 8002812:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002814:	2300      	movs	r3, #0
 8002816:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002818:	68fb      	ldr	r3, [r7, #12]
 800281a:	2200      	movs	r2, #0
 800281c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8002820:	e043      	b.n	80028aa <HAL_UART_Receive+0x124>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8002822:	683b      	ldr	r3, [r7, #0]
 8002824:	9300      	str	r3, [sp, #0]
 8002826:	697b      	ldr	r3, [r7, #20]
 8002828:	2200      	movs	r2, #0
 800282a:	2120      	movs	r1, #32
 800282c:	68f8      	ldr	r0, [r7, #12]
 800282e:	f000 f84c 	bl	80028ca <UART_WaitOnFlagUntilTimeout>
 8002832:	4603      	mov	r3, r0
 8002834:	2b00      	cmp	r3, #0
 8002836:	d001      	beq.n	800283c <HAL_UART_Receive+0xb6>
      {
        return HAL_TIMEOUT;
 8002838:	2303      	movs	r3, #3
 800283a:	e042      	b.n	80028c2 <HAL_UART_Receive+0x13c>
      }
      if (pdata8bits == NULL)
 800283c:	69fb      	ldr	r3, [r7, #28]
 800283e:	2b00      	cmp	r3, #0
 8002840:	d10c      	bne.n	800285c <HAL_UART_Receive+0xd6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8002842:	68fb      	ldr	r3, [r7, #12]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	685b      	ldr	r3, [r3, #4]
 8002848:	b29b      	uxth	r3, r3
 800284a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800284e:	b29a      	uxth	r2, r3
 8002850:	69bb      	ldr	r3, [r7, #24]
 8002852:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8002854:	69bb      	ldr	r3, [r7, #24]
 8002856:	3302      	adds	r3, #2
 8002858:	61bb      	str	r3, [r7, #24]
 800285a:	e01f      	b.n	800289c <HAL_UART_Receive+0x116>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800285c:	68fb      	ldr	r3, [r7, #12]
 800285e:	689b      	ldr	r3, [r3, #8]
 8002860:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002864:	d007      	beq.n	8002876 <HAL_UART_Receive+0xf0>
 8002866:	68fb      	ldr	r3, [r7, #12]
 8002868:	689b      	ldr	r3, [r3, #8]
 800286a:	2b00      	cmp	r3, #0
 800286c:	d10a      	bne.n	8002884 <HAL_UART_Receive+0xfe>
 800286e:	68fb      	ldr	r3, [r7, #12]
 8002870:	691b      	ldr	r3, [r3, #16]
 8002872:	2b00      	cmp	r3, #0
 8002874:	d106      	bne.n	8002884 <HAL_UART_Receive+0xfe>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8002876:	68fb      	ldr	r3, [r7, #12]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	685b      	ldr	r3, [r3, #4]
 800287c:	b2da      	uxtb	r2, r3
 800287e:	69fb      	ldr	r3, [r7, #28]
 8002880:	701a      	strb	r2, [r3, #0]
 8002882:	e008      	b.n	8002896 <HAL_UART_Receive+0x110>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8002884:	68fb      	ldr	r3, [r7, #12]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	685b      	ldr	r3, [r3, #4]
 800288a:	b2db      	uxtb	r3, r3
 800288c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002890:	b2da      	uxtb	r2, r3
 8002892:	69fb      	ldr	r3, [r7, #28]
 8002894:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8002896:	69fb      	ldr	r3, [r7, #28]
 8002898:	3301      	adds	r3, #1
 800289a:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80028a0:	b29b      	uxth	r3, r3
 80028a2:	3b01      	subs	r3, #1
 80028a4:	b29a      	uxth	r2, r3
 80028a6:	68fb      	ldr	r3, [r7, #12]
 80028a8:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 80028aa:	68fb      	ldr	r3, [r7, #12]
 80028ac:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80028ae:	b29b      	uxth	r3, r3
 80028b0:	2b00      	cmp	r3, #0
 80028b2:	d1b6      	bne.n	8002822 <HAL_UART_Receive+0x9c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80028b4:	68fb      	ldr	r3, [r7, #12]
 80028b6:	2220      	movs	r2, #32
 80028b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    return HAL_OK;
 80028bc:	2300      	movs	r3, #0
 80028be:	e000      	b.n	80028c2 <HAL_UART_Receive+0x13c>
  }
  else
  {
    return HAL_BUSY;
 80028c0:	2302      	movs	r3, #2
  }
}
 80028c2:	4618      	mov	r0, r3
 80028c4:	3720      	adds	r7, #32
 80028c6:	46bd      	mov	sp, r7
 80028c8:	bd80      	pop	{r7, pc}

080028ca <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80028ca:	b580      	push	{r7, lr}
 80028cc:	b090      	sub	sp, #64	; 0x40
 80028ce:	af00      	add	r7, sp, #0
 80028d0:	60f8      	str	r0, [r7, #12]
 80028d2:	60b9      	str	r1, [r7, #8]
 80028d4:	603b      	str	r3, [r7, #0]
 80028d6:	4613      	mov	r3, r2
 80028d8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80028da:	e050      	b.n	800297e <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80028dc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80028de:	f1b3 3fff 	cmp.w	r3, #4294967295
 80028e2:	d04c      	beq.n	800297e <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80028e4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	d007      	beq.n	80028fa <UART_WaitOnFlagUntilTimeout+0x30>
 80028ea:	f7fe fc75 	bl	80011d8 <HAL_GetTick>
 80028ee:	4602      	mov	r2, r0
 80028f0:	683b      	ldr	r3, [r7, #0]
 80028f2:	1ad3      	subs	r3, r2, r3
 80028f4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80028f6:	429a      	cmp	r2, r3
 80028f8:	d241      	bcs.n	800297e <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80028fa:	68fb      	ldr	r3, [r7, #12]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	330c      	adds	r3, #12
 8002900:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002902:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002904:	e853 3f00 	ldrex	r3, [r3]
 8002908:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800290a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800290c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8002910:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002912:	68fb      	ldr	r3, [r7, #12]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	330c      	adds	r3, #12
 8002918:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800291a:	637a      	str	r2, [r7, #52]	; 0x34
 800291c:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800291e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002920:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002922:	e841 2300 	strex	r3, r2, [r1]
 8002926:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8002928:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800292a:	2b00      	cmp	r3, #0
 800292c:	d1e5      	bne.n	80028fa <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800292e:	68fb      	ldr	r3, [r7, #12]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	3314      	adds	r3, #20
 8002934:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002936:	697b      	ldr	r3, [r7, #20]
 8002938:	e853 3f00 	ldrex	r3, [r3]
 800293c:	613b      	str	r3, [r7, #16]
   return(result);
 800293e:	693b      	ldr	r3, [r7, #16]
 8002940:	f023 0301 	bic.w	r3, r3, #1
 8002944:	63bb      	str	r3, [r7, #56]	; 0x38
 8002946:	68fb      	ldr	r3, [r7, #12]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	3314      	adds	r3, #20
 800294c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800294e:	623a      	str	r2, [r7, #32]
 8002950:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002952:	69f9      	ldr	r1, [r7, #28]
 8002954:	6a3a      	ldr	r2, [r7, #32]
 8002956:	e841 2300 	strex	r3, r2, [r1]
 800295a:	61bb      	str	r3, [r7, #24]
   return(result);
 800295c:	69bb      	ldr	r3, [r7, #24]
 800295e:	2b00      	cmp	r3, #0
 8002960:	d1e5      	bne.n	800292e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8002962:	68fb      	ldr	r3, [r7, #12]
 8002964:	2220      	movs	r2, #32
 8002966:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800296a:	68fb      	ldr	r3, [r7, #12]
 800296c:	2220      	movs	r2, #32
 800296e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8002972:	68fb      	ldr	r3, [r7, #12]
 8002974:	2200      	movs	r2, #0
 8002976:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800297a:	2303      	movs	r3, #3
 800297c:	e00f      	b.n	800299e <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800297e:	68fb      	ldr	r3, [r7, #12]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	681a      	ldr	r2, [r3, #0]
 8002984:	68bb      	ldr	r3, [r7, #8]
 8002986:	4013      	ands	r3, r2
 8002988:	68ba      	ldr	r2, [r7, #8]
 800298a:	429a      	cmp	r2, r3
 800298c:	bf0c      	ite	eq
 800298e:	2301      	moveq	r3, #1
 8002990:	2300      	movne	r3, #0
 8002992:	b2db      	uxtb	r3, r3
 8002994:	461a      	mov	r2, r3
 8002996:	79fb      	ldrb	r3, [r7, #7]
 8002998:	429a      	cmp	r2, r3
 800299a:	d09f      	beq.n	80028dc <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800299c:	2300      	movs	r3, #0
}
 800299e:	4618      	mov	r0, r3
 80029a0:	3740      	adds	r7, #64	; 0x40
 80029a2:	46bd      	mov	sp, r7
 80029a4:	bd80      	pop	{r7, pc}
	...

080029a8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80029a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80029ac:	b09f      	sub	sp, #124	; 0x7c
 80029ae:	af00      	add	r7, sp, #0
 80029b0:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80029b2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	691b      	ldr	r3, [r3, #16]
 80029b8:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80029bc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80029be:	68d9      	ldr	r1, [r3, #12]
 80029c0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80029c2:	681a      	ldr	r2, [r3, #0]
 80029c4:	ea40 0301 	orr.w	r3, r0, r1
 80029c8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80029ca:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80029cc:	689a      	ldr	r2, [r3, #8]
 80029ce:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80029d0:	691b      	ldr	r3, [r3, #16]
 80029d2:	431a      	orrs	r2, r3
 80029d4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80029d6:	695b      	ldr	r3, [r3, #20]
 80029d8:	431a      	orrs	r2, r3
 80029da:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80029dc:	69db      	ldr	r3, [r3, #28]
 80029de:	4313      	orrs	r3, r2
 80029e0:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 80029e2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	68db      	ldr	r3, [r3, #12]
 80029e8:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80029ec:	f021 010c 	bic.w	r1, r1, #12
 80029f0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80029f2:	681a      	ldr	r2, [r3, #0]
 80029f4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80029f6:	430b      	orrs	r3, r1
 80029f8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80029fa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	695b      	ldr	r3, [r3, #20]
 8002a00:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8002a04:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002a06:	6999      	ldr	r1, [r3, #24]
 8002a08:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002a0a:	681a      	ldr	r2, [r3, #0]
 8002a0c:	ea40 0301 	orr.w	r3, r0, r1
 8002a10:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002a12:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002a14:	681a      	ldr	r2, [r3, #0]
 8002a16:	4bc5      	ldr	r3, [pc, #788]	; (8002d2c <UART_SetConfig+0x384>)
 8002a18:	429a      	cmp	r2, r3
 8002a1a:	d004      	beq.n	8002a26 <UART_SetConfig+0x7e>
 8002a1c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002a1e:	681a      	ldr	r2, [r3, #0]
 8002a20:	4bc3      	ldr	r3, [pc, #780]	; (8002d30 <UART_SetConfig+0x388>)
 8002a22:	429a      	cmp	r2, r3
 8002a24:	d103      	bne.n	8002a2e <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002a26:	f7ff fdbb 	bl	80025a0 <HAL_RCC_GetPCLK2Freq>
 8002a2a:	6778      	str	r0, [r7, #116]	; 0x74
 8002a2c:	e002      	b.n	8002a34 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8002a2e:	f7ff fda3 	bl	8002578 <HAL_RCC_GetPCLK1Freq>
 8002a32:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002a34:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002a36:	69db      	ldr	r3, [r3, #28]
 8002a38:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002a3c:	f040 80b6 	bne.w	8002bac <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002a40:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002a42:	461c      	mov	r4, r3
 8002a44:	f04f 0500 	mov.w	r5, #0
 8002a48:	4622      	mov	r2, r4
 8002a4a:	462b      	mov	r3, r5
 8002a4c:	1891      	adds	r1, r2, r2
 8002a4e:	6439      	str	r1, [r7, #64]	; 0x40
 8002a50:	415b      	adcs	r3, r3
 8002a52:	647b      	str	r3, [r7, #68]	; 0x44
 8002a54:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8002a58:	1912      	adds	r2, r2, r4
 8002a5a:	eb45 0303 	adc.w	r3, r5, r3
 8002a5e:	f04f 0000 	mov.w	r0, #0
 8002a62:	f04f 0100 	mov.w	r1, #0
 8002a66:	00d9      	lsls	r1, r3, #3
 8002a68:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002a6c:	00d0      	lsls	r0, r2, #3
 8002a6e:	4602      	mov	r2, r0
 8002a70:	460b      	mov	r3, r1
 8002a72:	1911      	adds	r1, r2, r4
 8002a74:	6639      	str	r1, [r7, #96]	; 0x60
 8002a76:	416b      	adcs	r3, r5
 8002a78:	667b      	str	r3, [r7, #100]	; 0x64
 8002a7a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002a7c:	685b      	ldr	r3, [r3, #4]
 8002a7e:	461a      	mov	r2, r3
 8002a80:	f04f 0300 	mov.w	r3, #0
 8002a84:	1891      	adds	r1, r2, r2
 8002a86:	63b9      	str	r1, [r7, #56]	; 0x38
 8002a88:	415b      	adcs	r3, r3
 8002a8a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002a8c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8002a90:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8002a94:	f7fd fbfc 	bl	8000290 <__aeabi_uldivmod>
 8002a98:	4602      	mov	r2, r0
 8002a9a:	460b      	mov	r3, r1
 8002a9c:	4ba5      	ldr	r3, [pc, #660]	; (8002d34 <UART_SetConfig+0x38c>)
 8002a9e:	fba3 2302 	umull	r2, r3, r3, r2
 8002aa2:	095b      	lsrs	r3, r3, #5
 8002aa4:	011e      	lsls	r6, r3, #4
 8002aa6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002aa8:	461c      	mov	r4, r3
 8002aaa:	f04f 0500 	mov.w	r5, #0
 8002aae:	4622      	mov	r2, r4
 8002ab0:	462b      	mov	r3, r5
 8002ab2:	1891      	adds	r1, r2, r2
 8002ab4:	6339      	str	r1, [r7, #48]	; 0x30
 8002ab6:	415b      	adcs	r3, r3
 8002ab8:	637b      	str	r3, [r7, #52]	; 0x34
 8002aba:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8002abe:	1912      	adds	r2, r2, r4
 8002ac0:	eb45 0303 	adc.w	r3, r5, r3
 8002ac4:	f04f 0000 	mov.w	r0, #0
 8002ac8:	f04f 0100 	mov.w	r1, #0
 8002acc:	00d9      	lsls	r1, r3, #3
 8002ace:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002ad2:	00d0      	lsls	r0, r2, #3
 8002ad4:	4602      	mov	r2, r0
 8002ad6:	460b      	mov	r3, r1
 8002ad8:	1911      	adds	r1, r2, r4
 8002ada:	65b9      	str	r1, [r7, #88]	; 0x58
 8002adc:	416b      	adcs	r3, r5
 8002ade:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002ae0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002ae2:	685b      	ldr	r3, [r3, #4]
 8002ae4:	461a      	mov	r2, r3
 8002ae6:	f04f 0300 	mov.w	r3, #0
 8002aea:	1891      	adds	r1, r2, r2
 8002aec:	62b9      	str	r1, [r7, #40]	; 0x28
 8002aee:	415b      	adcs	r3, r3
 8002af0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002af2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002af6:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8002afa:	f7fd fbc9 	bl	8000290 <__aeabi_uldivmod>
 8002afe:	4602      	mov	r2, r0
 8002b00:	460b      	mov	r3, r1
 8002b02:	4b8c      	ldr	r3, [pc, #560]	; (8002d34 <UART_SetConfig+0x38c>)
 8002b04:	fba3 1302 	umull	r1, r3, r3, r2
 8002b08:	095b      	lsrs	r3, r3, #5
 8002b0a:	2164      	movs	r1, #100	; 0x64
 8002b0c:	fb01 f303 	mul.w	r3, r1, r3
 8002b10:	1ad3      	subs	r3, r2, r3
 8002b12:	00db      	lsls	r3, r3, #3
 8002b14:	3332      	adds	r3, #50	; 0x32
 8002b16:	4a87      	ldr	r2, [pc, #540]	; (8002d34 <UART_SetConfig+0x38c>)
 8002b18:	fba2 2303 	umull	r2, r3, r2, r3
 8002b1c:	095b      	lsrs	r3, r3, #5
 8002b1e:	005b      	lsls	r3, r3, #1
 8002b20:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002b24:	441e      	add	r6, r3
 8002b26:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002b28:	4618      	mov	r0, r3
 8002b2a:	f04f 0100 	mov.w	r1, #0
 8002b2e:	4602      	mov	r2, r0
 8002b30:	460b      	mov	r3, r1
 8002b32:	1894      	adds	r4, r2, r2
 8002b34:	623c      	str	r4, [r7, #32]
 8002b36:	415b      	adcs	r3, r3
 8002b38:	627b      	str	r3, [r7, #36]	; 0x24
 8002b3a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002b3e:	1812      	adds	r2, r2, r0
 8002b40:	eb41 0303 	adc.w	r3, r1, r3
 8002b44:	f04f 0400 	mov.w	r4, #0
 8002b48:	f04f 0500 	mov.w	r5, #0
 8002b4c:	00dd      	lsls	r5, r3, #3
 8002b4e:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8002b52:	00d4      	lsls	r4, r2, #3
 8002b54:	4622      	mov	r2, r4
 8002b56:	462b      	mov	r3, r5
 8002b58:	1814      	adds	r4, r2, r0
 8002b5a:	653c      	str	r4, [r7, #80]	; 0x50
 8002b5c:	414b      	adcs	r3, r1
 8002b5e:	657b      	str	r3, [r7, #84]	; 0x54
 8002b60:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002b62:	685b      	ldr	r3, [r3, #4]
 8002b64:	461a      	mov	r2, r3
 8002b66:	f04f 0300 	mov.w	r3, #0
 8002b6a:	1891      	adds	r1, r2, r2
 8002b6c:	61b9      	str	r1, [r7, #24]
 8002b6e:	415b      	adcs	r3, r3
 8002b70:	61fb      	str	r3, [r7, #28]
 8002b72:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002b76:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8002b7a:	f7fd fb89 	bl	8000290 <__aeabi_uldivmod>
 8002b7e:	4602      	mov	r2, r0
 8002b80:	460b      	mov	r3, r1
 8002b82:	4b6c      	ldr	r3, [pc, #432]	; (8002d34 <UART_SetConfig+0x38c>)
 8002b84:	fba3 1302 	umull	r1, r3, r3, r2
 8002b88:	095b      	lsrs	r3, r3, #5
 8002b8a:	2164      	movs	r1, #100	; 0x64
 8002b8c:	fb01 f303 	mul.w	r3, r1, r3
 8002b90:	1ad3      	subs	r3, r2, r3
 8002b92:	00db      	lsls	r3, r3, #3
 8002b94:	3332      	adds	r3, #50	; 0x32
 8002b96:	4a67      	ldr	r2, [pc, #412]	; (8002d34 <UART_SetConfig+0x38c>)
 8002b98:	fba2 2303 	umull	r2, r3, r2, r3
 8002b9c:	095b      	lsrs	r3, r3, #5
 8002b9e:	f003 0207 	and.w	r2, r3, #7
 8002ba2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	4432      	add	r2, r6
 8002ba8:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8002baa:	e0b9      	b.n	8002d20 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002bac:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002bae:	461c      	mov	r4, r3
 8002bb0:	f04f 0500 	mov.w	r5, #0
 8002bb4:	4622      	mov	r2, r4
 8002bb6:	462b      	mov	r3, r5
 8002bb8:	1891      	adds	r1, r2, r2
 8002bba:	6139      	str	r1, [r7, #16]
 8002bbc:	415b      	adcs	r3, r3
 8002bbe:	617b      	str	r3, [r7, #20]
 8002bc0:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8002bc4:	1912      	adds	r2, r2, r4
 8002bc6:	eb45 0303 	adc.w	r3, r5, r3
 8002bca:	f04f 0000 	mov.w	r0, #0
 8002bce:	f04f 0100 	mov.w	r1, #0
 8002bd2:	00d9      	lsls	r1, r3, #3
 8002bd4:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002bd8:	00d0      	lsls	r0, r2, #3
 8002bda:	4602      	mov	r2, r0
 8002bdc:	460b      	mov	r3, r1
 8002bde:	eb12 0804 	adds.w	r8, r2, r4
 8002be2:	eb43 0905 	adc.w	r9, r3, r5
 8002be6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002be8:	685b      	ldr	r3, [r3, #4]
 8002bea:	4618      	mov	r0, r3
 8002bec:	f04f 0100 	mov.w	r1, #0
 8002bf0:	f04f 0200 	mov.w	r2, #0
 8002bf4:	f04f 0300 	mov.w	r3, #0
 8002bf8:	008b      	lsls	r3, r1, #2
 8002bfa:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8002bfe:	0082      	lsls	r2, r0, #2
 8002c00:	4640      	mov	r0, r8
 8002c02:	4649      	mov	r1, r9
 8002c04:	f7fd fb44 	bl	8000290 <__aeabi_uldivmod>
 8002c08:	4602      	mov	r2, r0
 8002c0a:	460b      	mov	r3, r1
 8002c0c:	4b49      	ldr	r3, [pc, #292]	; (8002d34 <UART_SetConfig+0x38c>)
 8002c0e:	fba3 2302 	umull	r2, r3, r3, r2
 8002c12:	095b      	lsrs	r3, r3, #5
 8002c14:	011e      	lsls	r6, r3, #4
 8002c16:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002c18:	4618      	mov	r0, r3
 8002c1a:	f04f 0100 	mov.w	r1, #0
 8002c1e:	4602      	mov	r2, r0
 8002c20:	460b      	mov	r3, r1
 8002c22:	1894      	adds	r4, r2, r2
 8002c24:	60bc      	str	r4, [r7, #8]
 8002c26:	415b      	adcs	r3, r3
 8002c28:	60fb      	str	r3, [r7, #12]
 8002c2a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002c2e:	1812      	adds	r2, r2, r0
 8002c30:	eb41 0303 	adc.w	r3, r1, r3
 8002c34:	f04f 0400 	mov.w	r4, #0
 8002c38:	f04f 0500 	mov.w	r5, #0
 8002c3c:	00dd      	lsls	r5, r3, #3
 8002c3e:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8002c42:	00d4      	lsls	r4, r2, #3
 8002c44:	4622      	mov	r2, r4
 8002c46:	462b      	mov	r3, r5
 8002c48:	1814      	adds	r4, r2, r0
 8002c4a:	64bc      	str	r4, [r7, #72]	; 0x48
 8002c4c:	414b      	adcs	r3, r1
 8002c4e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002c50:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002c52:	685b      	ldr	r3, [r3, #4]
 8002c54:	4618      	mov	r0, r3
 8002c56:	f04f 0100 	mov.w	r1, #0
 8002c5a:	f04f 0200 	mov.w	r2, #0
 8002c5e:	f04f 0300 	mov.w	r3, #0
 8002c62:	008b      	lsls	r3, r1, #2
 8002c64:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8002c68:	0082      	lsls	r2, r0, #2
 8002c6a:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8002c6e:	f7fd fb0f 	bl	8000290 <__aeabi_uldivmod>
 8002c72:	4602      	mov	r2, r0
 8002c74:	460b      	mov	r3, r1
 8002c76:	4b2f      	ldr	r3, [pc, #188]	; (8002d34 <UART_SetConfig+0x38c>)
 8002c78:	fba3 1302 	umull	r1, r3, r3, r2
 8002c7c:	095b      	lsrs	r3, r3, #5
 8002c7e:	2164      	movs	r1, #100	; 0x64
 8002c80:	fb01 f303 	mul.w	r3, r1, r3
 8002c84:	1ad3      	subs	r3, r2, r3
 8002c86:	011b      	lsls	r3, r3, #4
 8002c88:	3332      	adds	r3, #50	; 0x32
 8002c8a:	4a2a      	ldr	r2, [pc, #168]	; (8002d34 <UART_SetConfig+0x38c>)
 8002c8c:	fba2 2303 	umull	r2, r3, r2, r3
 8002c90:	095b      	lsrs	r3, r3, #5
 8002c92:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002c96:	441e      	add	r6, r3
 8002c98:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002c9a:	4618      	mov	r0, r3
 8002c9c:	f04f 0100 	mov.w	r1, #0
 8002ca0:	4602      	mov	r2, r0
 8002ca2:	460b      	mov	r3, r1
 8002ca4:	1894      	adds	r4, r2, r2
 8002ca6:	603c      	str	r4, [r7, #0]
 8002ca8:	415b      	adcs	r3, r3
 8002caa:	607b      	str	r3, [r7, #4]
 8002cac:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002cb0:	1812      	adds	r2, r2, r0
 8002cb2:	eb41 0303 	adc.w	r3, r1, r3
 8002cb6:	f04f 0400 	mov.w	r4, #0
 8002cba:	f04f 0500 	mov.w	r5, #0
 8002cbe:	00dd      	lsls	r5, r3, #3
 8002cc0:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8002cc4:	00d4      	lsls	r4, r2, #3
 8002cc6:	4622      	mov	r2, r4
 8002cc8:	462b      	mov	r3, r5
 8002cca:	eb12 0a00 	adds.w	sl, r2, r0
 8002cce:	eb43 0b01 	adc.w	fp, r3, r1
 8002cd2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002cd4:	685b      	ldr	r3, [r3, #4]
 8002cd6:	4618      	mov	r0, r3
 8002cd8:	f04f 0100 	mov.w	r1, #0
 8002cdc:	f04f 0200 	mov.w	r2, #0
 8002ce0:	f04f 0300 	mov.w	r3, #0
 8002ce4:	008b      	lsls	r3, r1, #2
 8002ce6:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8002cea:	0082      	lsls	r2, r0, #2
 8002cec:	4650      	mov	r0, sl
 8002cee:	4659      	mov	r1, fp
 8002cf0:	f7fd face 	bl	8000290 <__aeabi_uldivmod>
 8002cf4:	4602      	mov	r2, r0
 8002cf6:	460b      	mov	r3, r1
 8002cf8:	4b0e      	ldr	r3, [pc, #56]	; (8002d34 <UART_SetConfig+0x38c>)
 8002cfa:	fba3 1302 	umull	r1, r3, r3, r2
 8002cfe:	095b      	lsrs	r3, r3, #5
 8002d00:	2164      	movs	r1, #100	; 0x64
 8002d02:	fb01 f303 	mul.w	r3, r1, r3
 8002d06:	1ad3      	subs	r3, r2, r3
 8002d08:	011b      	lsls	r3, r3, #4
 8002d0a:	3332      	adds	r3, #50	; 0x32
 8002d0c:	4a09      	ldr	r2, [pc, #36]	; (8002d34 <UART_SetConfig+0x38c>)
 8002d0e:	fba2 2303 	umull	r2, r3, r2, r3
 8002d12:	095b      	lsrs	r3, r3, #5
 8002d14:	f003 020f 	and.w	r2, r3, #15
 8002d18:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	4432      	add	r2, r6
 8002d1e:	609a      	str	r2, [r3, #8]
}
 8002d20:	bf00      	nop
 8002d22:	377c      	adds	r7, #124	; 0x7c
 8002d24:	46bd      	mov	sp, r7
 8002d26:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002d2a:	bf00      	nop
 8002d2c:	40011000 	.word	0x40011000
 8002d30:	40011400 	.word	0x40011400
 8002d34:	51eb851f 	.word	0x51eb851f

08002d38 <__errno>:
 8002d38:	4b01      	ldr	r3, [pc, #4]	; (8002d40 <__errno+0x8>)
 8002d3a:	6818      	ldr	r0, [r3, #0]
 8002d3c:	4770      	bx	lr
 8002d3e:	bf00      	nop
 8002d40:	2000000c 	.word	0x2000000c

08002d44 <__libc_init_array>:
 8002d44:	b570      	push	{r4, r5, r6, lr}
 8002d46:	4d0d      	ldr	r5, [pc, #52]	; (8002d7c <__libc_init_array+0x38>)
 8002d48:	4c0d      	ldr	r4, [pc, #52]	; (8002d80 <__libc_init_array+0x3c>)
 8002d4a:	1b64      	subs	r4, r4, r5
 8002d4c:	10a4      	asrs	r4, r4, #2
 8002d4e:	2600      	movs	r6, #0
 8002d50:	42a6      	cmp	r6, r4
 8002d52:	d109      	bne.n	8002d68 <__libc_init_array+0x24>
 8002d54:	4d0b      	ldr	r5, [pc, #44]	; (8002d84 <__libc_init_array+0x40>)
 8002d56:	4c0c      	ldr	r4, [pc, #48]	; (8002d88 <__libc_init_array+0x44>)
 8002d58:	f000 fc4e 	bl	80035f8 <_init>
 8002d5c:	1b64      	subs	r4, r4, r5
 8002d5e:	10a4      	asrs	r4, r4, #2
 8002d60:	2600      	movs	r6, #0
 8002d62:	42a6      	cmp	r6, r4
 8002d64:	d105      	bne.n	8002d72 <__libc_init_array+0x2e>
 8002d66:	bd70      	pop	{r4, r5, r6, pc}
 8002d68:	f855 3b04 	ldr.w	r3, [r5], #4
 8002d6c:	4798      	blx	r3
 8002d6e:	3601      	adds	r6, #1
 8002d70:	e7ee      	b.n	8002d50 <__libc_init_array+0xc>
 8002d72:	f855 3b04 	ldr.w	r3, [r5], #4
 8002d76:	4798      	blx	r3
 8002d78:	3601      	adds	r6, #1
 8002d7a:	e7f2      	b.n	8002d62 <__libc_init_array+0x1e>
 8002d7c:	080038a0 	.word	0x080038a0
 8002d80:	080038a0 	.word	0x080038a0
 8002d84:	080038a0 	.word	0x080038a0
 8002d88:	080038a4 	.word	0x080038a4

08002d8c <memset>:
 8002d8c:	4402      	add	r2, r0
 8002d8e:	4603      	mov	r3, r0
 8002d90:	4293      	cmp	r3, r2
 8002d92:	d100      	bne.n	8002d96 <memset+0xa>
 8002d94:	4770      	bx	lr
 8002d96:	f803 1b01 	strb.w	r1, [r3], #1
 8002d9a:	e7f9      	b.n	8002d90 <memset+0x4>

08002d9c <siprintf>:
 8002d9c:	b40e      	push	{r1, r2, r3}
 8002d9e:	b500      	push	{lr}
 8002da0:	b09c      	sub	sp, #112	; 0x70
 8002da2:	ab1d      	add	r3, sp, #116	; 0x74
 8002da4:	9002      	str	r0, [sp, #8]
 8002da6:	9006      	str	r0, [sp, #24]
 8002da8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8002dac:	4809      	ldr	r0, [pc, #36]	; (8002dd4 <siprintf+0x38>)
 8002dae:	9107      	str	r1, [sp, #28]
 8002db0:	9104      	str	r1, [sp, #16]
 8002db2:	4909      	ldr	r1, [pc, #36]	; (8002dd8 <siprintf+0x3c>)
 8002db4:	f853 2b04 	ldr.w	r2, [r3], #4
 8002db8:	9105      	str	r1, [sp, #20]
 8002dba:	6800      	ldr	r0, [r0, #0]
 8002dbc:	9301      	str	r3, [sp, #4]
 8002dbe:	a902      	add	r1, sp, #8
 8002dc0:	f000 f868 	bl	8002e94 <_svfiprintf_r>
 8002dc4:	9b02      	ldr	r3, [sp, #8]
 8002dc6:	2200      	movs	r2, #0
 8002dc8:	701a      	strb	r2, [r3, #0]
 8002dca:	b01c      	add	sp, #112	; 0x70
 8002dcc:	f85d eb04 	ldr.w	lr, [sp], #4
 8002dd0:	b003      	add	sp, #12
 8002dd2:	4770      	bx	lr
 8002dd4:	2000000c 	.word	0x2000000c
 8002dd8:	ffff0208 	.word	0xffff0208

08002ddc <__ssputs_r>:
 8002ddc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002de0:	688e      	ldr	r6, [r1, #8]
 8002de2:	429e      	cmp	r6, r3
 8002de4:	4682      	mov	sl, r0
 8002de6:	460c      	mov	r4, r1
 8002de8:	4690      	mov	r8, r2
 8002dea:	461f      	mov	r7, r3
 8002dec:	d838      	bhi.n	8002e60 <__ssputs_r+0x84>
 8002dee:	898a      	ldrh	r2, [r1, #12]
 8002df0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8002df4:	d032      	beq.n	8002e5c <__ssputs_r+0x80>
 8002df6:	6825      	ldr	r5, [r4, #0]
 8002df8:	6909      	ldr	r1, [r1, #16]
 8002dfa:	eba5 0901 	sub.w	r9, r5, r1
 8002dfe:	6965      	ldr	r5, [r4, #20]
 8002e00:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8002e04:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8002e08:	3301      	adds	r3, #1
 8002e0a:	444b      	add	r3, r9
 8002e0c:	106d      	asrs	r5, r5, #1
 8002e0e:	429d      	cmp	r5, r3
 8002e10:	bf38      	it	cc
 8002e12:	461d      	movcc	r5, r3
 8002e14:	0553      	lsls	r3, r2, #21
 8002e16:	d531      	bpl.n	8002e7c <__ssputs_r+0xa0>
 8002e18:	4629      	mov	r1, r5
 8002e1a:	f000 fb47 	bl	80034ac <_malloc_r>
 8002e1e:	4606      	mov	r6, r0
 8002e20:	b950      	cbnz	r0, 8002e38 <__ssputs_r+0x5c>
 8002e22:	230c      	movs	r3, #12
 8002e24:	f8ca 3000 	str.w	r3, [sl]
 8002e28:	89a3      	ldrh	r3, [r4, #12]
 8002e2a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002e2e:	81a3      	strh	r3, [r4, #12]
 8002e30:	f04f 30ff 	mov.w	r0, #4294967295
 8002e34:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002e38:	6921      	ldr	r1, [r4, #16]
 8002e3a:	464a      	mov	r2, r9
 8002e3c:	f000 fabe 	bl	80033bc <memcpy>
 8002e40:	89a3      	ldrh	r3, [r4, #12]
 8002e42:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8002e46:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002e4a:	81a3      	strh	r3, [r4, #12]
 8002e4c:	6126      	str	r6, [r4, #16]
 8002e4e:	6165      	str	r5, [r4, #20]
 8002e50:	444e      	add	r6, r9
 8002e52:	eba5 0509 	sub.w	r5, r5, r9
 8002e56:	6026      	str	r6, [r4, #0]
 8002e58:	60a5      	str	r5, [r4, #8]
 8002e5a:	463e      	mov	r6, r7
 8002e5c:	42be      	cmp	r6, r7
 8002e5e:	d900      	bls.n	8002e62 <__ssputs_r+0x86>
 8002e60:	463e      	mov	r6, r7
 8002e62:	4632      	mov	r2, r6
 8002e64:	6820      	ldr	r0, [r4, #0]
 8002e66:	4641      	mov	r1, r8
 8002e68:	f000 fab6 	bl	80033d8 <memmove>
 8002e6c:	68a3      	ldr	r3, [r4, #8]
 8002e6e:	6822      	ldr	r2, [r4, #0]
 8002e70:	1b9b      	subs	r3, r3, r6
 8002e72:	4432      	add	r2, r6
 8002e74:	60a3      	str	r3, [r4, #8]
 8002e76:	6022      	str	r2, [r4, #0]
 8002e78:	2000      	movs	r0, #0
 8002e7a:	e7db      	b.n	8002e34 <__ssputs_r+0x58>
 8002e7c:	462a      	mov	r2, r5
 8002e7e:	f000 fb6f 	bl	8003560 <_realloc_r>
 8002e82:	4606      	mov	r6, r0
 8002e84:	2800      	cmp	r0, #0
 8002e86:	d1e1      	bne.n	8002e4c <__ssputs_r+0x70>
 8002e88:	6921      	ldr	r1, [r4, #16]
 8002e8a:	4650      	mov	r0, sl
 8002e8c:	f000 fabe 	bl	800340c <_free_r>
 8002e90:	e7c7      	b.n	8002e22 <__ssputs_r+0x46>
	...

08002e94 <_svfiprintf_r>:
 8002e94:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002e98:	4698      	mov	r8, r3
 8002e9a:	898b      	ldrh	r3, [r1, #12]
 8002e9c:	061b      	lsls	r3, r3, #24
 8002e9e:	b09d      	sub	sp, #116	; 0x74
 8002ea0:	4607      	mov	r7, r0
 8002ea2:	460d      	mov	r5, r1
 8002ea4:	4614      	mov	r4, r2
 8002ea6:	d50e      	bpl.n	8002ec6 <_svfiprintf_r+0x32>
 8002ea8:	690b      	ldr	r3, [r1, #16]
 8002eaa:	b963      	cbnz	r3, 8002ec6 <_svfiprintf_r+0x32>
 8002eac:	2140      	movs	r1, #64	; 0x40
 8002eae:	f000 fafd 	bl	80034ac <_malloc_r>
 8002eb2:	6028      	str	r0, [r5, #0]
 8002eb4:	6128      	str	r0, [r5, #16]
 8002eb6:	b920      	cbnz	r0, 8002ec2 <_svfiprintf_r+0x2e>
 8002eb8:	230c      	movs	r3, #12
 8002eba:	603b      	str	r3, [r7, #0]
 8002ebc:	f04f 30ff 	mov.w	r0, #4294967295
 8002ec0:	e0d1      	b.n	8003066 <_svfiprintf_r+0x1d2>
 8002ec2:	2340      	movs	r3, #64	; 0x40
 8002ec4:	616b      	str	r3, [r5, #20]
 8002ec6:	2300      	movs	r3, #0
 8002ec8:	9309      	str	r3, [sp, #36]	; 0x24
 8002eca:	2320      	movs	r3, #32
 8002ecc:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8002ed0:	f8cd 800c 	str.w	r8, [sp, #12]
 8002ed4:	2330      	movs	r3, #48	; 0x30
 8002ed6:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8003080 <_svfiprintf_r+0x1ec>
 8002eda:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8002ede:	f04f 0901 	mov.w	r9, #1
 8002ee2:	4623      	mov	r3, r4
 8002ee4:	469a      	mov	sl, r3
 8002ee6:	f813 2b01 	ldrb.w	r2, [r3], #1
 8002eea:	b10a      	cbz	r2, 8002ef0 <_svfiprintf_r+0x5c>
 8002eec:	2a25      	cmp	r2, #37	; 0x25
 8002eee:	d1f9      	bne.n	8002ee4 <_svfiprintf_r+0x50>
 8002ef0:	ebba 0b04 	subs.w	fp, sl, r4
 8002ef4:	d00b      	beq.n	8002f0e <_svfiprintf_r+0x7a>
 8002ef6:	465b      	mov	r3, fp
 8002ef8:	4622      	mov	r2, r4
 8002efa:	4629      	mov	r1, r5
 8002efc:	4638      	mov	r0, r7
 8002efe:	f7ff ff6d 	bl	8002ddc <__ssputs_r>
 8002f02:	3001      	adds	r0, #1
 8002f04:	f000 80aa 	beq.w	800305c <_svfiprintf_r+0x1c8>
 8002f08:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8002f0a:	445a      	add	r2, fp
 8002f0c:	9209      	str	r2, [sp, #36]	; 0x24
 8002f0e:	f89a 3000 	ldrb.w	r3, [sl]
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	f000 80a2 	beq.w	800305c <_svfiprintf_r+0x1c8>
 8002f18:	2300      	movs	r3, #0
 8002f1a:	f04f 32ff 	mov.w	r2, #4294967295
 8002f1e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8002f22:	f10a 0a01 	add.w	sl, sl, #1
 8002f26:	9304      	str	r3, [sp, #16]
 8002f28:	9307      	str	r3, [sp, #28]
 8002f2a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8002f2e:	931a      	str	r3, [sp, #104]	; 0x68
 8002f30:	4654      	mov	r4, sl
 8002f32:	2205      	movs	r2, #5
 8002f34:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002f38:	4851      	ldr	r0, [pc, #324]	; (8003080 <_svfiprintf_r+0x1ec>)
 8002f3a:	f7fd f959 	bl	80001f0 <memchr>
 8002f3e:	9a04      	ldr	r2, [sp, #16]
 8002f40:	b9d8      	cbnz	r0, 8002f7a <_svfiprintf_r+0xe6>
 8002f42:	06d0      	lsls	r0, r2, #27
 8002f44:	bf44      	itt	mi
 8002f46:	2320      	movmi	r3, #32
 8002f48:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8002f4c:	0711      	lsls	r1, r2, #28
 8002f4e:	bf44      	itt	mi
 8002f50:	232b      	movmi	r3, #43	; 0x2b
 8002f52:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8002f56:	f89a 3000 	ldrb.w	r3, [sl]
 8002f5a:	2b2a      	cmp	r3, #42	; 0x2a
 8002f5c:	d015      	beq.n	8002f8a <_svfiprintf_r+0xf6>
 8002f5e:	9a07      	ldr	r2, [sp, #28]
 8002f60:	4654      	mov	r4, sl
 8002f62:	2000      	movs	r0, #0
 8002f64:	f04f 0c0a 	mov.w	ip, #10
 8002f68:	4621      	mov	r1, r4
 8002f6a:	f811 3b01 	ldrb.w	r3, [r1], #1
 8002f6e:	3b30      	subs	r3, #48	; 0x30
 8002f70:	2b09      	cmp	r3, #9
 8002f72:	d94e      	bls.n	8003012 <_svfiprintf_r+0x17e>
 8002f74:	b1b0      	cbz	r0, 8002fa4 <_svfiprintf_r+0x110>
 8002f76:	9207      	str	r2, [sp, #28]
 8002f78:	e014      	b.n	8002fa4 <_svfiprintf_r+0x110>
 8002f7a:	eba0 0308 	sub.w	r3, r0, r8
 8002f7e:	fa09 f303 	lsl.w	r3, r9, r3
 8002f82:	4313      	orrs	r3, r2
 8002f84:	9304      	str	r3, [sp, #16]
 8002f86:	46a2      	mov	sl, r4
 8002f88:	e7d2      	b.n	8002f30 <_svfiprintf_r+0x9c>
 8002f8a:	9b03      	ldr	r3, [sp, #12]
 8002f8c:	1d19      	adds	r1, r3, #4
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	9103      	str	r1, [sp, #12]
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	bfbb      	ittet	lt
 8002f96:	425b      	neglt	r3, r3
 8002f98:	f042 0202 	orrlt.w	r2, r2, #2
 8002f9c:	9307      	strge	r3, [sp, #28]
 8002f9e:	9307      	strlt	r3, [sp, #28]
 8002fa0:	bfb8      	it	lt
 8002fa2:	9204      	strlt	r2, [sp, #16]
 8002fa4:	7823      	ldrb	r3, [r4, #0]
 8002fa6:	2b2e      	cmp	r3, #46	; 0x2e
 8002fa8:	d10c      	bne.n	8002fc4 <_svfiprintf_r+0x130>
 8002faa:	7863      	ldrb	r3, [r4, #1]
 8002fac:	2b2a      	cmp	r3, #42	; 0x2a
 8002fae:	d135      	bne.n	800301c <_svfiprintf_r+0x188>
 8002fb0:	9b03      	ldr	r3, [sp, #12]
 8002fb2:	1d1a      	adds	r2, r3, #4
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	9203      	str	r2, [sp, #12]
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	bfb8      	it	lt
 8002fbc:	f04f 33ff 	movlt.w	r3, #4294967295
 8002fc0:	3402      	adds	r4, #2
 8002fc2:	9305      	str	r3, [sp, #20]
 8002fc4:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8003090 <_svfiprintf_r+0x1fc>
 8002fc8:	7821      	ldrb	r1, [r4, #0]
 8002fca:	2203      	movs	r2, #3
 8002fcc:	4650      	mov	r0, sl
 8002fce:	f7fd f90f 	bl	80001f0 <memchr>
 8002fd2:	b140      	cbz	r0, 8002fe6 <_svfiprintf_r+0x152>
 8002fd4:	2340      	movs	r3, #64	; 0x40
 8002fd6:	eba0 000a 	sub.w	r0, r0, sl
 8002fda:	fa03 f000 	lsl.w	r0, r3, r0
 8002fde:	9b04      	ldr	r3, [sp, #16]
 8002fe0:	4303      	orrs	r3, r0
 8002fe2:	3401      	adds	r4, #1
 8002fe4:	9304      	str	r3, [sp, #16]
 8002fe6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002fea:	4826      	ldr	r0, [pc, #152]	; (8003084 <_svfiprintf_r+0x1f0>)
 8002fec:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8002ff0:	2206      	movs	r2, #6
 8002ff2:	f7fd f8fd 	bl	80001f0 <memchr>
 8002ff6:	2800      	cmp	r0, #0
 8002ff8:	d038      	beq.n	800306c <_svfiprintf_r+0x1d8>
 8002ffa:	4b23      	ldr	r3, [pc, #140]	; (8003088 <_svfiprintf_r+0x1f4>)
 8002ffc:	bb1b      	cbnz	r3, 8003046 <_svfiprintf_r+0x1b2>
 8002ffe:	9b03      	ldr	r3, [sp, #12]
 8003000:	3307      	adds	r3, #7
 8003002:	f023 0307 	bic.w	r3, r3, #7
 8003006:	3308      	adds	r3, #8
 8003008:	9303      	str	r3, [sp, #12]
 800300a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800300c:	4433      	add	r3, r6
 800300e:	9309      	str	r3, [sp, #36]	; 0x24
 8003010:	e767      	b.n	8002ee2 <_svfiprintf_r+0x4e>
 8003012:	fb0c 3202 	mla	r2, ip, r2, r3
 8003016:	460c      	mov	r4, r1
 8003018:	2001      	movs	r0, #1
 800301a:	e7a5      	b.n	8002f68 <_svfiprintf_r+0xd4>
 800301c:	2300      	movs	r3, #0
 800301e:	3401      	adds	r4, #1
 8003020:	9305      	str	r3, [sp, #20]
 8003022:	4619      	mov	r1, r3
 8003024:	f04f 0c0a 	mov.w	ip, #10
 8003028:	4620      	mov	r0, r4
 800302a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800302e:	3a30      	subs	r2, #48	; 0x30
 8003030:	2a09      	cmp	r2, #9
 8003032:	d903      	bls.n	800303c <_svfiprintf_r+0x1a8>
 8003034:	2b00      	cmp	r3, #0
 8003036:	d0c5      	beq.n	8002fc4 <_svfiprintf_r+0x130>
 8003038:	9105      	str	r1, [sp, #20]
 800303a:	e7c3      	b.n	8002fc4 <_svfiprintf_r+0x130>
 800303c:	fb0c 2101 	mla	r1, ip, r1, r2
 8003040:	4604      	mov	r4, r0
 8003042:	2301      	movs	r3, #1
 8003044:	e7f0      	b.n	8003028 <_svfiprintf_r+0x194>
 8003046:	ab03      	add	r3, sp, #12
 8003048:	9300      	str	r3, [sp, #0]
 800304a:	462a      	mov	r2, r5
 800304c:	4b0f      	ldr	r3, [pc, #60]	; (800308c <_svfiprintf_r+0x1f8>)
 800304e:	a904      	add	r1, sp, #16
 8003050:	4638      	mov	r0, r7
 8003052:	f3af 8000 	nop.w
 8003056:	1c42      	adds	r2, r0, #1
 8003058:	4606      	mov	r6, r0
 800305a:	d1d6      	bne.n	800300a <_svfiprintf_r+0x176>
 800305c:	89ab      	ldrh	r3, [r5, #12]
 800305e:	065b      	lsls	r3, r3, #25
 8003060:	f53f af2c 	bmi.w	8002ebc <_svfiprintf_r+0x28>
 8003064:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003066:	b01d      	add	sp, #116	; 0x74
 8003068:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800306c:	ab03      	add	r3, sp, #12
 800306e:	9300      	str	r3, [sp, #0]
 8003070:	462a      	mov	r2, r5
 8003072:	4b06      	ldr	r3, [pc, #24]	; (800308c <_svfiprintf_r+0x1f8>)
 8003074:	a904      	add	r1, sp, #16
 8003076:	4638      	mov	r0, r7
 8003078:	f000 f87a 	bl	8003170 <_printf_i>
 800307c:	e7eb      	b.n	8003056 <_svfiprintf_r+0x1c2>
 800307e:	bf00      	nop
 8003080:	08003864 	.word	0x08003864
 8003084:	0800386e 	.word	0x0800386e
 8003088:	00000000 	.word	0x00000000
 800308c:	08002ddd 	.word	0x08002ddd
 8003090:	0800386a 	.word	0x0800386a

08003094 <_printf_common>:
 8003094:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003098:	4616      	mov	r6, r2
 800309a:	4699      	mov	r9, r3
 800309c:	688a      	ldr	r2, [r1, #8]
 800309e:	690b      	ldr	r3, [r1, #16]
 80030a0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80030a4:	4293      	cmp	r3, r2
 80030a6:	bfb8      	it	lt
 80030a8:	4613      	movlt	r3, r2
 80030aa:	6033      	str	r3, [r6, #0]
 80030ac:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80030b0:	4607      	mov	r7, r0
 80030b2:	460c      	mov	r4, r1
 80030b4:	b10a      	cbz	r2, 80030ba <_printf_common+0x26>
 80030b6:	3301      	adds	r3, #1
 80030b8:	6033      	str	r3, [r6, #0]
 80030ba:	6823      	ldr	r3, [r4, #0]
 80030bc:	0699      	lsls	r1, r3, #26
 80030be:	bf42      	ittt	mi
 80030c0:	6833      	ldrmi	r3, [r6, #0]
 80030c2:	3302      	addmi	r3, #2
 80030c4:	6033      	strmi	r3, [r6, #0]
 80030c6:	6825      	ldr	r5, [r4, #0]
 80030c8:	f015 0506 	ands.w	r5, r5, #6
 80030cc:	d106      	bne.n	80030dc <_printf_common+0x48>
 80030ce:	f104 0a19 	add.w	sl, r4, #25
 80030d2:	68e3      	ldr	r3, [r4, #12]
 80030d4:	6832      	ldr	r2, [r6, #0]
 80030d6:	1a9b      	subs	r3, r3, r2
 80030d8:	42ab      	cmp	r3, r5
 80030da:	dc26      	bgt.n	800312a <_printf_common+0x96>
 80030dc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80030e0:	1e13      	subs	r3, r2, #0
 80030e2:	6822      	ldr	r2, [r4, #0]
 80030e4:	bf18      	it	ne
 80030e6:	2301      	movne	r3, #1
 80030e8:	0692      	lsls	r2, r2, #26
 80030ea:	d42b      	bmi.n	8003144 <_printf_common+0xb0>
 80030ec:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80030f0:	4649      	mov	r1, r9
 80030f2:	4638      	mov	r0, r7
 80030f4:	47c0      	blx	r8
 80030f6:	3001      	adds	r0, #1
 80030f8:	d01e      	beq.n	8003138 <_printf_common+0xa4>
 80030fa:	6823      	ldr	r3, [r4, #0]
 80030fc:	68e5      	ldr	r5, [r4, #12]
 80030fe:	6832      	ldr	r2, [r6, #0]
 8003100:	f003 0306 	and.w	r3, r3, #6
 8003104:	2b04      	cmp	r3, #4
 8003106:	bf08      	it	eq
 8003108:	1aad      	subeq	r5, r5, r2
 800310a:	68a3      	ldr	r3, [r4, #8]
 800310c:	6922      	ldr	r2, [r4, #16]
 800310e:	bf0c      	ite	eq
 8003110:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003114:	2500      	movne	r5, #0
 8003116:	4293      	cmp	r3, r2
 8003118:	bfc4      	itt	gt
 800311a:	1a9b      	subgt	r3, r3, r2
 800311c:	18ed      	addgt	r5, r5, r3
 800311e:	2600      	movs	r6, #0
 8003120:	341a      	adds	r4, #26
 8003122:	42b5      	cmp	r5, r6
 8003124:	d11a      	bne.n	800315c <_printf_common+0xc8>
 8003126:	2000      	movs	r0, #0
 8003128:	e008      	b.n	800313c <_printf_common+0xa8>
 800312a:	2301      	movs	r3, #1
 800312c:	4652      	mov	r2, sl
 800312e:	4649      	mov	r1, r9
 8003130:	4638      	mov	r0, r7
 8003132:	47c0      	blx	r8
 8003134:	3001      	adds	r0, #1
 8003136:	d103      	bne.n	8003140 <_printf_common+0xac>
 8003138:	f04f 30ff 	mov.w	r0, #4294967295
 800313c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003140:	3501      	adds	r5, #1
 8003142:	e7c6      	b.n	80030d2 <_printf_common+0x3e>
 8003144:	18e1      	adds	r1, r4, r3
 8003146:	1c5a      	adds	r2, r3, #1
 8003148:	2030      	movs	r0, #48	; 0x30
 800314a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800314e:	4422      	add	r2, r4
 8003150:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003154:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003158:	3302      	adds	r3, #2
 800315a:	e7c7      	b.n	80030ec <_printf_common+0x58>
 800315c:	2301      	movs	r3, #1
 800315e:	4622      	mov	r2, r4
 8003160:	4649      	mov	r1, r9
 8003162:	4638      	mov	r0, r7
 8003164:	47c0      	blx	r8
 8003166:	3001      	adds	r0, #1
 8003168:	d0e6      	beq.n	8003138 <_printf_common+0xa4>
 800316a:	3601      	adds	r6, #1
 800316c:	e7d9      	b.n	8003122 <_printf_common+0x8e>
	...

08003170 <_printf_i>:
 8003170:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003174:	460c      	mov	r4, r1
 8003176:	4691      	mov	r9, r2
 8003178:	7e27      	ldrb	r7, [r4, #24]
 800317a:	990c      	ldr	r1, [sp, #48]	; 0x30
 800317c:	2f78      	cmp	r7, #120	; 0x78
 800317e:	4680      	mov	r8, r0
 8003180:	469a      	mov	sl, r3
 8003182:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003186:	d807      	bhi.n	8003198 <_printf_i+0x28>
 8003188:	2f62      	cmp	r7, #98	; 0x62
 800318a:	d80a      	bhi.n	80031a2 <_printf_i+0x32>
 800318c:	2f00      	cmp	r7, #0
 800318e:	f000 80d8 	beq.w	8003342 <_printf_i+0x1d2>
 8003192:	2f58      	cmp	r7, #88	; 0x58
 8003194:	f000 80a3 	beq.w	80032de <_printf_i+0x16e>
 8003198:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800319c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80031a0:	e03a      	b.n	8003218 <_printf_i+0xa8>
 80031a2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80031a6:	2b15      	cmp	r3, #21
 80031a8:	d8f6      	bhi.n	8003198 <_printf_i+0x28>
 80031aa:	a001      	add	r0, pc, #4	; (adr r0, 80031b0 <_printf_i+0x40>)
 80031ac:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 80031b0:	08003209 	.word	0x08003209
 80031b4:	0800321d 	.word	0x0800321d
 80031b8:	08003199 	.word	0x08003199
 80031bc:	08003199 	.word	0x08003199
 80031c0:	08003199 	.word	0x08003199
 80031c4:	08003199 	.word	0x08003199
 80031c8:	0800321d 	.word	0x0800321d
 80031cc:	08003199 	.word	0x08003199
 80031d0:	08003199 	.word	0x08003199
 80031d4:	08003199 	.word	0x08003199
 80031d8:	08003199 	.word	0x08003199
 80031dc:	08003329 	.word	0x08003329
 80031e0:	0800324d 	.word	0x0800324d
 80031e4:	0800330b 	.word	0x0800330b
 80031e8:	08003199 	.word	0x08003199
 80031ec:	08003199 	.word	0x08003199
 80031f0:	0800334b 	.word	0x0800334b
 80031f4:	08003199 	.word	0x08003199
 80031f8:	0800324d 	.word	0x0800324d
 80031fc:	08003199 	.word	0x08003199
 8003200:	08003199 	.word	0x08003199
 8003204:	08003313 	.word	0x08003313
 8003208:	680b      	ldr	r3, [r1, #0]
 800320a:	1d1a      	adds	r2, r3, #4
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	600a      	str	r2, [r1, #0]
 8003210:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8003214:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003218:	2301      	movs	r3, #1
 800321a:	e0a3      	b.n	8003364 <_printf_i+0x1f4>
 800321c:	6825      	ldr	r5, [r4, #0]
 800321e:	6808      	ldr	r0, [r1, #0]
 8003220:	062e      	lsls	r6, r5, #24
 8003222:	f100 0304 	add.w	r3, r0, #4
 8003226:	d50a      	bpl.n	800323e <_printf_i+0xce>
 8003228:	6805      	ldr	r5, [r0, #0]
 800322a:	600b      	str	r3, [r1, #0]
 800322c:	2d00      	cmp	r5, #0
 800322e:	da03      	bge.n	8003238 <_printf_i+0xc8>
 8003230:	232d      	movs	r3, #45	; 0x2d
 8003232:	426d      	negs	r5, r5
 8003234:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003238:	485e      	ldr	r0, [pc, #376]	; (80033b4 <_printf_i+0x244>)
 800323a:	230a      	movs	r3, #10
 800323c:	e019      	b.n	8003272 <_printf_i+0x102>
 800323e:	f015 0f40 	tst.w	r5, #64	; 0x40
 8003242:	6805      	ldr	r5, [r0, #0]
 8003244:	600b      	str	r3, [r1, #0]
 8003246:	bf18      	it	ne
 8003248:	b22d      	sxthne	r5, r5
 800324a:	e7ef      	b.n	800322c <_printf_i+0xbc>
 800324c:	680b      	ldr	r3, [r1, #0]
 800324e:	6825      	ldr	r5, [r4, #0]
 8003250:	1d18      	adds	r0, r3, #4
 8003252:	6008      	str	r0, [r1, #0]
 8003254:	0628      	lsls	r0, r5, #24
 8003256:	d501      	bpl.n	800325c <_printf_i+0xec>
 8003258:	681d      	ldr	r5, [r3, #0]
 800325a:	e002      	b.n	8003262 <_printf_i+0xf2>
 800325c:	0669      	lsls	r1, r5, #25
 800325e:	d5fb      	bpl.n	8003258 <_printf_i+0xe8>
 8003260:	881d      	ldrh	r5, [r3, #0]
 8003262:	4854      	ldr	r0, [pc, #336]	; (80033b4 <_printf_i+0x244>)
 8003264:	2f6f      	cmp	r7, #111	; 0x6f
 8003266:	bf0c      	ite	eq
 8003268:	2308      	moveq	r3, #8
 800326a:	230a      	movne	r3, #10
 800326c:	2100      	movs	r1, #0
 800326e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8003272:	6866      	ldr	r6, [r4, #4]
 8003274:	60a6      	str	r6, [r4, #8]
 8003276:	2e00      	cmp	r6, #0
 8003278:	bfa2      	ittt	ge
 800327a:	6821      	ldrge	r1, [r4, #0]
 800327c:	f021 0104 	bicge.w	r1, r1, #4
 8003280:	6021      	strge	r1, [r4, #0]
 8003282:	b90d      	cbnz	r5, 8003288 <_printf_i+0x118>
 8003284:	2e00      	cmp	r6, #0
 8003286:	d04d      	beq.n	8003324 <_printf_i+0x1b4>
 8003288:	4616      	mov	r6, r2
 800328a:	fbb5 f1f3 	udiv	r1, r5, r3
 800328e:	fb03 5711 	mls	r7, r3, r1, r5
 8003292:	5dc7      	ldrb	r7, [r0, r7]
 8003294:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8003298:	462f      	mov	r7, r5
 800329a:	42bb      	cmp	r3, r7
 800329c:	460d      	mov	r5, r1
 800329e:	d9f4      	bls.n	800328a <_printf_i+0x11a>
 80032a0:	2b08      	cmp	r3, #8
 80032a2:	d10b      	bne.n	80032bc <_printf_i+0x14c>
 80032a4:	6823      	ldr	r3, [r4, #0]
 80032a6:	07df      	lsls	r7, r3, #31
 80032a8:	d508      	bpl.n	80032bc <_printf_i+0x14c>
 80032aa:	6923      	ldr	r3, [r4, #16]
 80032ac:	6861      	ldr	r1, [r4, #4]
 80032ae:	4299      	cmp	r1, r3
 80032b0:	bfde      	ittt	le
 80032b2:	2330      	movle	r3, #48	; 0x30
 80032b4:	f806 3c01 	strble.w	r3, [r6, #-1]
 80032b8:	f106 36ff 	addle.w	r6, r6, #4294967295
 80032bc:	1b92      	subs	r2, r2, r6
 80032be:	6122      	str	r2, [r4, #16]
 80032c0:	f8cd a000 	str.w	sl, [sp]
 80032c4:	464b      	mov	r3, r9
 80032c6:	aa03      	add	r2, sp, #12
 80032c8:	4621      	mov	r1, r4
 80032ca:	4640      	mov	r0, r8
 80032cc:	f7ff fee2 	bl	8003094 <_printf_common>
 80032d0:	3001      	adds	r0, #1
 80032d2:	d14c      	bne.n	800336e <_printf_i+0x1fe>
 80032d4:	f04f 30ff 	mov.w	r0, #4294967295
 80032d8:	b004      	add	sp, #16
 80032da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80032de:	4835      	ldr	r0, [pc, #212]	; (80033b4 <_printf_i+0x244>)
 80032e0:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80032e4:	6823      	ldr	r3, [r4, #0]
 80032e6:	680e      	ldr	r6, [r1, #0]
 80032e8:	061f      	lsls	r7, r3, #24
 80032ea:	f856 5b04 	ldr.w	r5, [r6], #4
 80032ee:	600e      	str	r6, [r1, #0]
 80032f0:	d514      	bpl.n	800331c <_printf_i+0x1ac>
 80032f2:	07d9      	lsls	r1, r3, #31
 80032f4:	bf44      	itt	mi
 80032f6:	f043 0320 	orrmi.w	r3, r3, #32
 80032fa:	6023      	strmi	r3, [r4, #0]
 80032fc:	b91d      	cbnz	r5, 8003306 <_printf_i+0x196>
 80032fe:	6823      	ldr	r3, [r4, #0]
 8003300:	f023 0320 	bic.w	r3, r3, #32
 8003304:	6023      	str	r3, [r4, #0]
 8003306:	2310      	movs	r3, #16
 8003308:	e7b0      	b.n	800326c <_printf_i+0xfc>
 800330a:	6823      	ldr	r3, [r4, #0]
 800330c:	f043 0320 	orr.w	r3, r3, #32
 8003310:	6023      	str	r3, [r4, #0]
 8003312:	2378      	movs	r3, #120	; 0x78
 8003314:	4828      	ldr	r0, [pc, #160]	; (80033b8 <_printf_i+0x248>)
 8003316:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800331a:	e7e3      	b.n	80032e4 <_printf_i+0x174>
 800331c:	065e      	lsls	r6, r3, #25
 800331e:	bf48      	it	mi
 8003320:	b2ad      	uxthmi	r5, r5
 8003322:	e7e6      	b.n	80032f2 <_printf_i+0x182>
 8003324:	4616      	mov	r6, r2
 8003326:	e7bb      	b.n	80032a0 <_printf_i+0x130>
 8003328:	680b      	ldr	r3, [r1, #0]
 800332a:	6826      	ldr	r6, [r4, #0]
 800332c:	6960      	ldr	r0, [r4, #20]
 800332e:	1d1d      	adds	r5, r3, #4
 8003330:	600d      	str	r5, [r1, #0]
 8003332:	0635      	lsls	r5, r6, #24
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	d501      	bpl.n	800333c <_printf_i+0x1cc>
 8003338:	6018      	str	r0, [r3, #0]
 800333a:	e002      	b.n	8003342 <_printf_i+0x1d2>
 800333c:	0671      	lsls	r1, r6, #25
 800333e:	d5fb      	bpl.n	8003338 <_printf_i+0x1c8>
 8003340:	8018      	strh	r0, [r3, #0]
 8003342:	2300      	movs	r3, #0
 8003344:	6123      	str	r3, [r4, #16]
 8003346:	4616      	mov	r6, r2
 8003348:	e7ba      	b.n	80032c0 <_printf_i+0x150>
 800334a:	680b      	ldr	r3, [r1, #0]
 800334c:	1d1a      	adds	r2, r3, #4
 800334e:	600a      	str	r2, [r1, #0]
 8003350:	681e      	ldr	r6, [r3, #0]
 8003352:	6862      	ldr	r2, [r4, #4]
 8003354:	2100      	movs	r1, #0
 8003356:	4630      	mov	r0, r6
 8003358:	f7fc ff4a 	bl	80001f0 <memchr>
 800335c:	b108      	cbz	r0, 8003362 <_printf_i+0x1f2>
 800335e:	1b80      	subs	r0, r0, r6
 8003360:	6060      	str	r0, [r4, #4]
 8003362:	6863      	ldr	r3, [r4, #4]
 8003364:	6123      	str	r3, [r4, #16]
 8003366:	2300      	movs	r3, #0
 8003368:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800336c:	e7a8      	b.n	80032c0 <_printf_i+0x150>
 800336e:	6923      	ldr	r3, [r4, #16]
 8003370:	4632      	mov	r2, r6
 8003372:	4649      	mov	r1, r9
 8003374:	4640      	mov	r0, r8
 8003376:	47d0      	blx	sl
 8003378:	3001      	adds	r0, #1
 800337a:	d0ab      	beq.n	80032d4 <_printf_i+0x164>
 800337c:	6823      	ldr	r3, [r4, #0]
 800337e:	079b      	lsls	r3, r3, #30
 8003380:	d413      	bmi.n	80033aa <_printf_i+0x23a>
 8003382:	68e0      	ldr	r0, [r4, #12]
 8003384:	9b03      	ldr	r3, [sp, #12]
 8003386:	4298      	cmp	r0, r3
 8003388:	bfb8      	it	lt
 800338a:	4618      	movlt	r0, r3
 800338c:	e7a4      	b.n	80032d8 <_printf_i+0x168>
 800338e:	2301      	movs	r3, #1
 8003390:	4632      	mov	r2, r6
 8003392:	4649      	mov	r1, r9
 8003394:	4640      	mov	r0, r8
 8003396:	47d0      	blx	sl
 8003398:	3001      	adds	r0, #1
 800339a:	d09b      	beq.n	80032d4 <_printf_i+0x164>
 800339c:	3501      	adds	r5, #1
 800339e:	68e3      	ldr	r3, [r4, #12]
 80033a0:	9903      	ldr	r1, [sp, #12]
 80033a2:	1a5b      	subs	r3, r3, r1
 80033a4:	42ab      	cmp	r3, r5
 80033a6:	dcf2      	bgt.n	800338e <_printf_i+0x21e>
 80033a8:	e7eb      	b.n	8003382 <_printf_i+0x212>
 80033aa:	2500      	movs	r5, #0
 80033ac:	f104 0619 	add.w	r6, r4, #25
 80033b0:	e7f5      	b.n	800339e <_printf_i+0x22e>
 80033b2:	bf00      	nop
 80033b4:	08003875 	.word	0x08003875
 80033b8:	08003886 	.word	0x08003886

080033bc <memcpy>:
 80033bc:	440a      	add	r2, r1
 80033be:	4291      	cmp	r1, r2
 80033c0:	f100 33ff 	add.w	r3, r0, #4294967295
 80033c4:	d100      	bne.n	80033c8 <memcpy+0xc>
 80033c6:	4770      	bx	lr
 80033c8:	b510      	push	{r4, lr}
 80033ca:	f811 4b01 	ldrb.w	r4, [r1], #1
 80033ce:	f803 4f01 	strb.w	r4, [r3, #1]!
 80033d2:	4291      	cmp	r1, r2
 80033d4:	d1f9      	bne.n	80033ca <memcpy+0xe>
 80033d6:	bd10      	pop	{r4, pc}

080033d8 <memmove>:
 80033d8:	4288      	cmp	r0, r1
 80033da:	b510      	push	{r4, lr}
 80033dc:	eb01 0402 	add.w	r4, r1, r2
 80033e0:	d902      	bls.n	80033e8 <memmove+0x10>
 80033e2:	4284      	cmp	r4, r0
 80033e4:	4623      	mov	r3, r4
 80033e6:	d807      	bhi.n	80033f8 <memmove+0x20>
 80033e8:	1e43      	subs	r3, r0, #1
 80033ea:	42a1      	cmp	r1, r4
 80033ec:	d008      	beq.n	8003400 <memmove+0x28>
 80033ee:	f811 2b01 	ldrb.w	r2, [r1], #1
 80033f2:	f803 2f01 	strb.w	r2, [r3, #1]!
 80033f6:	e7f8      	b.n	80033ea <memmove+0x12>
 80033f8:	4402      	add	r2, r0
 80033fa:	4601      	mov	r1, r0
 80033fc:	428a      	cmp	r2, r1
 80033fe:	d100      	bne.n	8003402 <memmove+0x2a>
 8003400:	bd10      	pop	{r4, pc}
 8003402:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8003406:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800340a:	e7f7      	b.n	80033fc <memmove+0x24>

0800340c <_free_r>:
 800340c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800340e:	2900      	cmp	r1, #0
 8003410:	d048      	beq.n	80034a4 <_free_r+0x98>
 8003412:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003416:	9001      	str	r0, [sp, #4]
 8003418:	2b00      	cmp	r3, #0
 800341a:	f1a1 0404 	sub.w	r4, r1, #4
 800341e:	bfb8      	it	lt
 8003420:	18e4      	addlt	r4, r4, r3
 8003422:	f000 f8d3 	bl	80035cc <__malloc_lock>
 8003426:	4a20      	ldr	r2, [pc, #128]	; (80034a8 <_free_r+0x9c>)
 8003428:	9801      	ldr	r0, [sp, #4]
 800342a:	6813      	ldr	r3, [r2, #0]
 800342c:	4615      	mov	r5, r2
 800342e:	b933      	cbnz	r3, 800343e <_free_r+0x32>
 8003430:	6063      	str	r3, [r4, #4]
 8003432:	6014      	str	r4, [r2, #0]
 8003434:	b003      	add	sp, #12
 8003436:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800343a:	f000 b8cd 	b.w	80035d8 <__malloc_unlock>
 800343e:	42a3      	cmp	r3, r4
 8003440:	d90b      	bls.n	800345a <_free_r+0x4e>
 8003442:	6821      	ldr	r1, [r4, #0]
 8003444:	1862      	adds	r2, r4, r1
 8003446:	4293      	cmp	r3, r2
 8003448:	bf04      	itt	eq
 800344a:	681a      	ldreq	r2, [r3, #0]
 800344c:	685b      	ldreq	r3, [r3, #4]
 800344e:	6063      	str	r3, [r4, #4]
 8003450:	bf04      	itt	eq
 8003452:	1852      	addeq	r2, r2, r1
 8003454:	6022      	streq	r2, [r4, #0]
 8003456:	602c      	str	r4, [r5, #0]
 8003458:	e7ec      	b.n	8003434 <_free_r+0x28>
 800345a:	461a      	mov	r2, r3
 800345c:	685b      	ldr	r3, [r3, #4]
 800345e:	b10b      	cbz	r3, 8003464 <_free_r+0x58>
 8003460:	42a3      	cmp	r3, r4
 8003462:	d9fa      	bls.n	800345a <_free_r+0x4e>
 8003464:	6811      	ldr	r1, [r2, #0]
 8003466:	1855      	adds	r5, r2, r1
 8003468:	42a5      	cmp	r5, r4
 800346a:	d10b      	bne.n	8003484 <_free_r+0x78>
 800346c:	6824      	ldr	r4, [r4, #0]
 800346e:	4421      	add	r1, r4
 8003470:	1854      	adds	r4, r2, r1
 8003472:	42a3      	cmp	r3, r4
 8003474:	6011      	str	r1, [r2, #0]
 8003476:	d1dd      	bne.n	8003434 <_free_r+0x28>
 8003478:	681c      	ldr	r4, [r3, #0]
 800347a:	685b      	ldr	r3, [r3, #4]
 800347c:	6053      	str	r3, [r2, #4]
 800347e:	4421      	add	r1, r4
 8003480:	6011      	str	r1, [r2, #0]
 8003482:	e7d7      	b.n	8003434 <_free_r+0x28>
 8003484:	d902      	bls.n	800348c <_free_r+0x80>
 8003486:	230c      	movs	r3, #12
 8003488:	6003      	str	r3, [r0, #0]
 800348a:	e7d3      	b.n	8003434 <_free_r+0x28>
 800348c:	6825      	ldr	r5, [r4, #0]
 800348e:	1961      	adds	r1, r4, r5
 8003490:	428b      	cmp	r3, r1
 8003492:	bf04      	itt	eq
 8003494:	6819      	ldreq	r1, [r3, #0]
 8003496:	685b      	ldreq	r3, [r3, #4]
 8003498:	6063      	str	r3, [r4, #4]
 800349a:	bf04      	itt	eq
 800349c:	1949      	addeq	r1, r1, r5
 800349e:	6021      	streq	r1, [r4, #0]
 80034a0:	6054      	str	r4, [r2, #4]
 80034a2:	e7c7      	b.n	8003434 <_free_r+0x28>
 80034a4:	b003      	add	sp, #12
 80034a6:	bd30      	pop	{r4, r5, pc}
 80034a8:	20000090 	.word	0x20000090

080034ac <_malloc_r>:
 80034ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80034ae:	1ccd      	adds	r5, r1, #3
 80034b0:	f025 0503 	bic.w	r5, r5, #3
 80034b4:	3508      	adds	r5, #8
 80034b6:	2d0c      	cmp	r5, #12
 80034b8:	bf38      	it	cc
 80034ba:	250c      	movcc	r5, #12
 80034bc:	2d00      	cmp	r5, #0
 80034be:	4606      	mov	r6, r0
 80034c0:	db01      	blt.n	80034c6 <_malloc_r+0x1a>
 80034c2:	42a9      	cmp	r1, r5
 80034c4:	d903      	bls.n	80034ce <_malloc_r+0x22>
 80034c6:	230c      	movs	r3, #12
 80034c8:	6033      	str	r3, [r6, #0]
 80034ca:	2000      	movs	r0, #0
 80034cc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80034ce:	f000 f87d 	bl	80035cc <__malloc_lock>
 80034d2:	4921      	ldr	r1, [pc, #132]	; (8003558 <_malloc_r+0xac>)
 80034d4:	680a      	ldr	r2, [r1, #0]
 80034d6:	4614      	mov	r4, r2
 80034d8:	b99c      	cbnz	r4, 8003502 <_malloc_r+0x56>
 80034da:	4f20      	ldr	r7, [pc, #128]	; (800355c <_malloc_r+0xb0>)
 80034dc:	683b      	ldr	r3, [r7, #0]
 80034de:	b923      	cbnz	r3, 80034ea <_malloc_r+0x3e>
 80034e0:	4621      	mov	r1, r4
 80034e2:	4630      	mov	r0, r6
 80034e4:	f000 f862 	bl	80035ac <_sbrk_r>
 80034e8:	6038      	str	r0, [r7, #0]
 80034ea:	4629      	mov	r1, r5
 80034ec:	4630      	mov	r0, r6
 80034ee:	f000 f85d 	bl	80035ac <_sbrk_r>
 80034f2:	1c43      	adds	r3, r0, #1
 80034f4:	d123      	bne.n	800353e <_malloc_r+0x92>
 80034f6:	230c      	movs	r3, #12
 80034f8:	6033      	str	r3, [r6, #0]
 80034fa:	4630      	mov	r0, r6
 80034fc:	f000 f86c 	bl	80035d8 <__malloc_unlock>
 8003500:	e7e3      	b.n	80034ca <_malloc_r+0x1e>
 8003502:	6823      	ldr	r3, [r4, #0]
 8003504:	1b5b      	subs	r3, r3, r5
 8003506:	d417      	bmi.n	8003538 <_malloc_r+0x8c>
 8003508:	2b0b      	cmp	r3, #11
 800350a:	d903      	bls.n	8003514 <_malloc_r+0x68>
 800350c:	6023      	str	r3, [r4, #0]
 800350e:	441c      	add	r4, r3
 8003510:	6025      	str	r5, [r4, #0]
 8003512:	e004      	b.n	800351e <_malloc_r+0x72>
 8003514:	6863      	ldr	r3, [r4, #4]
 8003516:	42a2      	cmp	r2, r4
 8003518:	bf0c      	ite	eq
 800351a:	600b      	streq	r3, [r1, #0]
 800351c:	6053      	strne	r3, [r2, #4]
 800351e:	4630      	mov	r0, r6
 8003520:	f000 f85a 	bl	80035d8 <__malloc_unlock>
 8003524:	f104 000b 	add.w	r0, r4, #11
 8003528:	1d23      	adds	r3, r4, #4
 800352a:	f020 0007 	bic.w	r0, r0, #7
 800352e:	1ac2      	subs	r2, r0, r3
 8003530:	d0cc      	beq.n	80034cc <_malloc_r+0x20>
 8003532:	1a1b      	subs	r3, r3, r0
 8003534:	50a3      	str	r3, [r4, r2]
 8003536:	e7c9      	b.n	80034cc <_malloc_r+0x20>
 8003538:	4622      	mov	r2, r4
 800353a:	6864      	ldr	r4, [r4, #4]
 800353c:	e7cc      	b.n	80034d8 <_malloc_r+0x2c>
 800353e:	1cc4      	adds	r4, r0, #3
 8003540:	f024 0403 	bic.w	r4, r4, #3
 8003544:	42a0      	cmp	r0, r4
 8003546:	d0e3      	beq.n	8003510 <_malloc_r+0x64>
 8003548:	1a21      	subs	r1, r4, r0
 800354a:	4630      	mov	r0, r6
 800354c:	f000 f82e 	bl	80035ac <_sbrk_r>
 8003550:	3001      	adds	r0, #1
 8003552:	d1dd      	bne.n	8003510 <_malloc_r+0x64>
 8003554:	e7cf      	b.n	80034f6 <_malloc_r+0x4a>
 8003556:	bf00      	nop
 8003558:	20000090 	.word	0x20000090
 800355c:	20000094 	.word	0x20000094

08003560 <_realloc_r>:
 8003560:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003562:	4607      	mov	r7, r0
 8003564:	4614      	mov	r4, r2
 8003566:	460e      	mov	r6, r1
 8003568:	b921      	cbnz	r1, 8003574 <_realloc_r+0x14>
 800356a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800356e:	4611      	mov	r1, r2
 8003570:	f7ff bf9c 	b.w	80034ac <_malloc_r>
 8003574:	b922      	cbnz	r2, 8003580 <_realloc_r+0x20>
 8003576:	f7ff ff49 	bl	800340c <_free_r>
 800357a:	4625      	mov	r5, r4
 800357c:	4628      	mov	r0, r5
 800357e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003580:	f000 f830 	bl	80035e4 <_malloc_usable_size_r>
 8003584:	42a0      	cmp	r0, r4
 8003586:	d20f      	bcs.n	80035a8 <_realloc_r+0x48>
 8003588:	4621      	mov	r1, r4
 800358a:	4638      	mov	r0, r7
 800358c:	f7ff ff8e 	bl	80034ac <_malloc_r>
 8003590:	4605      	mov	r5, r0
 8003592:	2800      	cmp	r0, #0
 8003594:	d0f2      	beq.n	800357c <_realloc_r+0x1c>
 8003596:	4631      	mov	r1, r6
 8003598:	4622      	mov	r2, r4
 800359a:	f7ff ff0f 	bl	80033bc <memcpy>
 800359e:	4631      	mov	r1, r6
 80035a0:	4638      	mov	r0, r7
 80035a2:	f7ff ff33 	bl	800340c <_free_r>
 80035a6:	e7e9      	b.n	800357c <_realloc_r+0x1c>
 80035a8:	4635      	mov	r5, r6
 80035aa:	e7e7      	b.n	800357c <_realloc_r+0x1c>

080035ac <_sbrk_r>:
 80035ac:	b538      	push	{r3, r4, r5, lr}
 80035ae:	4d06      	ldr	r5, [pc, #24]	; (80035c8 <_sbrk_r+0x1c>)
 80035b0:	2300      	movs	r3, #0
 80035b2:	4604      	mov	r4, r0
 80035b4:	4608      	mov	r0, r1
 80035b6:	602b      	str	r3, [r5, #0]
 80035b8:	f7fd fd36 	bl	8001028 <_sbrk>
 80035bc:	1c43      	adds	r3, r0, #1
 80035be:	d102      	bne.n	80035c6 <_sbrk_r+0x1a>
 80035c0:	682b      	ldr	r3, [r5, #0]
 80035c2:	b103      	cbz	r3, 80035c6 <_sbrk_r+0x1a>
 80035c4:	6023      	str	r3, [r4, #0]
 80035c6:	bd38      	pop	{r3, r4, r5, pc}
 80035c8:	20000128 	.word	0x20000128

080035cc <__malloc_lock>:
 80035cc:	4801      	ldr	r0, [pc, #4]	; (80035d4 <__malloc_lock+0x8>)
 80035ce:	f000 b811 	b.w	80035f4 <__retarget_lock_acquire_recursive>
 80035d2:	bf00      	nop
 80035d4:	20000130 	.word	0x20000130

080035d8 <__malloc_unlock>:
 80035d8:	4801      	ldr	r0, [pc, #4]	; (80035e0 <__malloc_unlock+0x8>)
 80035da:	f000 b80c 	b.w	80035f6 <__retarget_lock_release_recursive>
 80035de:	bf00      	nop
 80035e0:	20000130 	.word	0x20000130

080035e4 <_malloc_usable_size_r>:
 80035e4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80035e8:	1f18      	subs	r0, r3, #4
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	bfbc      	itt	lt
 80035ee:	580b      	ldrlt	r3, [r1, r0]
 80035f0:	18c0      	addlt	r0, r0, r3
 80035f2:	4770      	bx	lr

080035f4 <__retarget_lock_acquire_recursive>:
 80035f4:	4770      	bx	lr

080035f6 <__retarget_lock_release_recursive>:
 80035f6:	4770      	bx	lr

080035f8 <_init>:
 80035f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80035fa:	bf00      	nop
 80035fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80035fe:	bc08      	pop	{r3}
 8003600:	469e      	mov	lr, r3
 8003602:	4770      	bx	lr

08003604 <_fini>:
 8003604:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003606:	bf00      	nop
 8003608:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800360a:	bc08      	pop	{r3}
 800360c:	469e      	mov	lr, r3
 800360e:	4770      	bx	lr
